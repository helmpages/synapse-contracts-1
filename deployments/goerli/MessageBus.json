{
  "address": "0xe0fa08834465EcC36c494F2b6C87b82Ab7970413",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasFeePricing",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "CallReverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "msgId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcNonce",
          "type": "uint64"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcChainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiver",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dstChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authVerifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "computeMessageId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "estimateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        }
      ],
      "name": "executeMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasFeePricing",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        }
      ],
      "name": "getExecutedMessage",
      "outputs": [
        {
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_receiver",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authVerifier",
          "type": "address"
        }
      ],
      "name": "updateAuthVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasFeePricing",
          "type": "address"
        }
      ],
      "name": "updateGasFeePricing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        },
        {
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "updateMessageStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawGasFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c4dc60c2f849a792055c203c3fa4cf871d7f8cb36ca3b6023925a7b1bc6f527",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0xe0fa08834465EcC36c494F2b6C87b82Ab7970413",
    "transactionIndex": 18,
    "gasUsed": "1931502",
    "logsBloom": "0x
    "blockHash": "0x169e40cc9833fd96bf98890899135b1ca7d52afa1243565aff9830c00a7d1492",
    "transactionHash": "0x3c4dc60c2f849a792055c203c3fa4cf871d7f8cb36ca3b6023925a7b1bc6f527",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 6824247,
        "transactionHash": "0x3c4dc60c2f849a792055c203c3fa4cf871d7f8cb36ca3b6023925a7b1bc6f527",
        "address": "0xe0fa08834465EcC36c494F2b6C87b82Ab7970413",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0x169e40cc9833fd96bf98890899135b1ca7d52afa1243565aff9830c00a7d1492"
      }
    ],
    "blockNumber": 6824247,
    "cumulativeGasUsed": "4696746",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x22cdc93F53Ee3F6b8Ad66faD6f98915a5349950E",
    "0x9508BF380c1e6f751D97604732eF1Bae6673f299"
  ],
  "solcInputHash": "6d2671d786a2334b139a5ee0f6c5f31f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasFeePricing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CallReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"msgId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcNonce\",\"type\":\"uint64\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"computeMessageId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"estimateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasFeePricing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"getExecutedMessage\",\"outputs\":[{\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authVerifier\",\"type\":\"address\"}],\"name\":\"updateAuthVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasFeePricing\",\"type\":\"address\"}],\"name\":\"updateGasFeePricing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"},{\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"updateMessageStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawGasFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)\":{\"params\":{\"_dstAddress\":\"Destination address that the arbitrary message will be passed to\",\"_gasLimit\":\"Gas limit to be passed alongside the message, depending on the fee paid on srcChain\",\"_message\":\"Arbitrary message payload to pass to the destination chain receiver\",\"_srcAddress\":\"Originating bytes32 address of the message sender on the srcChain\",\"_srcChainId\":\"Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendMessage(bytes32,uint256,bytes,bytes)\":{\"params\":{\"_dstChainId\":\"The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\",\"_message\":\"The arbitrary payload to pass to the destination chain receiver\",\"_options\":\"Versioned struct used to instruct relayer on how to proceed with gas limits\",\"_receiver\":\"The bytes32 address of the destination contract to be called\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawGasFees(address)\":{\"params\":{\"to\":\"Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)\":{\"notice\":\"Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\"},\"sendMessage(bytes32,uint256,bytes,bytes)\":{\"notice\":\"Sends a message to a receiving contract address on another chain. Sender must make sure that the message is unique and not a duplicate message.\"},\"updateMessageStatus(bytes32,uint8)\":{\"notice\":\"CONTRACT CONFIG \"},\"withdrawGasFees(address)\":{\"notice\":\"Withdraws accumulated fees in native gas token, based on fees variable.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/MessageBus.sol\":\"MessageBus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/messaging/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./MessageBusSender.sol\\\";\\nimport \\\"./MessageBusReceiver.sol\\\";\\n\\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\\n    constructor(address _gasFeePricing, address _authVerifier)\\n        MessageBusSender(_gasFeePricing)\\n        MessageBusReceiver(_authVerifier)\\n    {}\\n}\\n\",\"keccak256\":\"0xa06b67fe831c4da3c49fdac8b3e64315f1d0d96adddb36e5499b6eaf50de2ed1\",\"license\":\"MIT\"},\"contracts/messaging/MessageBusReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IAuthVerifier.sol\\\";\\nimport \\\"./interfaces/ISynMessagingReceiver.sol\\\";\\n\\ncontract MessageBusReceiver is Ownable {\\n    address public authVerifier;\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail\\n    }\\n\\n    // Store all successfully executed messages\\n    mapping(bytes32 => TxStatus) executedMessages;\\n\\n    // TODO: Rename to follow one standard convention -> Send -> Receive?\\n    event Executed(\\n        bytes32 msgId,\\n        TxStatus status,\\n        address indexed _dstAddress,\\n        uint64 srcChainId,\\n        uint64 srcNonce\\n    );\\n    event CallReverted(string reason);\\n\\n    constructor(address _authVerifier) {\\n        authVerifier = _authVerifier;\\n    }\\n\\n    function computeMessageId(\\n        uint256 _srcChainId,\\n        bytes32 _srcAddress,\\n        address _dstAddress,\\n        uint256 _nonce,\\n        bytes calldata _message\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _srcChainId,\\n                    _srcAddress,\\n                    block.chainid,\\n                    _dstAddress,\\n                    _nonce,\\n                    _message\\n                )\\n            );\\n    }\\n\\n    function getExecutedMessage(bytes32 _messageId)\\n        external\\n        view\\n        returns (TxStatus)\\n    {\\n        return executedMessages[_messageId];\\n    }\\n\\n    /**\\n     * @notice Relayer executes messages through an authenticated method to the destination receiver\\n     based on the originating transaction on source chain\\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\\n     * @param _srcAddress Originating bytes32 address of the message sender on the srcChain\\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\\n     */\\n    function executeMessage(\\n        uint256 _srcChainId,\\n        bytes32 _srcAddress,\\n        address _dstAddress,\\n        uint256 _gasLimit,\\n        uint256 _nonce,\\n        bytes calldata _message,\\n        bytes32 _messageId\\n    ) external {\\n        // In order to guarentee that an individual message is only executed once, a messageId is generated.\\n        bytes32 messageId = computeMessageId(\\n            _srcChainId,\\n            _srcAddress,\\n            _dstAddress,\\n            _nonce,\\n            _message\\n        );\\n        require(messageId == _messageId, \\\"Incorrect messageId submitted\\\");\\n        // enforce that this message ID hasn't already been tried ever\\n        // console.log(uint256(executedMessages[messageId]));\\n        require(\\n            executedMessages[messageId] == TxStatus.Null,\\n            \\\"Message already executed\\\"\\n        );\\n        // Authenticate executeMessage, will revert if not authenticated\\n        IAuthVerifier(authVerifier).msgAuth(abi.encode(msg.sender));\\n        // Message is now in-flight, adjust status\\n        // executedMessages[messageId] = TxStatus.Pending;\\n\\n        TxStatus status;\\n        try\\n            ISynMessagingReceiver(_dstAddress).executeMessage{gas: _gasLimit}(\\n                _srcAddress,\\n                _srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        {\\n            // Assuming success state if no revert\\n            status = TxStatus.Success;\\n        } catch (bytes memory reason) {\\n            // call hard reverted & failed\\n            emit CallReverted(getRevertMsg(reason));\\n            status = TxStatus.Fail;\\n        }\\n\\n        executedMessages[messageId] = status;\\n        emit Executed(\\n            messageId,\\n            status,\\n            _dstAddress,\\n            uint64(_srcChainId),\\n            uint64(_nonce)\\n        );\\n    }\\n\\n    /** HELPER VIEW FUNCTION */\\n    // https://ethereum.stackexchange.com/a/83577\\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\\n    function getRevertMsg(bytes memory _returnData)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /** CONTRACT CONFIG */\\n\\n    function updateMessageStatus(bytes32 _messageId, TxStatus _status)\\n        public\\n        onlyOwner\\n    {\\n        executedMessages[_messageId] = _status;\\n    }\\n\\n    function updateAuthVerifier(address _authVerifier) public onlyOwner {\\n        require(_authVerifier != address(0), \\\"Cannot set to 0\\\");\\n        authVerifier = _authVerifier;\\n    }\\n}\\n\",\"keccak256\":\"0x929a5e0ad0c6901e89b4a0f774fde0ec843b5f86099919f6884fcc784d537a4d\",\"license\":\"MIT\"},\"contracts/messaging/MessageBusSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IGasFeePricing.sol\\\";\\n\\ncontract MessageBusSender is Ownable {\\n    address public gasFeePricing;\\n    uint64 public nonce;\\n    uint256 internal fees;\\n\\n    constructor(address _gasFeePricing) {\\n        gasFeePricing = _gasFeePricing;\\n    }\\n\\n    event MessageSent(\\n        address indexed sender,\\n        uint256 srcChainID,\\n        bytes32 receiver,\\n        uint256 indexed dstChainId,\\n        bytes message,\\n        uint64 indexed nonce,\\n        bytes options,\\n        uint256 fee\\n    );\\n\\n    function estimateFee(uint256 _dstChainId, bytes calldata _options)\\n        public\\n        returns (uint256)\\n    {\\n        uint256 fee = IGasFeePricing(gasFeePricing).estimateGasFee(\\n            _dstChainId,\\n            _options\\n        );\\n        require(fee != 0, \\\"Fee not set\\\");\\n        return fee;\\n    }\\n\\n    /**\\n     * @notice Sends a message to a receiving contract address on another chain.\\n     * Sender must make sure that the message is unique and not a duplicate message.\\n     * @param _receiver The bytes32 address of the destination contract to be called\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _message The arbitrary payload to pass to the destination chain receiver\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\\n     */\\n    function sendMessage(\\n        bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message,\\n        bytes calldata _options\\n    ) external payable {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 fee = estimateFee(_dstChainId, _options);\\n        require(msg.value >= fee, \\\"Insuffient gas fee\\\");\\n        emit MessageSent(\\n            msg.sender,\\n            block.chainid,\\n            _receiver,\\n            _dstChainId,\\n            _message,\\n            nonce,\\n            _options,\\n            msg.value\\n        );\\n        fees += msg.value;\\n        ++nonce;\\n    }\\n\\n    /**\\n     * @notice Withdraws accumulated fees in native gas token, based on fees variable.\\n     * @param to Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas\\n     */\\n    function withdrawGasFees(address payable to) external onlyOwner {\\n        uint256 withdrawAmount = fees;\\n        // Reset fees to 0\\n        to.transfer(withdrawAmount);\\n        delete fees;\\n    }\\n\\n    function updateGasFeePricing(address _gasFeePricing) public onlyOwner {\\n        require(_gasFeePricing != address(0), \\\"Cannot set to 0\\\");\\n        gasFeePricing = _gasFeePricing;\\n    }\\n}\\n\",\"keccak256\":\"0x14adbd93aabd317c821e4865feda861009408df85ce09a0b5681949019abc31d\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IAuthVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IAuthVerifier {\\n    /**\\n     * @notice Authentication library to allow the validator network to execute cross-chain messages.\\n     * @param _authData A bytes32 address encoded via abi.encode(address)\\n     * @return authenticated returns true if bytes data submitted and decoded to the address is correct\\n     */\\n    function msgAuth(bytes calldata _authData)\\n        external\\n        view\\n        returns (bool authenticated);\\n\\n    /**\\n     * @notice Permissioned method to support upgrades to the library\\n     * @param _nodegroup address which has authentication to execute messages\\n     */\\n    function setNodeGroup(address _nodegroup) external;\\n}\",\"keccak256\":\"0xf9847b671ca1a3b929d66eed7fb4b3eeda245e169fc9fca686729f1dea96497c\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IGasFeePricing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IGasFeePricing {\\n    \\n    /**\\n     * @notice Permissioned method to allow an off-chain party to set what each dstChain's\\n     * gas cost is priced in the srcChain's native gas currency. \\n     * Example: call on ETH, setCostPerChain(43114, 30000000000, 25180000000000000)\\n     * chain ID 43114\\n     * Average of 30 gwei cost to transaction on 43114\\n     * AVAX/ETH = 0.02518, scaled to gas in wei = 25180000000000000\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _gasUnitPrice The estimated current gas price in wei of the destination chain\\n     * @param _gasTokenPriceRatio Gas ratio of dstGasToken / srcGasToken\\n     */\\n    function setCostPerChain(uint256 _dstChainId, uint256 _gasUnitPrice, uint256 _gasTokenPriceRatio) external;\\n\\n    /**\\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\\n     */\\n    function estimateGasFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\\n}  \",\"keccak256\":\"0xdec270ed7ddbeaa560dc0b5e2df2255f6e1b8be95eaafe9fce072b194aff8aff\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/ISynMessagingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISynMessagingReceiver {\\n\\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\\n    // mapping(uint256 => bytes32) internal trustedRemoteLookup;\\n\\n\\n    /** \\n     * @notice MsgExecutionStatus state\\n     * @return Success execution succeeded, finalized\\n     * @return Fail // execution failed, finalized\\n     * @return Retry // execution failed or rejected, set to be retryable\\n    */ \\n    enum MsgExecutionStatus {\\n        Success, \\n        Fail\\n    }\\n\\n     /**\\n     * @notice Called by MessageBus \\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\\n     * @param _srcAddress The bytes32 address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external returns (MsgExecutionStatus);\\n}\\n    \",\"keccak256\":\"0x9081c7651818c6d57dbbe3053422ca5789b7cee0d9a6d79c7a912fc02b30fd58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620023233803806200232383398181016040528101906200003791906200021b565b8082620000596200004d620000e560201b60201c565b620000ed60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000262565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001e382620001b6565b9050919050565b620001f581620001d6565b81146200020157600080fd5b50565b6000815190506200021581620001ea565b92915050565b60008060408385031215620002355762000234620001b1565b5b6000620002458582860162000204565b9250506020620002588582860162000204565b9150509250929050565b6120b180620002726000396000f3fe6080604052600436106100e85760003560e01c8063a66dd3841161008a578063c408733511610059578063c4087335146102bf578063d6417b82146102ea578063d6b457b914610327578063f2fde38b14610350576100e8565b8063a66dd38414610224578063aa70fc0e1461024d578063ac8a4c1b14610278578063affed0e014610294576100e8565b80638da5cb5b116100c65780638da5cb5b1461017e5780639b11079c146101a9578063a1b058d8146101d2578063a5c0edf3146101fb576100e8565b806325b19fa3146100ed5780635da6d2c41461012a578063715018a614610167575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190611107565b610379565b60405161012191906111ab565b60405180910390f35b34801561013657600080fd5b50610151600480360381019061014c9190611261565b6103a3565b60405161015e91906112d0565b60405180910390f35b34801561017357600080fd5b5061017c610498565b005b34801561018a57600080fd5b50610193610520565b6040516101a0919061132c565b60405180910390f35b3480156101b557600080fd5b506101d060048036038101906101cb919061136c565b610549565b005b3480156101de57600080fd5b506101f960048036038101906101f491906113d8565b610604565b005b34801561020757600080fd5b50610222600480360381019061021d919061149a565b61093c565b005b34801561023057600080fd5b5061024b6004803603810190610246919061149a565b610a6b565b005b34801561025957600080fd5b50610262610b9a565b60405161026f919061132c565b60405180910390f35b610292600480360381019061028d91906114c7565b610bc0565b005b3480156102a057600080fd5b506102a9610d3a565b6040516102b69190611591565b60405180910390f35b3480156102cb57600080fd5b506102d4610d54565b6040516102e1919061132c565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c91906115ac565b610d7a565b60405161031e9190611655565b60405180910390f35b34801561033357600080fd5b5061034e600480360381019061034991906116ae565b610dbb565b005b34801561035c57600080fd5b506103776004803603810190610372919061149a565b610e8f565b005b60006004600083815260200190815260200160002060009054906101000a900460ff169050919050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347feadc18686866040518463ffffffff1660e01b815260040161040593929190611739565b6020604051808303816000875af1158015610424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104489190611780565b90506000810361048d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104849061180a565b60405180910390fd5b809150509392505050565b6104a0610f86565b73ffffffffffffffffffffffffffffffffffffffff166104be610520565b73ffffffffffffffffffffffffffffffffffffffff1614610514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050b90611876565b60405180910390fd5b61051e6000610f8e565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610551610f86565b73ffffffffffffffffffffffffffffffffffffffff1661056f610520565b73ffffffffffffffffffffffffffffffffffffffff16146105c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bc90611876565b60405180910390fd5b806004600084815260200190815260200160002060006101000a81548160ff021916908360028111156105fb576105fa611134565b5b02179055505050565b6000610614898989888888610d7a565b9050818114610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f906118e2565b60405180910390fd5b6000600281111561066c5761066b611134565b5b6004600083815260200190815260200160002060009054906101000a900460ff16600281111561069f5761069e611134565b5b146106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d69061194e565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b1b3a2d3360405160200161072e919061132c565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161075991906119e5565b602060405180830381865afa158015610776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079a9190611a3f565b5060008773ffffffffffffffffffffffffffffffffffffffff1663a6060871888b8d8989336040518763ffffffff1660e01b81526004016107df959493929190611a6c565b60206040518083038160008887f19350505050801561081c57506040513d601f19601f820116820180604052508101906108199190611adf565b60015b61089b573d806000811461084c576040519150601f19603f3d011682016040523d82523d6000602084013e610851565b606091505b507fffdd6142bbb721f3400e3908b04b86f60649b2e4d191e3f4c50c32c3e6471d2f61087c82611052565b6040516108899190611b50565b60405180910390a160029150506108a1565b50600190505b806004600084815260200190815260200160002060006101000a81548160ff021916908360028111156108d7576108d6611134565b5b02179055508773ffffffffffffffffffffffffffffffffffffffff167f04214a849019ea3548afcedee810b5bc1680cfb64e22fdf9051a823f3cdfea6583838d8a6040516109289493929190611b72565b60405180910390a250505050505050505050565b610944610f86565b73ffffffffffffffffffffffffffffffffffffffff16610962610520565b73ffffffffffffffffffffffffffffffffffffffff16146109b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109af90611876565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1e90611c03565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610a73610f86565b73ffffffffffffffffffffffffffffffffffffffff16610a91610520565b73ffffffffffffffffffffffffffffffffffffffff1614610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade90611876565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4d90611c03565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b468503610c02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf990611c6f565b60405180910390fd5b6000610c0f8684846103a3565b905080341015610c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4b90611cdb565b60405180910390fd5b600160149054906101000a900467ffffffffffffffff1667ffffffffffffffff16863373ffffffffffffffffffffffffffffffffffffffff167f4679cb14e22de98156c0e8896d3d05a0ae587315dfbb2abcbeec6ae4f0144549468b8a8a8a8a34604051610cc89796959493929190611cfb565b60405180910390a43460026000828254610ce29190611d8f565b925050819055506001601481819054906101000a900467ffffffffffffffff16610d0b90611de5565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050505050565b600160149054906101000a900467ffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600086864687878787604051602001610d999796959493929190611e15565b6040516020818303038152906040528051906020012090509695505050505050565b610dc3610f86565b73ffffffffffffffffffffffffffffffffffffffff16610de1610520565b73ffffffffffffffffffffffffffffffffffffffff1614610e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2e90611876565b60405180910390fd5b600060025490508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e84573d6000803e3d6000fd5b506002600090555050565b610e97610f86565b73ffffffffffffffffffffffffffffffffffffffff16610eb5610520565b73ffffffffffffffffffffffffffffffffffffffff1614610f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0290611876565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7190611ef1565b60405180910390fd5b610f8381610f8e565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060448251101561109b576040518060400160405280601d81526020017f5472616e73616374696f6e2072657665727465642073696c656e746c7900000081525090506110b8565b600482019150818060200190518101906110b59190612032565b90505b919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6110e4816110d1565b81146110ef57600080fd5b50565b600081359050611101816110db565b92915050565b60006020828403121561111d5761111c6110c7565b5b600061112b848285016110f2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061117457611173611134565b5b50565b600081905061118582611163565b919050565b600061119582611177565b9050919050565b6111a58161118a565b82525050565b60006020820190506111c0600083018461119c565b92915050565b6000819050919050565b6111d9816111c6565b81146111e457600080fd5b50565b6000813590506111f6816111d0565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611221576112206111fc565b5b8235905067ffffffffffffffff81111561123e5761123d611201565b5b60208301915083600182028301111561125a57611259611206565b5b9250929050565b60008060006040848603121561127a576112796110c7565b5b6000611288868287016111e7565b935050602084013567ffffffffffffffff8111156112a9576112a86110cc565b5b6112b58682870161120b565b92509250509250925092565b6112ca816111c6565b82525050565b60006020820190506112e560008301846112c1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611316826112eb565b9050919050565b6113268161130b565b82525050565b6000602082019050611341600083018461131d565b92915050565b6003811061135457600080fd5b50565b60008135905061136681611347565b92915050565b60008060408385031215611383576113826110c7565b5b6000611391858286016110f2565b92505060206113a285828601611357565b9150509250929050565b6113b58161130b565b81146113c057600080fd5b50565b6000813590506113d2816113ac565b92915050565b60008060008060008060008060e0898b0312156113f8576113f76110c7565b5b60006114068b828c016111e7565b98505060206114178b828c016110f2565b97505060406114288b828c016113c3565b96505060606114398b828c016111e7565b955050608061144a8b828c016111e7565b94505060a089013567ffffffffffffffff81111561146b5761146a6110cc565b5b6114778b828c0161120b565b935093505060c061148a8b828c016110f2565b9150509295985092959890939650565b6000602082840312156114b0576114af6110c7565b5b60006114be848285016113c3565b91505092915050565b600080600080600080608087890312156114e4576114e36110c7565b5b60006114f289828a016110f2565b965050602061150389828a016111e7565b955050604087013567ffffffffffffffff811115611524576115236110cc565b5b61153089828a0161120b565b9450945050606087013567ffffffffffffffff811115611553576115526110cc565b5b61155f89828a0161120b565b92509250509295509295509295565b600067ffffffffffffffff82169050919050565b61158b8161156e565b82525050565b60006020820190506115a66000830184611582565b92915050565b60008060008060008060a087890312156115c9576115c86110c7565b5b60006115d789828a016111e7565b96505060206115e889828a016110f2565b95505060406115f989828a016113c3565b945050606061160a89828a016111e7565b935050608087013567ffffffffffffffff81111561162b5761162a6110cc565b5b61163789828a0161120b565b92509250509295509295509295565b61164f816110d1565b82525050565b600060208201905061166a6000830184611646565b92915050565b600061167b826112eb565b9050919050565b61168b81611670565b811461169657600080fd5b50565b6000813590506116a881611682565b92915050565b6000602082840312156116c4576116c36110c7565b5b60006116d284828501611699565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061171883856116db565b93506117258385846116ec565b61172e836116fb565b840190509392505050565b600060408201905061174e60008301866112c1565b818103602083015261176181848661170c565b9050949350505050565b60008151905061177a816111d0565b92915050565b600060208284031215611796576117956110c7565b5b60006117a48482850161176b565b91505092915050565b600082825260208201905092915050565b7f466565206e6f7420736574000000000000000000000000000000000000000000600082015250565b60006117f4600b836117ad565b91506117ff826117be565b602082019050919050565b60006020820190508181036000830152611823816117e7565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006118606020836117ad565b915061186b8261182a565b602082019050919050565b6000602082019050818103600083015261188f81611853565b9050919050565b7f496e636f7272656374206d6573736167654964207375626d6974746564000000600082015250565b60006118cc601d836117ad565b91506118d782611896565b602082019050919050565b600060208201905081810360008301526118fb816118bf565b9050919050565b7f4d65737361676520616c72656164792065786563757465640000000000000000600082015250565b60006119386018836117ad565b915061194382611902565b602082019050919050565b600060208201905081810360008301526119678161192b565b9050919050565b600081519050919050565b60005b8381101561199757808201518184015260208101905061197c565b838111156119a6576000848401525b50505050565b60006119b78261196e565b6119c181856116db565b93506119d1818560208601611979565b6119da816116fb565b840191505092915050565b600060208201905081810360008301526119ff81846119ac565b905092915050565b60008115159050919050565b611a1c81611a07565b8114611a2757600080fd5b50565b600081519050611a3981611a13565b92915050565b600060208284031215611a5557611a546110c7565b5b6000611a6384828501611a2a565b91505092915050565b6000608082019050611a816000830188611646565b611a8e60208301876112c1565b8181036040830152611aa181858761170c565b9050611ab0606083018461131d565b9695505050505050565b60028110611ac757600080fd5b50565b600081519050611ad981611aba565b92915050565b600060208284031215611af557611af46110c7565b5b6000611b0384828501611aca565b91505092915050565b600081519050919050565b6000611b2282611b0c565b611b2c81856117ad565b9350611b3c818560208601611979565b611b45816116fb565b840191505092915050565b60006020820190508181036000830152611b6a8184611b17565b905092915050565b6000608082019050611b876000830187611646565b611b94602083018661119c565b611ba16040830185611582565b611bae6060830184611582565b95945050505050565b7f43616e6e6f742073657420746f20300000000000000000000000000000000000600082015250565b6000611bed600f836117ad565b9150611bf882611bb7565b602082019050919050565b60006020820190508181036000830152611c1c81611be0565b9050919050565b7f496e76616c696420636861696e49640000000000000000000000000000000000600082015250565b6000611c59600f836117ad565b9150611c6482611c23565b602082019050919050565b60006020820190508181036000830152611c8881611c4c565b9050919050565b7f496e7375666669656e7420676173206665650000000000000000000000000000600082015250565b6000611cc56012836117ad565b9150611cd082611c8f565b602082019050919050565b60006020820190508181036000830152611cf481611cb8565b9050919050565b600060a082019050611d10600083018a6112c1565b611d1d6020830189611646565b8181036040830152611d3081878961170c565b90508181036060830152611d4581858761170c565b9050611d5460808301846112c1565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d9a826111c6565b9150611da5836111c6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611dda57611dd9611d60565b5b828201905092915050565b6000611df08261156e565b915067ffffffffffffffff8203611e0a57611e09611d60565b5b600182019050919050565b600060c082019050611e2a600083018a6112c1565b611e376020830189611646565b611e4460408301886112c1565b611e51606083018761131d565b611e5e60808301866112c1565b81810360a0830152611e7181848661170c565b905098975050505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611edb6026836117ad565b9150611ee682611e7f565b604082019050919050565b60006020820190508181036000830152611f0a81611ece565b9050919050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f4e826116fb565b810181811067ffffffffffffffff82111715611f6d57611f6c611f16565b5b80604052505050565b6000611f806110bd565b9050611f8c8282611f45565b919050565b600067ffffffffffffffff821115611fac57611fab611f16565b5b611fb5826116fb565b9050602081019050919050565b6000611fd5611fd084611f91565b611f76565b905082815260208101848484011115611ff157611ff0611f11565b5b611ffc848285611979565b509392505050565b600082601f830112612019576120186111fc565b5b8151612029848260208601611fc2565b91505092915050565b600060208284031215612048576120476110c7565b5b600082015167ffffffffffffffff811115612066576120656110cc565b5b61207284828501612004565b9150509291505056fea26469706673582212203ac9a000af83a8bd2a7ea14f668338d82f04a570a96d306ab3687c801781248e64736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)": {
        "params": {
          "_dstAddress": "Destination address that the arbitrary message will be passed to",
          "_gasLimit": "Gas limit to be passed alongside the message, depending on the fee paid on srcChain",
          "_message": "Arbitrary message payload to pass to the destination chain receiver",
          "_srcAddress": "Originating bytes32 address of the message sender on the srcChain",
          "_srcChainId": "Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendMessage(bytes32,uint256,bytes,bytes)": {
        "params": {
          "_dstChainId": "The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains",
          "_message": "The arbitrary payload to pass to the destination chain receiver",
          "_options": "Versioned struct used to instruct relayer on how to proceed with gas limits",
          "_receiver": "The bytes32 address of the destination contract to be called"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawGasFees(address)": {
        "params": {
          "to": "Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)": {
        "notice": "Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain"
      },
      "sendMessage(bytes32,uint256,bytes,bytes)": {
        "notice": "Sends a message to a receiving contract address on another chain. Sender must make sure that the message is unique and not a duplicate message."
      },
      "updateMessageStatus(bytes32,uint8)": {
        "notice": "CONTRACT CONFIG "
      },
      "withdrawGasFees(address)": {
        "notice": "Withdraws accumulated fees in native gas token, based on fees variable."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 428,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "gasFeePricing",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 430,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "nonce",
        "offset": 20,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 432,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "fees",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 159,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "authVerifier",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 168,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "executedMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_enum(TxStatus)163)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TxStatus)163": {
        "encoding": "inplace",
        "label": "enum MessageBusReceiver.TxStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_enum(TxStatus)163)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum MessageBusReceiver.TxStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(TxStatus)163"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}