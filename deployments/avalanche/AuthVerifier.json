{
  "address": "0x55A0D01a419471DBC0d118966b703e21799B6824",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nodegroup",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_authData",
          "type": "bytes"
        }
      ],
      "name": "msgAuth",
      "outputs": [
        {
          "internalType": "bool",
          "name": "authenticated",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nodegroup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nodegroup",
          "type": "address"
        }
      ],
      "name": "setNodeGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x46eb498f8f7a0dedde730e7ca4d739eee304f23e8173f01be39793beee758232",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0x55A0D01a419471DBC0d118966b703e21799B6824",
    "transactionIndex": 0,
    "gasUsed": "596096",
    "logsBloom": "0x
    "blockHash": "0xfdce9ada12662c7ef0555c0dc0ea9900b1604f0c27a5560eb1e4f026d4704568",
    "transactionHash": "0x46eb498f8f7a0dedde730e7ca4d739eee304f23e8173f01be39793beee758232",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14224457,
        "transactionHash": "0x46eb498f8f7a0dedde730e7ca4d739eee304f23e8173f01be39793beee758232",
        "address": "0x55A0D01a419471DBC0d118966b703e21799B6824",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfdce9ada12662c7ef0555c0dc0ea9900b1604f0c27a5560eb1e4f026d4704568"
      }
    ],
    "blockNumber": 14224457,
    "cumulativeGasUsed": "596096",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9"
  ],
  "solcInputHash": "2c99480c4b27fa6f3dfbf2224f6bc524",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodegroup\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_authData\",\"type\":\"bytes\"}],\"name\":\"msgAuth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"authenticated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodegroup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodegroup\",\"type\":\"address\"}],\"name\":\"setNodeGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"msgAuth(bytes)\":{\"params\":{\"_authData\":\"A bytes32 address encoded via abi.encode(address)\"},\"returns\":{\"authenticated\":\"returns true if bytes data submitted and decoded to the address is correct. Reverts if check fails.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setNodeGroup(address)\":{\"params\":{\"_nodegroup\":\"address which has authentication to execute messages\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"msgAuth(bytes)\":{\"notice\":\"Authentication library to allow the validator network to execute cross-chain messages.\"},\"setNodeGroup(address)\":{\"notice\":\"Permissioned method to support upgrades to the library\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/AuthVerifier.sol\":\"AuthVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/messaging/AuthVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\n\\ncontract AuthVerifier is Ownable {\\n    address public nodegroup;\\n\\n    constructor(address _nodegroup) {\\n        nodegroup = _nodegroup;\\n    }\\n\\n    /**\\n     * @notice Authentication library to allow the validator network to execute cross-chain messages.\\n     * @param _authData A bytes32 address encoded via abi.encode(address)\\n     * @return authenticated returns true if bytes data submitted and decoded to the address is correct. Reverts if check fails.\\n     */\\n    function msgAuth(bytes calldata _authData)\\n        external\\n        view\\n        returns (bool authenticated)\\n    {\\n        address caller = abi.decode(_authData, (address));\\n        require(caller == nodegroup, \\\"Unauthenticated caller\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Permissioned method to support upgrades to the library\\n     * @param _nodegroup address which has authentication to execute messages\\n     */\\n    function setNodeGroup(address _nodegroup) public onlyOwner {\\n        nodegroup = _nodegroup;\\n    }\\n}\\n\",\"keccak256\":\"0x100debe6a873014458b69ab134c1f65857d673bde100c663d1e26bfe4e1c513c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ae1380380610ae1833981810160405281019061003291906101c4565b61004e61004361009560201b60201c565b61009d60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101f1565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061019182610166565b9050919050565b6101a181610186565b81146101ac57600080fd5b50565b6000815190506101be81610198565b92915050565b6000602082840312156101da576101d9610161565b5b60006101e8848285016101af565b91505092915050565b6108e1806102006000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632ed1a13414610067578063715018a6146100855780638b1b3a2d1461008f5780638da5cb5b146100bf578063f2fde38b146100dd578063f6ea2c90146100f9575b600080fd5b61006f610115565b60405161007c919061055f565b60405180910390f35b61008d61013b565b005b6100a960048036038101906100a491906105e9565b6101c3565b6040516100b69190610651565b60405180910390f35b6100c7610272565b6040516100d4919061055f565b60405180910390f35b6100f760048036038101906100f29190610698565b61029b565b005b610113600480360381019061010e9190610698565b610392565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610143610452565b73ffffffffffffffffffffffffffffffffffffffff16610161610272565b73ffffffffffffffffffffffffffffffffffffffff16146101b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ae90610722565b60405180910390fd5b6101c1600061045a565b565b60008083838101906101d59190610780565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e906107f9565b60405180910390fd5b600191505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102a3610452565b73ffffffffffffffffffffffffffffffffffffffff166102c1610272565b73ffffffffffffffffffffffffffffffffffffffff1614610317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030e90610722565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037d9061088b565b60405180910390fd5b61038f8161045a565b50565b61039a610452565b73ffffffffffffffffffffffffffffffffffffffff166103b8610272565b73ffffffffffffffffffffffffffffffffffffffff161461040e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040590610722565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105498261051e565b9050919050565b6105598161053e565b82525050565b60006020820190506105746000830184610550565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126105a9576105a8610584565b5b8235905067ffffffffffffffff8111156105c6576105c5610589565b5b6020830191508360018202830111156105e2576105e161058e565b5b9250929050565b60008060208385031215610600576105ff61057a565b5b600083013567ffffffffffffffff81111561061e5761061d61057f565b5b61062a85828601610593565b92509250509250929050565b60008115159050919050565b61064b81610636565b82525050565b60006020820190506106666000830184610642565b92915050565b6106758161053e565b811461068057600080fd5b50565b6000813590506106928161066c565b92915050565b6000602082840312156106ae576106ad61057a565b5b60006106bc84828501610683565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061070c6020836106c5565b9150610717826106d6565b602082019050919050565b6000602082019050818103600083015261073b816106ff565b9050919050565b600061074d8261051e565b9050919050565b61075d81610742565b811461076857600080fd5b50565b60008135905061077a81610754565b92915050565b6000602082840312156107965761079561057a565b5b60006107a48482850161076b565b91505092915050565b7f556e61757468656e746963617465642063616c6c657200000000000000000000600082015250565b60006107e36016836106c5565b91506107ee826107ad565b602082019050919050565b60006020820190508181036000830152610812816107d6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006108756026836106c5565b915061088082610819565b604082019050919050565b600060208201905081810360008301526108a481610868565b905091905056fea2646970667358221220d8f7b2d191f1454e4dbf1047bef791a674641a37fe182376e05c8dbe85997a6164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80632ed1a13414610067578063715018a6146100855780638b1b3a2d1461008f5780638da5cb5b146100bf578063f2fde38b146100dd578063f6ea2c90146100f9575b600080fd5b61006f610115565b60405161007c919061055f565b60405180910390f35b61008d61013b565b005b6100a960048036038101906100a491906105e9565b6101c3565b6040516100b69190610651565b60405180910390f35b6100c7610272565b6040516100d4919061055f565b60405180910390f35b6100f760048036038101906100f29190610698565b61029b565b005b610113600480360381019061010e9190610698565b610392565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610143610452565b73ffffffffffffffffffffffffffffffffffffffff16610161610272565b73ffffffffffffffffffffffffffffffffffffffff16146101b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ae90610722565b60405180910390fd5b6101c1600061045a565b565b60008083838101906101d59190610780565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e906107f9565b60405180910390fd5b600191505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102a3610452565b73ffffffffffffffffffffffffffffffffffffffff166102c1610272565b73ffffffffffffffffffffffffffffffffffffffff1614610317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030e90610722565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037d9061088b565b60405180910390fd5b61038f8161045a565b50565b61039a610452565b73ffffffffffffffffffffffffffffffffffffffff166103b8610272565b73ffffffffffffffffffffffffffffffffffffffff161461040e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040590610722565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105498261051e565b9050919050565b6105598161053e565b82525050565b60006020820190506105746000830184610550565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126105a9576105a8610584565b5b8235905067ffffffffffffffff8111156105c6576105c5610589565b5b6020830191508360018202830111156105e2576105e161058e565b5b9250929050565b60008060208385031215610600576105ff61057a565b5b600083013567ffffffffffffffff81111561061e5761061d61057f565b5b61062a85828601610593565b92509250509250929050565b60008115159050919050565b61064b81610636565b82525050565b60006020820190506106666000830184610642565b92915050565b6106758161053e565b811461068057600080fd5b50565b6000813590506106928161066c565b92915050565b6000602082840312156106ae576106ad61057a565b5b60006106bc84828501610683565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061070c6020836106c5565b9150610717826106d6565b602082019050919050565b6000602082019050818103600083015261073b816106ff565b9050919050565b600061074d8261051e565b9050919050565b61075d81610742565b811461076857600080fd5b50565b60008135905061077a81610754565b92915050565b6000602082840312156107965761079561057a565b5b60006107a48482850161076b565b91505092915050565b7f556e61757468656e746963617465642063616c6c657200000000000000000000600082015250565b60006107e36016836106c5565b91506107ee826107ad565b602082019050919050565b60006020820190508181036000830152610812816107d6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006108756026836106c5565b915061088082610819565b604082019050919050565b600060208201905081810360008301526108a481610868565b905091905056fea2646970667358221220d8f7b2d191f1454e4dbf1047bef791a674641a37fe182376e05c8dbe85997a6164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "msgAuth(bytes)": {
        "params": {
          "_authData": "A bytes32 address encoded via abi.encode(address)"
        },
        "returns": {
          "authenticated": "returns true if bytes data submitted and decoded to the address is correct. Reverts if check fails."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setNodeGroup(address)": {
        "params": {
          "_nodegroup": "address which has authentication to execute messages"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "msgAuth(bytes)": {
        "notice": "Authentication library to allow the validator network to execute cross-chain messages."
      },
      "setNodeGroup(address)": {
        "notice": "Permissioned method to support upgrades to the library"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 962,
        "contract": "contracts/messaging/AuthVerifier.sol:AuthVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4908,
        "contract": "contracts/messaging/AuthVerifier.sol:AuthVerifier",
        "label": "nodegroup",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}