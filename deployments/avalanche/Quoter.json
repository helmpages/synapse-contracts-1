{
  "address": "0x8Fc98Fba2f7913eF8688BE562D9573A190ccB210",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_maxSwaps",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTrustedAdapter",
          "type": "address"
        }
      ],
      "name": "AddedTrustedAdapter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTrustedToken",
          "type": "address"
        }
      ],
      "name": "AddedTrustedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "removedAdapter",
          "type": "address"
        }
      ],
      "name": "RemovedAdapter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "removedAdapters",
          "type": "address[]"
        }
      ],
      "name": "RemovedAdapters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "removedToken",
          "type": "address"
        }
      ],
      "name": "RemovedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "newTrustedAdapters",
          "type": "address[]"
        }
      ],
      "name": "UpdatedTrustedAdapters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "newTrustedTokens",
          "type": "address[]"
        }
      ],
      "name": "UpdatedTrustedTokens",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SWAPS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "addTrustedAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addTrustedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "maxSwaps",
          "type": "uint8"
        }
      ],
      "name": "findBestPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            }
          ],
          "internalType": "struct Offers.FormattedOffer",
          "name": "_bestOffer",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getTrustedAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getTrustedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "removeAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "removeAdapterByIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "removeTokenByIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "setAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_maxSwaps",
          "type": "uint8"
        }
      ],
      "name": "setMaxSwaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedAdaptersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5a224667b3056d1f436a0bae6325918e2f65ef58b1157fb2860a87bfb8ee278",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0x8Fc98Fba2f7913eF8688BE562D9573A190ccB210",
    "transactionIndex": 16,
    "gasUsed": "2155387",
    "logsBloom": "0x
    "blockHash": "0x5a7b168bc0562f6ae26be40882e2e23fa9abf5def3e1b7bfd983fa5acf34d410",
    "transactionHash": "0xf5a224667b3056d1f436a0bae6325918e2f65ef58b1157fb2860a87bfb8ee278",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 13375205,
        "transactionHash": "0xf5a224667b3056d1f436a0bae6325918e2f65ef58b1157fb2860a87bfb8ee278",
        "address": "0x8Fc98Fba2f7913eF8688BE562D9573A190ccB210",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0x5a7b168bc0562f6ae26be40882e2e23fa9abf5def3e1b7bfd983fa5acf34d410"
      }
    ],
    "blockNumber": 13375205,
    "cumulativeGasUsed": "5134503",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb7d731cF0882eC44820a02E18f2d73a04C160d00",
    4
  ],
  "solcInputHash": "981f38149fd49d3cec0cb27aa531a82e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_maxSwaps\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTrustedAdapter\",\"type\":\"address\"}],\"name\":\"AddedTrustedAdapter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTrustedToken\",\"type\":\"address\"}],\"name\":\"AddedTrustedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedAdapter\",\"type\":\"address\"}],\"name\":\"RemovedAdapter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"removedAdapters\",\"type\":\"address[]\"}],\"name\":\"RemovedAdapters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedToken\",\"type\":\"address\"}],\"name\":\"RemovedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newTrustedAdapters\",\"type\":\"address[]\"}],\"name\":\"UpdatedTrustedAdapters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newTrustedTokens\",\"type\":\"address[]\"}],\"name\":\"UpdatedTrustedTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SWAPS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"addTrustedAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addTrustedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"maxSwaps\",\"type\":\"uint8\"}],\"name\":\"findBestPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct Offers.FormattedOffer\",\"name\":\"_bestOffer\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getTrustedAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getTrustedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"removeAdapterByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"removeTokenByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"setAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxSwaps\",\"type\":\"uint8\"}],\"name\":\"setMaxSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedAdaptersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"findBestPath(address,uint256,address,uint8)\":{\"params\":{\"amountIn\":\"amount of initial tokens to swap\",\"maxSwaps\":\"maximum amount of swaps in the route between initial and final tokens\",\"tokenIn\":\"initial token to sell\",\"tokenOut\":\"final token to buy\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAdapters(address[])\":{\"details\":\"This doesn't check if any of the adapters are duplicated, so make sure to check the data for duplicates\"},\"setTokens(address[])\":{\"details\":\"This doesn't check if any of the tokens are duplicated, so make sure to check the data for duplicates\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAX_SWAPS()\":{\"notice\":\"Maximum amount of swaps that Quoter will be using for finding the best path between two tokens. This is done for two reasons: 1. Too many swaps in the path make very little sense 2. Every extra swap increases the amount of possible paths exponentially,    so we need some sensible limitation.\"},\"constructor\":{\"notice\":\"PS. If the migration from one Quoter to another is needed (w/0 changing Router): 1. call oldQuoter.setAdapters([]), this will clear the adapters in Router 2. revoke ADAPTERS_STORAGE_ROLE from oldQuoter 3. Do (2-4) from setup flow as usual\"},\"findBestPath(address,uint256,address,uint8)\":{\"notice\":\"Find the best path between two tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/router/Quoter.sol\":\"Quoter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.4.2/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-solc8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20 as _IERC20} from \\\"@openzeppelin/contracts-solc8/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 is _IERC20 {\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function mint(address to, uint256 amount) external; // only tokens that support minting\\n}\\n\",\"keccak256\":\"0x94eaff4005f7a976379e01f0d95693e02299589620b0fb61d708f9b400399995\",\"license\":\"MIT\"},\"@synapseprotocol/sol-lib/contracts/universal/lib/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nlibrary Bytes {\\n    function toBytes(address x)\\n        internal\\n        pure\\n        returns (bytes memory b)\\n    {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n    }\\n\\n    function toAddress(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (address _output)\\n    {\\n        assembly { _output := mload(add(_input, _offst)) }\\n    }\\n\\n    function toBytes(uint256 x)\\n        internal\\n        pure\\n        returns (bytes memory b)\\n    {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n    }\\n\\n    function toUint256(uint _offst, bytes memory _input)\\n        internal\\n        pure\\n        returns (uint256 _output)\\n    {\\n        assembly { _output := mload(add(_input, _offst)) }\\n    }\\n\\n    function mergeBytes(bytes memory a, bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory c)\\n    {\\n        // From https://ethereum.stackexchange.com/a/40456\\n        uint alen = a.length;\\n        uint totallen = alen + b.length;\\n        uint loopsa = (a.length + 31) / 32;\\n        uint loopsb = (b.length + 31) / 32;\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(m, totallen)\\n            for {  let i := 0 } lt(i, loopsa) { i := add(1, i) } { mstore(add(m, mul(32, add(1, i))), mload(add(a, mul(32, add(1, i))))) }\\n            for {  let i := 0 } lt(i, loopsb) { i := add(1, i) } { mstore(add(m, add(mul(32, add(1, i)), alen)), mload(add(b, mul(32, add(1, i))))) }\\n            mstore(0x40, add(m, add(32, totallen)))\\n            c := m\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a53efd4101055817dc2ffbc049a9ace6d67cf99c09e02eee767b397ecd5ba5f\",\"license\":\"MIT\"},\"contracts/router/BasicQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBasicQuoter} from \\\"./interfaces/IBasicQuoter.sol\\\";\\nimport {IBasicRouter} from \\\"./interfaces/IBasicRouter.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts-4.4.2/access/Ownable.sol\\\";\\nimport {Bytes} from \\\"@synapseprotocol/sol-lib/contracts/universal/lib/LibBytes.sol\\\";\\n\\ncontract BasicQuoter is Ownable, IBasicQuoter {\\n    /// @notice A list of tokens that will be used as \\\"intermediate\\\" tokens, when\\n    /// finding the best path between initial and final token\\n    address[] internal trustedTokens;\\n\\n    /// @notice A list of adapters that are abstracting away swaps via third party contracts\\n    address[] internal trustedAdapters;\\n\\n    /// @notice Maximum amount of swaps that Quoter will be using\\n    /// for finding the best path between two tokens.\\n    /// This is done for two reasons:\\n    /// 1. Too many swaps in the path make very little sense\\n    /// 2. Every extra swap increases the amount of possible paths exponentially,\\n    ///    so we need some sensible limitation.\\n    // solhint-disable-next-line\\n    uint8 public MAX_SWAPS;\\n\\n    address payable public immutable router;\\n\\n    constructor(address payable _router, uint8 _maxSwaps) {\\n        setMaxSwaps(_maxSwaps);\\n        router = _router;\\n    }\\n\\n    // -- MODIFIERS --\\n\\n    modifier checkTokenIndex(uint8 index) {\\n        require(index < trustedTokens.length, \\\"Token index out of range\\\");\\n        _;\\n    }\\n\\n    modifier checkAdapterIndex(uint8 index) {\\n        require(index < trustedAdapters.length, \\\"Adapter index out of range\\\");\\n        _;\\n    }\\n\\n    //  -- VIEWS --\\n\\n    function getTrustedAdapter(uint8 index)\\n        external\\n        view\\n        checkAdapterIndex(index)\\n        returns (address)\\n    {\\n        return trustedAdapters[index];\\n    }\\n\\n    function getTrustedToken(uint8 index)\\n        external\\n        view\\n        checkTokenIndex(index)\\n        returns (address)\\n    {\\n        return trustedTokens[index];\\n    }\\n\\n    function trustedAdaptersCount() external view returns (uint256) {\\n        return trustedAdapters.length;\\n    }\\n\\n    function trustedTokensCount() external view returns (uint256) {\\n        return trustedTokens.length;\\n    }\\n\\n    // -- RESTRICTED ADAPTER FUNCTIONS --\\n\\n    function addTrustedAdapter(address adapter) external onlyOwner {\\n        for (uint8 i = 0; i < trustedAdapters.length; i++) {\\n            require(trustedAdapters[i] != adapter, \\\"Adapter already added\\\");\\n        }\\n        trustedAdapters.push(adapter);\\n        // Add Adapter to Router as well\\n        IBasicRouter(router).addTrustedAdapter(adapter);\\n        emit AddedTrustedAdapter(adapter);\\n    }\\n\\n    function removeAdapter(address adapter) external onlyOwner {\\n        for (uint8 i = 0; i < trustedAdapters.length; i++) {\\n            if (trustedAdapters[i] == adapter) {\\n                _removeAdapterByIndex(i);\\n                return;\\n            }\\n        }\\n        revert(\\\"Adapter not found\\\");\\n    }\\n\\n    function removeAdapterByIndex(uint8 index) external onlyOwner {\\n        _removeAdapterByIndex(index);\\n    }\\n\\n    // -- RESTRICTED TOKEN FUNCTIONS --\\n\\n    function addTrustedToken(address token) external onlyOwner {\\n        for (uint8 i = 0; i < trustedTokens.length; i++) {\\n            require(trustedTokens[i] != token, \\\"Token already added\\\");\\n        }\\n        trustedTokens.push(token);\\n        emit AddedTrustedToken(token);\\n    }\\n\\n    function removeToken(address token) external onlyOwner {\\n        for (uint8 i = 0; i < trustedTokens.length; i++) {\\n            if (trustedTokens[i] == token) {\\n                _removeTokenByIndex(i);\\n                return;\\n            }\\n        }\\n        revert(\\\"Token not found\\\");\\n    }\\n\\n    function removeTokenByIndex(uint8 index) external onlyOwner {\\n        _removeTokenByIndex(index);\\n    }\\n\\n    // -- RESTRICTED SETTERS\\n\\n    /// @dev This doesn't check if any of the adapters are duplicated,\\n    /// so make sure to check the data for duplicates\\n    function setAdapters(address[] calldata adapters) external onlyOwner {\\n        // First, remove old Adapters, if there are any\\n        if (trustedAdapters.length > 0) {\\n            IBasicRouter(router).setAdapters(trustedAdapters, false);\\n        }\\n        trustedAdapters = adapters;\\n        IBasicRouter(router).setAdapters(adapters, true);\\n        emit UpdatedTrustedAdapters(adapters);\\n    }\\n\\n    function setMaxSwaps(uint8 _maxSwaps) public onlyOwner {\\n        MAX_SWAPS = _maxSwaps;\\n    }\\n\\n    /// @dev This doesn't check if any of the tokens are duplicated,\\n    /// so make sure to check the data for duplicates\\n    function setTokens(address[] calldata tokens) public onlyOwner {\\n        trustedTokens = tokens;\\n        emit UpdatedTrustedTokens(tokens);\\n    }\\n\\n    // -- PRIVATE FUNCTIONS --\\n\\n    function _removeAdapterByIndex(uint8 index)\\n        private\\n        checkAdapterIndex(index)\\n    {\\n        address removedAdapter = trustedAdapters[index];\\n\\n        // We don't care about adapters order, so we replace the\\n        // selected adapter with the last one\\n        trustedAdapters[index] = trustedAdapters[trustedAdapters.length - 1];\\n        trustedAdapters.pop();\\n\\n        // Remove Adapter from Router as well\\n        IBasicRouter(router).removeAdapter(removedAdapter);\\n\\n        emit RemovedAdapter(removedAdapter);\\n    }\\n\\n    function _removeTokenByIndex(uint8 index) private checkTokenIndex(index) {\\n        address removedToken = trustedTokens[index];\\n\\n        // We don't care about tokens order, so we replace the\\n        // selected token with the last one\\n        trustedTokens[index] = trustedTokens[trustedTokens.length - 1];\\n        trustedTokens.pop();\\n\\n        emit RemovedToken(removedToken);\\n    }\\n}\\n\",\"keccak256\":\"0xde8f7da6262011a4756aca04e5e767188763bb96ee56be80e87f6d5d2db4cf79\",\"license\":\"MIT\"},\"contracts/router/Quoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {BasicQuoter} from \\\"./BasicQuoter.sol\\\";\\n\\nimport {IAdapter} from \\\"./interfaces/IAdapter.sol\\\";\\nimport {IQuoter} from \\\"./interfaces/IQuoter.sol\\\";\\nimport {IBasicRouter} from \\\"./interfaces/IBasicRouter.sol\\\";\\n\\nimport {Offers} from \\\"./libraries/LibOffers.sol\\\";\\n\\nimport {Bytes} from \\\"@synapseprotocol/sol-lib/contracts/universal/lib/LibBytes.sol\\\";\\n\\ncontract Quoter is BasicQuoter, IQuoter {\\n    /// @dev Setup flow:\\n    /// 1. Create Router contract\\n    /// 2. Create Quoter contract\\n    /// 3. Give Quoter ADAPTERS_STORAGE_ROLE in Router contract\\n    /// 4. Add tokens and adapters\\n\\n    /// PS. If the migration from one Quoter to another is needed (w/0 changing Router):\\n    /// 1. call oldQuoter.setAdapters([]), this will clear the adapters in Router\\n    /// 2. revoke ADAPTERS_STORAGE_ROLE from oldQuoter\\n    /// 3. Do (2-4) from setup flow as usual\\n    constructor(address payable _router, uint8 _maxSwaps)\\n        BasicQuoter(_router, _maxSwaps)\\n    {\\n        this;\\n    }\\n\\n    // -- FIND BEST PATH --\\n\\n    /**\\n        @notice Find the best path between two tokens\\n\\n        @param amountIn amount of initial tokens to swap\\n        @param tokenIn initial token to sell\\n        @param tokenOut final token to buy\\n        @param maxSwaps maximum amount of swaps in the route between initial and final tokens\\n    */\\n    function findBestPath(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint8 maxSwaps\\n    ) public view returns (Offers.FormattedOffer memory _bestOffer) {\\n        require(\\n            maxSwaps > 0 && maxSwaps <= MAX_SWAPS,\\n            \\\"Quoter: Invalid max-swaps\\\"\\n        );\\n        Offers.Offer memory queries;\\n        queries.amounts = Bytes.toBytes(amountIn);\\n        queries.path = Bytes.toBytes(tokenIn);\\n\\n        queries = _findBestPath(amountIn, tokenIn, tokenOut, maxSwaps, queries);\\n\\n        // If no paths are found, return empty struct\\n        if (queries.adapters.length == 0) {\\n            queries.amounts = \\\"\\\";\\n            queries.path = \\\"\\\";\\n        }\\n        return Offers.formatOfferWithGas(queries);\\n    }\\n\\n    // -- INTERNAL HELPERS\\n\\n    /**\\n        @notice Find the best path between two tokens\\n        @dev Part of the route is fixed, which is reflected in queries\\n             The return value is unformatted byte arrays, use Offers.formatOfferWithGas() to format\\n\\n        @param amountIn amount of current tokens to swap\\n        @param tokenIn current token to sell\\n        @param tokenOut final token to buy\\n        @param maxSwaps maximum amount of swaps in the route between initial and final tokens\\n        @param queries Fixed prefix of the route between initial and final tokens\\n        @return bestOption bytes amounts, bytes adapters, bytes path\\n     */\\n    function _findBestPath(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 maxSwaps,\\n        Offers.Offer memory queries\\n    ) internal view returns (Offers.Offer memory) {\\n        Offers.Offer memory bestOption = Offers.cloneOfferWithGas(queries);\\n        /// @dev bestAmountOut is net returns of the swap,\\n        /// this is the parameter that should be maximized\\n\\n        // bestAmountOut: amount of tokenOut in the local best found route\\n\\n        // First check if there is a path directly from tokenIn to tokenOut\\n        uint256 bestAmountOut = _checkDirectSwap(\\n            amountIn,\\n            tokenIn,\\n            tokenOut,\\n            bestOption\\n        );\\n\\n        // Check for swaps through intermediate tokens, only if there are enough swaps left\\n        // Need at least two extra swaps\\n        if (maxSwaps > 1 && queries.adapters.length / 32 <= maxSwaps - 2) {\\n            // Check for paths that pass through trusted tokens\\n            for (uint256 i = 0; i < trustedTokens.length; i++) {\\n                address trustedToken = trustedTokens[i];\\n                // trustedToken == tokenIn  means swap isn't possible\\n                // trustedToken == tokenOut was checked above in _checkDirectSwap\\n                if (trustedToken == tokenIn || trustedToken == tokenOut) {\\n                    continue;\\n                }\\n                // Loop through all adapters to find the best one\\n                // for swapping tokenIn for one of the trusted tokens\\n\\n                Query memory bestSwap = queryDirectSwap(\\n                    amountIn,\\n                    tokenIn,\\n                    trustedToken\\n                );\\n                if (bestSwap.amountOut == 0) {\\n                    continue;\\n                }\\n                Offers.Offer memory newOffer = Offers.cloneOfferWithGas(\\n                    queries\\n                );\\n                // add bestSwap to the current route\\n                Offers.addQuery(\\n                    newOffer,\\n                    bestSwap.amountOut,\\n                    bestSwap.adapter,\\n                    bestSwap.tokenOut\\n                );\\n                // Find best path, starting with current route + bestSwap\\n                // new current token is trustedToken\\n                // its amount is bestSwap.amountOut\\n                newOffer = _findBestPath(\\n                    bestSwap.amountOut,\\n                    trustedToken,\\n                    tokenOut,\\n                    maxSwaps,\\n                    newOffer\\n                );\\n                address lastToken = Bytes.toAddress(\\n                    newOffer.path.length,\\n                    newOffer.path\\n                );\\n                // Check that the last token in the path is tokenOut and update the new best option\\n                // only if amountOut is increased\\n                if (lastToken == tokenOut) {\\n                    uint256 newAmountOut = Bytes.toUint256(\\n                        newOffer.amounts.length,\\n                        newOffer.amounts\\n                    );\\n\\n                    // bestAmountOut == 0 means we don't have the \\\"best\\\" option yet\\n                    if (bestAmountOut < newAmountOut || bestAmountOut == 0) {\\n                        bestAmountOut = newAmountOut;\\n                        bestOption = newOffer;\\n                    }\\n                }\\n            }\\n        }\\n        return bestOption;\\n    }\\n\\n    /**\\n        @notice Get the best swap quote using any of the adapters\\n        @param amountIn amount of tokens to swap\\n        @param tokenIn token to sell\\n        @param tokenOut token to buy\\n        @return bestQuery Query with best quote available\\n     */\\n    function queryDirectSwap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view returns (Query memory bestQuery) {\\n        for (uint8 i = 0; i < trustedAdapters.length; ++i) {\\n            address adapter = trustedAdapters[i];\\n            uint256 amountOut = IAdapter(adapter).query(\\n                amountIn,\\n                tokenIn,\\n                tokenOut\\n            );\\n            if (amountOut == 0) {\\n                continue;\\n            }\\n\\n            // bestQuery.amountOut == 0 means there's no \\\"best\\\" yet\\n            if (amountOut > bestQuery.amountOut || bestQuery.amountOut == 0) {\\n                bestQuery = Query(adapter, tokenIn, tokenOut, amountOut);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice Find the best direct swap between tokens and append it to current Offer\\n        @dev Nothing will be appended, if no direct route between tokens is found\\n        @param amountIn amount of initial token to swap\\n        @param tokenIn current token to sell\\n        @param tokenOut final token to buy\\n        @param bestOption current Offer to append the found swap\\n     */\\n    function _checkDirectSwap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        Offers.Offer memory bestOption\\n    ) internal view returns (uint256 amountOut) {\\n        Query memory queryDirect = queryDirectSwap(amountIn, tokenIn, tokenOut);\\n        if (queryDirect.amountOut != 0) {\\n            Offers.addQuery(\\n                bestOption,\\n                queryDirect.amountOut,\\n                queryDirect.adapter,\\n                queryDirect.tokenOut\\n            );\\n            amountOut = queryDirect.amountOut;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ea526da6997d15a3cb32a68db7031777b1df4d5133347e5dbada6261bb211a3\",\"license\":\"MIT\"},\"contracts/router/interfaces/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6;\\n\\ninterface IAdapter {\\n    event UpdatedGasEstimate(address indexed adapter, uint256 newEstimate);\\n\\n    event Recovered(address indexed asset, uint256 amount);\\n\\n    function name() external view returns (string memory);\\n\\n    function swapGasEstimate() external view returns (uint256);\\n\\n    function depositAddress(address tokenIn, address tokenOut)\\n        external\\n        view\\n        returns (address);\\n\\n    function swap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) external returns (uint256);\\n\\n    function query(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x11623bb390ba5754681690892878a47c09eea91b3d60b8eaa3ee12105bfab5b3\",\"license\":\"MIT\"},\"contracts/router/interfaces/IBasicQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBasicQuoter {\\n    event UpdatedTrustedAdapters(address[] newTrustedAdapters);\\n\\n    event AddedTrustedAdapter(address newTrustedAdapter);\\n\\n    event RemovedAdapter(address removedAdapter);\\n\\n    event RemovedAdapters(address[] removedAdapters);\\n\\n    event UpdatedTrustedTokens(address[] newTrustedTokens);\\n\\n    event AddedTrustedToken(address newTrustedToken);\\n\\n    event RemovedToken(address removedToken);\\n\\n    struct Query {\\n        address adapter;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountOut;\\n    }\\n\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address[] adapters;\\n    }\\n\\n    //  -- VIEWS --\\n\\n    function getTrustedAdapter(uint8 index) external view returns (address);\\n\\n    function getTrustedToken(uint8 index) external view returns (address);\\n\\n    function trustedAdaptersCount() external view returns (uint256);\\n\\n    function trustedTokensCount() external view returns (uint256);\\n\\n    // -- ADAPTER FUNCTIONS --\\n\\n    function addTrustedAdapter(address adapter) external;\\n\\n    function removeAdapter(address adapter) external;\\n\\n    function removeAdapterByIndex(uint8 index) external;\\n\\n    // -- TOKEN FUNCTIONS --\\n\\n    function addTrustedToken(address token) external;\\n\\n    function removeToken(address token) external;\\n\\n    function removeTokenByIndex(uint8 index) external;\\n\\n    // -- SETTERS --\\n\\n    function setAdapters(address[] calldata adapters) external;\\n\\n    function setMaxSwaps(uint8 maxSwaps) external;\\n\\n    function setTokens(address[] memory tokens) external;\\n}\\n\",\"keccak256\":\"0x6bee0df739c89bef9b6fa6abd285dac22281c785c80dc6f54fd32cd7aa99db8d\",\"license\":\"MIT\"},\"contracts/router/interfaces/IBasicRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\\\";\\n\\ninterface IBasicRouter {\\n    event Recovered(address indexed asset, uint256 amount);\\n\\n    event AddedTrustedAdapter(address newTrustedAdapter);\\n\\n    event RemovedAdapter(address removedAdapter);\\n\\n    event UpdatedAdapters(address[] adapters, bool isTrusted);\\n\\n    // -- VIEWS --\\n\\n    function isTrustedAdapter(address adapter) external view returns (bool);\\n\\n    // solhint-disable-next-line\\n    function WGAS() external view returns (address payable);\\n\\n    // -- ADAPTER FUNCTIONS --\\n\\n    function addTrustedAdapter(address adapter) external;\\n\\n    function removeAdapter(address adapter) external;\\n\\n    function setAdapters(address[] memory adapters, bool status) external;\\n\\n    // -- RECOVER FUNCTIONS --\\n\\n    function recoverERC20(IERC20 token) external;\\n\\n    function recoverGAS() external;\\n\\n    // -- RECEIVE GAS FUNCTION --\\n\\n    receive() external payable;\\n}\\n\",\"keccak256\":\"0x0b7c5bfc180a2e07b4052062422689d0876ec2af32ebaa72cdb1207f0eae0156\",\"license\":\"MIT\"},\"contracts/router/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBasicQuoter} from \\\"./IBasicQuoter.sol\\\";\\nimport {Offers} from \\\"../libraries/LibOffers.sol\\\";\\n\\ninterface IQuoter is IBasicQuoter {\\n    function findBestPath(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint8 maxSwaps\\n    ) external view returns (Offers.FormattedOffer memory);\\n}\\n\",\"keccak256\":\"0x100a3f178e74a49f9501752e98984ca989a9f3d4f7bf44aca2b90841b60184c8\",\"license\":\"MIT\"},\"contracts/router/libraries/LibOffers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Bytes} from \\\"@synapseprotocol/sol-lib/contracts/universal/lib/LibBytes.sol\\\";\\n\\nlibrary Offers {\\n    struct Offer {\\n        bytes amounts;\\n        bytes adapters;\\n        bytes path;\\n    }\\n\\n    struct FormattedOffer {\\n        uint256[] amounts;\\n        address[] adapters;\\n        address[] path;\\n    }\\n\\n    /**\\n     * Appends Query elements to Offer struct\\n     */\\n    function addQuery(\\n        Offer memory _queries,\\n        uint256 _amount,\\n        address _adapter,\\n        address _tokenOut\\n    ) internal pure {\\n        _queries.path = Bytes.mergeBytes(\\n            _queries.path,\\n            Bytes.toBytes(_tokenOut)\\n        );\\n        _queries.amounts = Bytes.mergeBytes(\\n            _queries.amounts,\\n            Bytes.toBytes(_amount)\\n        );\\n        _queries.adapters = Bytes.mergeBytes(\\n            _queries.adapters,\\n            Bytes.toBytes(_adapter)\\n        );\\n    }\\n\\n    /**\\n     * Makes a deep copy of Offer struct\\n     */\\n    function cloneOfferWithGas(Offer memory _queries)\\n        internal\\n        pure\\n        returns (Offer memory)\\n    {\\n        return Offer(_queries.amounts, _queries.adapters, _queries.path);\\n    }\\n\\n    /**\\n     * Converts byte-arrays to an array of integers\\n     */\\n    function formatAmounts(bytes memory _amounts)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        // Format amounts\\n        uint256 chunks = _amounts.length / 32;\\n        uint256[] memory amountsFormatted = new uint256[](chunks);\\n        for (uint256 i = 0; i < chunks; i++) {\\n            amountsFormatted[i] = Bytes.toUint256(i * 32 + 32, _amounts);\\n        }\\n        return amountsFormatted;\\n    }\\n\\n    /**\\n     * Converts byte-array to an array of addresses\\n     */\\n    function formatAddresses(bytes memory _addresses)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        uint256 chunks = _addresses.length / 32;\\n        address[] memory addressesFormatted = new address[](chunks);\\n        for (uint256 i = 0; i < chunks; i++) {\\n            addressesFormatted[i] = Bytes.toAddress(i * 32 + 32, _addresses);\\n        }\\n        return addressesFormatted;\\n    }\\n\\n    /**\\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\\n     */\\n    function formatOfferWithGas(Offer memory _queries)\\n        internal\\n        pure\\n        returns (FormattedOffer memory)\\n    {\\n        return\\n            FormattedOffer(\\n                formatAmounts(_queries.amounts),\\n                formatAddresses(_queries.adapters),\\n                formatAddresses(_queries.path)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc601d59a3b7c2e3786b2e6ccad43ae0b74c8cec728d7b84d44f444f30972a455\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200270238038062002702833981016040819052620000349162000127565b8181620000413362000062565b6200004c81620000b2565b506001600160a01b031660805250620001769050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b6003805460ff191660ff92909216919091179055565b600080604083850312156200013b57600080fd5b82516001600160a01b03811681146200015357600080fd5b602084015190925060ff811681146200016b57600080fd5b809150509250929050565b608051612554620001ae600039600081816102ea01528181610512015281816105c801528181610d15015261156301526125546000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063b954a35111610081578063ea1afc6a11610066578063ea1afc6a146102bf578063f2fde38b146102d2578063f887ea40146102e557600080fd5b8063b954a35114610299578063e517b58c146102ac57600080fd5b806385537dc5116100b257806385537dc5146102485780638da5cb5b1461025b5780638f38ab201461027957600080fd5b8063715018a61461023857806376ebe69c1461024057600080fd5b8063585cd34b116101245780635fa7b584116101095780635fa7b584146101ff578063625adaf2146102125780636bb3a00f1461022557600080fd5b8063585cd34b146101da578063586a5fcf146101ed57600080fd5b80630627612114610156578063267c2d881461017a578063332cd120146101b25780633a9a4081146101c5575b600080fd5b6003546101639060ff1681565b60405160ff90911681526020015b60405180910390f35b61018d610188366004612041565b61030c565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610171565b61018d6101c0366004612041565b6103c3565b6101d86101d3366004612063565b61044c565b005b6101d86101e83660046120fc565b610671565b6002545b604051908152602001610171565b6101d861020d3660046120fc565b6107dc565b6101d8610220366004612063565b610940565b6101d8610233366004612041565b6109ff565b6101d8610a89565b6001546101f1565b6101d86102563660046120fc565b610b16565b60005473ffffffffffffffffffffffffffffffffffffffff1661018d565b61028c610287366004612117565b610dc1565b60405161017191906121b5565b6101d86102a73660046120fc565b610ef9565b6101d86102ba366004612041565b6110f6565b6101d86102cd366004612041565b6111ab565b6101d86102e03660046120fc565b611235565b61018d7f000000000000000000000000000000000000000000000000000000000000000081565b600154600090829060ff821610610384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f546f6b656e20696e646578206f7574206f662072616e6765000000000000000060448201526064015b60405180910390fd5b60018360ff168154811061039a5761039a612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169392505050565b600254600090829060ff821610610436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4164617074657220696e646578206f7574206f662072616e6765000000000000604482015260640161037b565b60028360ff168154811061039a5761039a612255565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b6002541561057e576040517fe74725dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063e74725dd9061054b90600290600090600401612284565b600060405180830381600087803b15801561056557600080fd5b505af1158015610579573d6000803e3d6000fd5b505050505b61058a60028383611f8e565b506040517fe74725dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063e74725dd906106029085908590600190600401612336565b600060405180830381600087803b15801561061c57600080fd5b505af1158015610630573d6000803e3d6000fd5b505050507f2ac6193e692168ae8a3710e2f54908b88858a2dc3933d982ae43b61d8093dc10828260405161066592919061235c565b60405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b60005b60025460ff82161015610776578173ffffffffffffffffffffffffffffffffffffffff1660028260ff168154811061072f5761072f612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156107645761076081611362565b5050565b8061076e816123a7565b9150506106f5565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f41646170746572206e6f7420666f756e64000000000000000000000000000000604482015260640161037b565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461085d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b60005b60015460ff821610156108dd578173ffffffffffffffffffffffffffffffffffffffff1660018260ff168154811061089a5761089a612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156108cb576107608161160f565b806108d5816123a7565b915050610860565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f546f6b656e206e6f7420666f756e640000000000000000000000000000000000604482015260640161037b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b6109cd60018383611f8e565b507f658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a58647828260405161066592919061235c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b6107d98161160f565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b610b146000611813565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b60005b60025460ff82161015610c70578173ffffffffffffffffffffffffffffffffffffffff1660028260ff1681548110610bd457610bd4612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415610c5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4164617074657220616c72656164792061646465640000000000000000000000604482015260640161037b565b80610c68816123a7565b915050610b9a565b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182179092556040517f85537dc500000000000000000000000000000000000000000000000000000000815260048101919091527f0000000000000000000000000000000000000000000000000000000000000000909116906385537dc590602401600060405180830381600087803b158015610d5b57600080fd5b505af1158015610d6f573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff841681527f3765ea7069a8cd781bde7e8e5a39b4e43c4d8fadf08b28f1947bc8acf42db03c925060200190505b60405180910390a150565b610de560405180606001604052806060815260200160608152602001606081525090565b60008260ff16118015610e01575060035460ff90811690831611155b610e67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f51756f7465723a20496e76616c6964206d61782d737761707300000000000000604482015260640161037b565b610e8b60405180606001604052806060815260200160608152602001606081525090565b610e9485611888565b8152610e9f86611888565b6040820152610eb485878660ff8716856118b2565b905080602001515160001415610ee6576040805160208082018352600080835291845282519081018352908152908201525b610eef81611a8d565b9695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b60005b60015460ff82161015611053578173ffffffffffffffffffffffffffffffffffffffff1660018260ff1681548110610fb757610fb7612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415611041576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f546f6b656e20616c726561647920616464656400000000000000000000000000604482015260640161037b565b8061104b816123a7565b915050610f7d565b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fff1b794280002d77072d12a2b75007e417ead77096c28d26e0cca109ec0d306290602001610db6565b60005473ffffffffffffffffffffffffffffffffffffffff163314611177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b6107d981611362565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b73ffffffffffffffffffffffffffffffffffffffff8116611359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161037b565b6107d981611813565b600254819060ff8216106113d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4164617074657220696e646578206f7574206f662072616e6765000000000000604482015260640161037b565b600060028360ff16815481106113ea576113ea612255565b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff909216925090611421906001906123c7565b8154811061143157611431612255565b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff9092169160ff861690811061146d5761146d612255565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028054806114c6576114c66123de565b6000828152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908201810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190556040517f585cd34b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063585cd34b90602401600060405180830381600087803b1580156115a757600080fd5b505af11580156115bb573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff841681527ff036b3ebb61d6b8a954fd5c61f0995e5d62c0ab76cd4a17ba12f68a359cde05d925060200190505b60405180910390a1505050565b600154819060ff82161061167f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f546f6b656e20696e646578206f7574206f662072616e67650000000000000000604482015260640161037b565b600060018360ff168154811061169757611697612255565b6000918252602090912001546001805473ffffffffffffffffffffffffffffffffffffffff9092169250906116cd9082906123c7565b815481106116dd576116dd612255565b6000918252602090912001546001805473ffffffffffffffffffffffffffffffffffffffff9092169160ff861690811061171957611719612255565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001805480611772576117726123de565b60008281526020908190207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908301810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590910190915560405173ffffffffffffffffffffffffffffffffffffffff831681527fc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d7489101611602565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b6118d660405180606001604052806060815260200160608152602001606081525090565b60006118e183611af5565b905060006118f188888885611b3d565b905060018511801561191e57506119096002866123c7565b602085602001515161191b919061243c565b11155b15611a825760005b600154811015611a805760006001828154811061194557611945612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff908116915089168114806119a557508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b156119b05750611a6e565b60006119bd8b8b84611b82565b90508060600151600014156119d3575050611a6e565b60006119de88611af5565b90506119f881836060015184600001518560400151611d22565b611a098260600151848c8c856118b2565b6040810151805101519091508a73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a695781518051015180871080611a5b575086155b15611a67578096508297505b505b505050505b80611a7881612477565b915050611926565b505b509695505050505050565b611ab160405180606001604052806060815260200160608152602001606081525090565b6040518060600160405280611ac98460000151611d6e565b8152602001611adb8460200151611e22565b8152602001611aed8460400151611e22565b905292915050565b611b1960405180606001604052806060815260200160608152602001606081525090565b50604080516060810182528251815260208084015190820152918101519082015290565b600080611b4b868686611b82565b90508060600151600014611b7957611b7183826060015183600001518460400151611d22565b806060015191505b50949350505050565b6040805160808101825260008082526020820181905291810182905260608101829052905b60025460ff82161015611d1a57600060028260ff1681548110611bcc57611bcc612255565b60009182526020822001546040517fef99893a0000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff888116602483015287811660448301529091169250829063ef99893a90606401602060405180830381865afa158015611c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7a91906124b0565b905080611c88575050611d0a565b8360600151811180611c9c57506060840151155b15611d075760405180608001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018281525093505b50505b611d13816123a7565b9050611ba7565b509392505050565b611d388460400151611d3383611888565b611edf565b60408501528351611d4c90611d3385611888565b84526020840151611d6090611d3384611888565b846020018190525050505050565b6060600060208351611d80919061243c565b905060008167ffffffffffffffff811115611d9d57611d9d61240d565b604051908082528060200260200182016040528015611dc6578160200160208202803683370190505b50905060005b82811015611d1a57611df3611de28260206124c9565b611ded906020612506565b86015190565b828281518110611e0557611e05612255565b602090810291909101015280611e1a81612477565b915050611dcc565b6060600060208351611e34919061243c565b905060008167ffffffffffffffff811115611e5157611e5161240d565b604051908082528060200260200182016040528015611e7a578160200160208202803683370190505b50905060005b82811015611d1a57611e96611de28260206124c9565b828281518110611ea857611ea8612255565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280611ed781612477565b915050611e80565b8151815160609190600090611ef49083612506565b9050600060208651601f611f089190612506565b611f12919061243c565b9050600060208651601f611f269190612506565b611f30919061243c565b905060405183815260005b83811015611f5757600101602081028981015190830152611f3b565b5060005b82811015611f79576001016020810288810151908701830152611f5b565b50928301602001604052509095945050505050565b828054828255906000526020600020908101928215612006579160200282015b828111156120065781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190611fae565b50612012929150612016565b5090565b5b808211156120125760008155600101612017565b803560ff8116811461203c57600080fd5b919050565b60006020828403121561205357600080fd5b61205c8261202b565b9392505050565b6000806020838503121561207657600080fd5b823567ffffffffffffffff8082111561208e57600080fd5b818501915085601f8301126120a257600080fd5b8135818111156120b157600080fd5b8660208260051b85010111156120c657600080fd5b60209290920196919550909350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461203c57600080fd5b60006020828403121561210e57600080fd5b61205c826120d8565b6000806000806080858703121561212d57600080fd5b612136856120d8565b93506020850135925061214b604086016120d8565b91506121596060860161202b565b905092959194509250565b600081518084526020808501945080840160005b838110156121aa57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612178565b509495945050505050565b6020808252825160608383015280516080840181905260009291820190839060a08601905b808310156121fa57835182529284019260019290920191908401906121da565b508387015193507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09250828682030160408701526122388185612164565b93505050604085015181858403016060860152610eef8382612164565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082016040835280855480835260608501915086600052602092508260002060005b828110156122db57815473ffffffffffffffffffffffffffffffffffffffff16845292840192600191820191016122a9565b50505093151592019190915250919050565b8183526000602080850194508260005b858110156121aa5773ffffffffffffffffffffffffffffffffffffffff612323836120d8565b16875295820195908201906001016122fd565b60408152600061234a6040830185876122ed565b90508215156020830152949350505050565b6020815260006123706020830184866122ed565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8114156123be576123be612378565b60010192915050565b6000828210156123d9576123d9612378565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082612472577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156124a9576124a9612378565b5060010190565b6000602082840312156124c257600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561250157612501612378565b500290565b6000821982111561251957612519612378565b50019056fea26469706673582212201510d8182bc8547baddd9adb726a1aa7956012df7cf3ff198dead3fc1d792dc864736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063b954a35111610081578063ea1afc6a11610066578063ea1afc6a146102bf578063f2fde38b146102d2578063f887ea40146102e557600080fd5b8063b954a35114610299578063e517b58c146102ac57600080fd5b806385537dc5116100b257806385537dc5146102485780638da5cb5b1461025b5780638f38ab201461027957600080fd5b8063715018a61461023857806376ebe69c1461024057600080fd5b8063585cd34b116101245780635fa7b584116101095780635fa7b584146101ff578063625adaf2146102125780636bb3a00f1461022557600080fd5b8063585cd34b146101da578063586a5fcf146101ed57600080fd5b80630627612114610156578063267c2d881461017a578063332cd120146101b25780633a9a4081146101c5575b600080fd5b6003546101639060ff1681565b60405160ff90911681526020015b60405180910390f35b61018d610188366004612041565b61030c565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610171565b61018d6101c0366004612041565b6103c3565b6101d86101d3366004612063565b61044c565b005b6101d86101e83660046120fc565b610671565b6002545b604051908152602001610171565b6101d861020d3660046120fc565b6107dc565b6101d8610220366004612063565b610940565b6101d8610233366004612041565b6109ff565b6101d8610a89565b6001546101f1565b6101d86102563660046120fc565b610b16565b60005473ffffffffffffffffffffffffffffffffffffffff1661018d565b61028c610287366004612117565b610dc1565b60405161017191906121b5565b6101d86102a73660046120fc565b610ef9565b6101d86102ba366004612041565b6110f6565b6101d86102cd366004612041565b6111ab565b6101d86102e03660046120fc565b611235565b61018d7f000000000000000000000000000000000000000000000000000000000000000081565b600154600090829060ff821610610384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f546f6b656e20696e646578206f7574206f662072616e6765000000000000000060448201526064015b60405180910390fd5b60018360ff168154811061039a5761039a612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169392505050565b600254600090829060ff821610610436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4164617074657220696e646578206f7574206f662072616e6765000000000000604482015260640161037b565b60028360ff168154811061039a5761039a612255565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b6002541561057e576040517fe74725dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063e74725dd9061054b90600290600090600401612284565b600060405180830381600087803b15801561056557600080fd5b505af1158015610579573d6000803e3d6000fd5b505050505b61058a60028383611f8e565b506040517fe74725dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063e74725dd906106029085908590600190600401612336565b600060405180830381600087803b15801561061c57600080fd5b505af1158015610630573d6000803e3d6000fd5b505050507f2ac6193e692168ae8a3710e2f54908b88858a2dc3933d982ae43b61d8093dc10828260405161066592919061235c565b60405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b60005b60025460ff82161015610776578173ffffffffffffffffffffffffffffffffffffffff1660028260ff168154811061072f5761072f612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156107645761076081611362565b5050565b8061076e816123a7565b9150506106f5565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f41646170746572206e6f7420666f756e64000000000000000000000000000000604482015260640161037b565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461085d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b60005b60015460ff821610156108dd578173ffffffffffffffffffffffffffffffffffffffff1660018260ff168154811061089a5761089a612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156108cb576107608161160f565b806108d5816123a7565b915050610860565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f546f6b656e206e6f7420666f756e640000000000000000000000000000000000604482015260640161037b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b6109cd60018383611f8e565b507f658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a58647828260405161066592919061235c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b6107d98161160f565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b610b146000611813565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b60005b60025460ff82161015610c70578173ffffffffffffffffffffffffffffffffffffffff1660028260ff1681548110610bd457610bd4612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415610c5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4164617074657220616c72656164792061646465640000000000000000000000604482015260640161037b565b80610c68816123a7565b915050610b9a565b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182179092556040517f85537dc500000000000000000000000000000000000000000000000000000000815260048101919091527f0000000000000000000000000000000000000000000000000000000000000000909116906385537dc590602401600060405180830381600087803b158015610d5b57600080fd5b505af1158015610d6f573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff841681527f3765ea7069a8cd781bde7e8e5a39b4e43c4d8fadf08b28f1947bc8acf42db03c925060200190505b60405180910390a150565b610de560405180606001604052806060815260200160608152602001606081525090565b60008260ff16118015610e01575060035460ff90811690831611155b610e67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f51756f7465723a20496e76616c6964206d61782d737761707300000000000000604482015260640161037b565b610e8b60405180606001604052806060815260200160608152602001606081525090565b610e9485611888565b8152610e9f86611888565b6040820152610eb485878660ff8716856118b2565b905080602001515160001415610ee6576040805160208082018352600080835291845282519081018352908152908201525b610eef81611a8d565b9695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b60005b60015460ff82161015611053578173ffffffffffffffffffffffffffffffffffffffff1660018260ff1681548110610fb757610fb7612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415611041576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f546f6b656e20616c726561647920616464656400000000000000000000000000604482015260640161037b565b8061104b816123a7565b915050610f7d565b506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fff1b794280002d77072d12a2b75007e417ead77096c28d26e0cca109ec0d306290602001610db6565b60005473ffffffffffffffffffffffffffffffffffffffff163314611177576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b6107d981611362565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037b565b73ffffffffffffffffffffffffffffffffffffffff8116611359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161037b565b6107d981611813565b600254819060ff8216106113d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4164617074657220696e646578206f7574206f662072616e6765000000000000604482015260640161037b565b600060028360ff16815481106113ea576113ea612255565b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff909216925090611421906001906123c7565b8154811061143157611431612255565b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff9092169160ff861690811061146d5761146d612255565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028054806114c6576114c66123de565b6000828152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908201810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190556040517f585cd34b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063585cd34b90602401600060405180830381600087803b1580156115a757600080fd5b505af11580156115bb573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff841681527ff036b3ebb61d6b8a954fd5c61f0995e5d62c0ab76cd4a17ba12f68a359cde05d925060200190505b60405180910390a1505050565b600154819060ff82161061167f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f546f6b656e20696e646578206f7574206f662072616e67650000000000000000604482015260640161037b565b600060018360ff168154811061169757611697612255565b6000918252602090912001546001805473ffffffffffffffffffffffffffffffffffffffff9092169250906116cd9082906123c7565b815481106116dd576116dd612255565b6000918252602090912001546001805473ffffffffffffffffffffffffffffffffffffffff9092169160ff861690811061171957611719612255565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001805480611772576117726123de565b60008281526020908190207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908301810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590910190915560405173ffffffffffffffffffffffffffffffffffffffff831681527fc9c0383c229a5dadf03359a0c6471cb6d5d35c0676fc519648726970bab6d7489101611602565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b6118d660405180606001604052806060815260200160608152602001606081525090565b60006118e183611af5565b905060006118f188888885611b3d565b905060018511801561191e57506119096002866123c7565b602085602001515161191b919061243c565b11155b15611a825760005b600154811015611a805760006001828154811061194557611945612255565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff908116915089168114806119a557508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b156119b05750611a6e565b60006119bd8b8b84611b82565b90508060600151600014156119d3575050611a6e565b60006119de88611af5565b90506119f881836060015184600001518560400151611d22565b611a098260600151848c8c856118b2565b6040810151805101519091508a73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a695781518051015180871080611a5b575086155b15611a67578096508297505b505b505050505b80611a7881612477565b915050611926565b505b509695505050505050565b611ab160405180606001604052806060815260200160608152602001606081525090565b6040518060600160405280611ac98460000151611d6e565b8152602001611adb8460200151611e22565b8152602001611aed8460400151611e22565b905292915050565b611b1960405180606001604052806060815260200160608152602001606081525090565b50604080516060810182528251815260208084015190820152918101519082015290565b600080611b4b868686611b82565b90508060600151600014611b7957611b7183826060015183600001518460400151611d22565b806060015191505b50949350505050565b6040805160808101825260008082526020820181905291810182905260608101829052905b60025460ff82161015611d1a57600060028260ff1681548110611bcc57611bcc612255565b60009182526020822001546040517fef99893a0000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff888116602483015287811660448301529091169250829063ef99893a90606401602060405180830381865afa158015611c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7a91906124b0565b905080611c88575050611d0a565b8360600151811180611c9c57506060840151155b15611d075760405180608001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018281525093505b50505b611d13816123a7565b9050611ba7565b509392505050565b611d388460400151611d3383611888565b611edf565b60408501528351611d4c90611d3385611888565b84526020840151611d6090611d3384611888565b846020018190525050505050565b6060600060208351611d80919061243c565b905060008167ffffffffffffffff811115611d9d57611d9d61240d565b604051908082528060200260200182016040528015611dc6578160200160208202803683370190505b50905060005b82811015611d1a57611df3611de28260206124c9565b611ded906020612506565b86015190565b828281518110611e0557611e05612255565b602090810291909101015280611e1a81612477565b915050611dcc565b6060600060208351611e34919061243c565b905060008167ffffffffffffffff811115611e5157611e5161240d565b604051908082528060200260200182016040528015611e7a578160200160208202803683370190505b50905060005b82811015611d1a57611e96611de28260206124c9565b828281518110611ea857611ea8612255565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280611ed781612477565b915050611e80565b8151815160609190600090611ef49083612506565b9050600060208651601f611f089190612506565b611f12919061243c565b9050600060208651601f611f269190612506565b611f30919061243c565b905060405183815260005b83811015611f5757600101602081028981015190830152611f3b565b5060005b82811015611f79576001016020810288810151908701830152611f5b565b50928301602001604052509095945050505050565b828054828255906000526020600020908101928215612006579160200282015b828111156120065781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190611fae565b50612012929150612016565b5090565b5b808211156120125760008155600101612017565b803560ff8116811461203c57600080fd5b919050565b60006020828403121561205357600080fd5b61205c8261202b565b9392505050565b6000806020838503121561207657600080fd5b823567ffffffffffffffff8082111561208e57600080fd5b818501915085601f8301126120a257600080fd5b8135818111156120b157600080fd5b8660208260051b85010111156120c657600080fd5b60209290920196919550909350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461203c57600080fd5b60006020828403121561210e57600080fd5b61205c826120d8565b6000806000806080858703121561212d57600080fd5b612136856120d8565b93506020850135925061214b604086016120d8565b91506121596060860161202b565b905092959194509250565b600081518084526020808501945080840160005b838110156121aa57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612178565b509495945050505050565b6020808252825160608383015280516080840181905260009291820190839060a08601905b808310156121fa57835182529284019260019290920191908401906121da565b508387015193507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09250828682030160408701526122388185612164565b93505050604085015181858403016060860152610eef8382612164565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082016040835280855480835260608501915086600052602092508260002060005b828110156122db57815473ffffffffffffffffffffffffffffffffffffffff16845292840192600191820191016122a9565b50505093151592019190915250919050565b8183526000602080850194508260005b858110156121aa5773ffffffffffffffffffffffffffffffffffffffff612323836120d8565b16875295820195908201906001016122fd565b60408152600061234a6040830185876122ed565b90508215156020830152949350505050565b6020815260006123706020830184866122ed565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8114156123be576123be612378565b60010192915050565b6000828210156123d9576123d9612378565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082612472577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156124a9576124a9612378565b5060010190565b6000602082840312156124c257600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561250157612501612378565b500290565b6000821982111561251957612519612378565b50019056fea26469706673582212201510d8182bc8547baddd9adb726a1aa7956012df7cf3ff198dead3fc1d792dc864736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "findBestPath(address,uint256,address,uint8)": {
        "params": {
          "amountIn": "amount of initial tokens to swap",
          "maxSwaps": "maximum amount of swaps in the route between initial and final tokens",
          "tokenIn": "initial token to sell",
          "tokenOut": "final token to buy"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAdapters(address[])": {
        "details": "This doesn't check if any of the adapters are duplicated, so make sure to check the data for duplicates"
      },
      "setTokens(address[])": {
        "details": "This doesn't check if any of the tokens are duplicated, so make sure to check the data for duplicates"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAX_SWAPS()": {
        "notice": "Maximum amount of swaps that Quoter will be using for finding the best path between two tokens. This is done for two reasons: 1. Too many swaps in the path make very little sense 2. Every extra swap increases the amount of possible paths exponentially,    so we need some sensible limitation."
      },
      "constructor": {
        "notice": "PS. If the migration from one Quoter to another is needed (w/0 changing Router): 1. call oldQuoter.setAdapters([]), this will clear the adapters in Router 2. revoke ADAPTERS_STORAGE_ROLE from oldQuoter 3. Do (2-4) from setup flow as usual"
      },
      "findBestPath(address,uint256,address,uint8)": {
        "notice": "Find the best path between two tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/router/Quoter.sol:Quoter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4505,
        "contract": "contracts/router/Quoter.sol:Quoter",
        "label": "trustedTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4509,
        "contract": "contracts/router/Quoter.sol:Quoter",
        "label": "trustedAdapters",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4512,
        "contract": "contracts/router/Quoter.sol:Quoter",
        "label": "MAX_SWAPS",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}