{
  "address": "0xAe5C1c2E5778f40185A9580ACa4061B42De6f74B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasFeePricing",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "CallReverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "msgId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcNonce",
          "type": "uint64"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcChainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiver",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dstChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authVerifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "computeMessageId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "estimateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        }
      ],
      "name": "executeMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasFeePricing",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        }
      ],
      "name": "getExecutedMessage",
      "outputs": [
        {
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_receiver",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authVerifier",
          "type": "address"
        }
      ],
      "name": "updateAuthVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        },
        {
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "updateMessageStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawGasFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbae8732edd27c65ce763df422cf5863899d4e1a9eb7c9b4ae48b45713e9a5744",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0xAe5C1c2E5778f40185A9580ACa4061B42De6f74B",
    "transactionIndex": 0,
    "gasUsed": "1855465",
    "logsBloom": "0x
    "blockHash": "0x2f10ea5d07daa10e0f72131f680ef90ecae1c7339ed81d4cf6bda177b143cba1",
    "transactionHash": "0xbae8732edd27c65ce763df422cf5863899d4e1a9eb7c9b4ae48b45713e9a5744",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14224464,
        "transactionHash": "0xbae8732edd27c65ce763df422cf5863899d4e1a9eb7c9b4ae48b45713e9a5744",
        "address": "0xAe5C1c2E5778f40185A9580ACa4061B42De6f74B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2f10ea5d07daa10e0f72131f680ef90ecae1c7339ed81d4cf6bda177b143cba1"
      }
    ],
    "blockNumber": 14224464,
    "cumulativeGasUsed": "1855465",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAeEDaA1B2C4281CB938b7D64f17C832c0160A6B2",
    "0x55A0D01a419471DBC0d118966b703e21799B6824"
  ],
  "solcInputHash": "eb7e55f1a3b2e54ccb5aab1075126bce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasFeePricing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CallReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"msgId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcNonce\",\"type\":\"uint64\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"computeMessageId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"estimateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasFeePricing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"getExecutedMessage\",\"outputs\":[{\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authVerifier\",\"type\":\"address\"}],\"name\":\"updateAuthVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"},{\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"updateMessageStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawGasFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)\":{\"params\":{\"_dstAddress\":\"Destination address that the arbitrary message will be passed to\",\"_gasLimit\":\"Gas limit to be passed alongside the message, depending on the fee paid on srcChain\",\"_message\":\"Arbitrary message payload to pass to the destination chain receiver\",\"_srcAddress\":\"Originating bytes32 address of the message sender on the srcChain\",\"_srcChainId\":\"Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendMessage(bytes32,uint256,bytes,bytes)\":{\"params\":{\"_dstChainId\":\"The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\",\"_message\":\"The arbitrary payload to pass to the destination chain receiver\",\"_options\":\"Versioned struct used to instruct relayer on how to proceed with gas limits\",\"_receiver\":\"The bytes32 address of the destination contract to be called\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawGasFees(address)\":{\"params\":{\"to\":\"Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)\":{\"notice\":\"Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\"},\"sendMessage(bytes32,uint256,bytes,bytes)\":{\"notice\":\"Sends a message to a receiving contract address on another chain. Sender must make sure that the message is unique and not a duplicate message.\"},\"updateMessageStatus(bytes32,uint8)\":{\"notice\":\"CONTRACT CONFIG \"},\"withdrawGasFees(address)\":{\"notice\":\"Withdraws accumulated fees in native gas token, based on fees variable.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/MessageBus.sol\":\"MessageBus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/messaging/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./MessageBusSender.sol\\\";\\nimport \\\"./MessageBusReceiver.sol\\\";\\n\\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\\n    constructor(address _gasFeePricing, address _authVerifier)\\n        MessageBusSender(_gasFeePricing)\\n        MessageBusReceiver(_authVerifier)\\n    {}\\n}\\n\",\"keccak256\":\"0xa06b67fe831c4da3c49fdac8b3e64315f1d0d96adddb36e5499b6eaf50de2ed1\",\"license\":\"MIT\"},\"contracts/messaging/MessageBusReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IAuthVerifier.sol\\\";\\nimport \\\"./interfaces/ISynMessagingReceiver.sol\\\";\\n\\ncontract MessageBusReceiver is Ownable {\\n    address public authVerifier;\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail\\n    }\\n\\n    // Store all successfully executed messages\\n    mapping(bytes32 => TxStatus) executedMessages;\\n\\n    // TODO: Rename to follow one standard convention -> Send -> Receive?\\n    event Executed(\\n        bytes32 msgId,\\n        TxStatus status,\\n        address indexed _dstAddress,\\n        uint64 srcChainId,\\n        uint64 srcNonce\\n    );\\n    event CallReverted(string reason);\\n\\n    constructor(address _authVerifier) {\\n        authVerifier = _authVerifier;\\n    }\\n\\n    function computeMessageId(\\n        uint256 _srcChainId,\\n        bytes32 _srcAddress,\\n        address _dstAddress,\\n        uint256 _nonce,\\n        bytes calldata _message\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _srcChainId,\\n                    _srcAddress,\\n                    block.chainid,\\n                    _dstAddress,\\n                    _nonce,\\n                    _message\\n                )\\n            );\\n    }\\n\\n    function getExecutedMessage(bytes32 _messageId)\\n        external\\n        view\\n        returns (TxStatus)\\n    {\\n        return executedMessages[_messageId];\\n    }\\n\\n    /**\\n     * @notice Relayer executes messages through an authenticated method to the destination receiver\\n     based on the originating transaction on source chain\\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\\n     * @param _srcAddress Originating bytes32 address of the message sender on the srcChain\\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\\n     */\\n    function executeMessage(\\n        uint256 _srcChainId,\\n        bytes32 _srcAddress,\\n        address _dstAddress,\\n        uint256 _gasLimit,\\n        uint256 _nonce,\\n        bytes calldata _message,\\n        bytes32 _messageId\\n    ) external {\\n        // In order to guarentee that an individual message is only executed once, a messageId is generated.\\n        bytes32 messageId = computeMessageId(\\n            _srcChainId,\\n            _srcAddress,\\n            _dstAddress,\\n            _nonce,\\n            _message\\n        );\\n        require(messageId == _messageId, \\\"Incorrect messageId submitted\\\");\\n        // enforce that this message ID hasn't already been tried ever\\n        // console.log(uint256(executedMessages[messageId]));\\n        require(\\n            executedMessages[messageId] == TxStatus.Null,\\n            \\\"Message already executed\\\"\\n        );\\n        // Authenticate executeMessage, will revert if not authenticated\\n        IAuthVerifier(authVerifier).msgAuth(abi.encode(msg.sender));\\n        // Message is now in-flight, adjust status\\n        // executedMessages[messageId] = TxStatus.Pending;\\n\\n        TxStatus status;\\n        try\\n            ISynMessagingReceiver(_dstAddress).executeMessage{gas: _gasLimit}(\\n                _srcAddress,\\n                _srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        {\\n            // Assuming success state if no revert\\n            status = TxStatus.Success;\\n        } catch (bytes memory reason) {\\n            // call hard reverted & failed\\n            emit CallReverted(getRevertMsg(reason));\\n            status = TxStatus.Fail;\\n        }\\n\\n        executedMessages[messageId] = status;\\n        emit Executed(\\n            messageId,\\n            status,\\n            _dstAddress,\\n            uint64(_srcChainId),\\n            uint64(_nonce)\\n        );\\n    }\\n\\n    /** HELPER VIEW FUNCTION */\\n    // https://ethereum.stackexchange.com/a/83577\\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\\n    function getRevertMsg(bytes memory _returnData)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /** CONTRACT CONFIG */\\n\\n    function updateMessageStatus(bytes32 _messageId, TxStatus _status)\\n        public\\n        onlyOwner\\n    {\\n        executedMessages[_messageId] = _status;\\n    }\\n\\n    function updateAuthVerifier(address _authVerifier) public onlyOwner {\\n        require(_authVerifier != address(0), \\\"Cannot set to 0\\\");\\n        authVerifier = _authVerifier;\\n    }\\n}\\n\",\"keccak256\":\"0x929a5e0ad0c6901e89b4a0f774fde0ec843b5f86099919f6884fcc784d537a4d\",\"license\":\"MIT\"},\"contracts/messaging/MessageBusSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IGasFeePricing.sol\\\";\\n\\ncontract MessageBusSender is Ownable {\\n    address public gasFeePricing;\\n    uint64 public nonce;\\n    uint256 internal fees;\\n\\n    constructor(address _gasFeePricing) {\\n        gasFeePricing = _gasFeePricing;\\n    }\\n\\n    event MessageSent(\\n        address indexed sender,\\n        uint256 srcChainID,\\n        bytes32 receiver,\\n        uint256 indexed dstChainId,\\n        bytes message,\\n        uint64 indexed nonce,\\n        bytes options,\\n        uint256 fee\\n    );\\n\\n    function estimateFee(uint256 _dstChainId, bytes calldata _options)\\n        public\\n        returns (uint256)\\n    {\\n        uint256 fee = IGasFeePricing(gasFeePricing).estimateGasFee(\\n            _dstChainId,\\n            _options\\n        );\\n        require(fee != 0, \\\"Fee not set\\\");\\n        return fee;\\n    }\\n\\n    /**\\n     * @notice Sends a message to a receiving contract address on another chain.\\n     * Sender must make sure that the message is unique and not a duplicate message.\\n     * @param _receiver The bytes32 address of the destination contract to be called\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _message The arbitrary payload to pass to the destination chain receiver\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\\n     */\\n    function sendMessage(\\n        bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message,\\n        bytes calldata _options\\n    ) external payable {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 fee = estimateFee(_dstChainId, _options);\\n        require(msg.value >= fee, \\\"Insuffient gas fee\\\");\\n        emit MessageSent(\\n            msg.sender,\\n            block.chainid,\\n            _receiver,\\n            _dstChainId,\\n            _message,\\n            nonce,\\n            _options,\\n            msg.value\\n        );\\n        fees += msg.value;\\n        ++nonce;\\n    }\\n\\n    /**\\n     * @notice Withdraws accumulated fees in native gas token, based on fees variable.\\n     * @param to Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas\\n     */\\n    function withdrawGasFees(address payable to) external onlyOwner {\\n        uint256 withdrawAmount = fees;\\n        // Reset fees to 0\\n        to.transfer(withdrawAmount);\\n        delete fees;\\n    }\\n}\\n\",\"keccak256\":\"0xb3db4bae629c76c7eec3cbbdc7fb88bf53e4bdcd21be87f1d6ef81a0d5b873f8\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IAuthVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IAuthVerifier {\\n    /**\\n     * @notice Authentication library to allow the validator network to execute cross-chain messages.\\n     * @param _authData A bytes32 address encoded via abi.encode(address)\\n     * @return authenticated returns true if bytes data submitted and decoded to the address is correct\\n     */\\n    function msgAuth(bytes calldata _authData)\\n        external\\n        view\\n        returns (bool authenticated);\\n\\n    /**\\n     * @notice Permissioned method to support upgrades to the library\\n     * @param _nodegroup address which has authentication to execute messages\\n     */\\n    function setNodeGroup(address _nodegroup) external;\\n}\",\"keccak256\":\"0xf9847b671ca1a3b929d66eed7fb4b3eeda245e169fc9fca686729f1dea96497c\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IGasFeePricing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IGasFeePricing {\\n    \\n    /**\\n     * @notice Permissioned method to allow an off-chain party to set what each dstChain's\\n     * gas cost is priced in the srcChain's native gas currency. \\n     * Example: call on ETH, setCostPerChain(43114, 30000000000, 25180000000000000)\\n     * chain ID 43114\\n     * Average of 30 gwei cost to transaction on 43114\\n     * AVAX/ETH = 0.02518, scaled to gas in wei = 25180000000000000\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _gasUnitPrice The estimated current gas price in wei of the destination chain\\n     * @param _gasTokenPriceRatio Gas ratio of dstGasToken / srcGasToken\\n     */\\n    function setCostPerChain(uint256 _dstChainId, uint256 _gasUnitPrice, uint256 _gasTokenPriceRatio) external;\\n\\n    /**\\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\\n     */\\n    function estimateGasFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\\n}  \",\"keccak256\":\"0xdec270ed7ddbeaa560dc0b5e2df2255f6e1b8be95eaafe9fce072b194aff8aff\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/ISynMessagingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISynMessagingReceiver {\\n\\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\\n    // mapping(uint256 => bytes32) internal trustedRemoteLookup;\\n\\n\\n    /** \\n     * @notice MsgExecutionStatus state\\n     * @return Success execution succeeded, finalized\\n     * @return Fail // execution failed, finalized\\n     * @return Retry // execution failed or rejected, set to be retryable\\n    */ \\n    enum MsgExecutionStatus {\\n        Success, \\n        Fail\\n    }\\n\\n     /**\\n     * @notice Called by MessageBus \\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\\n     * @param _srcAddress The bytes32 address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external returns (MsgExecutionStatus);\\n}\\n    \",\"keccak256\":\"0x9081c7651818c6d57dbbe3053422ca5789b7cee0d9a6d79c7a912fc02b30fd58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620021c0380380620021c083398181016040528101906200003791906200021b565b8082620000596200004d620000e560201b60201c565b620000ed60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000262565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001e382620001b6565b9050919050565b620001f581620001d6565b81146200020157600080fd5b50565b6000815190506200021581620001ea565b92915050565b60008060408385031215620002355762000234620001b1565b5b6000620002458582860162000204565b9250506020620002588582860162000204565b9150509250929050565b611f4e80620002726000396000f3fe6080604052600436106100dd5760003560e01c8063aa70fc0e1161007f578063c408733511610059578063c40873351461028b578063d6417b82146102b6578063d6b457b9146102f3578063f2fde38b1461031c576100dd565b8063aa70fc0e14610219578063ac8a4c1b14610244578063affed0e014610260576100dd565b80638da5cb5b116100bb5780638da5cb5b146101735780639b11079c1461019e578063a1b058d8146101c7578063a5c0edf3146101f0576100dd565b806325b19fa3146100e25780635da6d2c41461011f578063715018a61461015c575b600080fd5b3480156100ee57600080fd5b5061010960048036038101906101049190610fa4565b610345565b6040516101169190611048565b60405180910390f35b34801561012b57600080fd5b50610146600480360381019061014191906110fe565b61036f565b604051610153919061116d565b60405180910390f35b34801561016857600080fd5b50610171610464565b005b34801561017f57600080fd5b506101886104ec565b60405161019591906111c9565b60405180910390f35b3480156101aa57600080fd5b506101c560048036038101906101c09190611209565b610515565b005b3480156101d357600080fd5b506101ee60048036038101906101e99190611275565b6105d0565b005b3480156101fc57600080fd5b5061021760048036038101906102129190611337565b610908565b005b34801561022557600080fd5b5061022e610a37565b60405161023b91906111c9565b60405180910390f35b61025e60048036038101906102599190611364565b610a5d565b005b34801561026c57600080fd5b50610275610bd7565b604051610282919061142e565b60405180910390f35b34801561029757600080fd5b506102a0610bf1565b6040516102ad91906111c9565b60405180910390f35b3480156102c257600080fd5b506102dd60048036038101906102d89190611449565b610c17565b6040516102ea91906114f2565b60405180910390f35b3480156102ff57600080fd5b5061031a6004803603810190610315919061154b565b610c58565b005b34801561032857600080fd5b50610343600480360381019061033e9190611337565b610d2c565b005b60006004600083815260200190815260200160002060009054906101000a900460ff169050919050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347feadc18686866040518463ffffffff1660e01b81526004016103d1939291906115d6565b6020604051808303816000875af11580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610414919061161d565b905060008103610459576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610450906116a7565b60405180910390fd5b809150509392505050565b61046c610e23565b73ffffffffffffffffffffffffffffffffffffffff1661048a6104ec565b73ffffffffffffffffffffffffffffffffffffffff16146104e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d790611713565b60405180910390fd5b6104ea6000610e2b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61051d610e23565b73ffffffffffffffffffffffffffffffffffffffff1661053b6104ec565b73ffffffffffffffffffffffffffffffffffffffff1614610591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058890611713565b60405180910390fd5b806004600084815260200190815260200160002060006101000a81548160ff021916908360028111156105c7576105c6610fd1565b5b02179055505050565b60006105e0898989888888610c17565b9050818114610624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061b9061177f565b60405180910390fd5b6000600281111561063857610637610fd1565b5b6004600083815260200190815260200160002060009054906101000a900460ff16600281111561066b5761066a610fd1565b5b146106ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906117eb565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b1b3a2d336040516020016106fa91906111c9565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016107259190611882565b602060405180830381865afa158015610742573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076691906118dc565b5060008773ffffffffffffffffffffffffffffffffffffffff1663a6060871888b8d8989336040518763ffffffff1660e01b81526004016107ab959493929190611909565b60206040518083038160008887f1935050505080156107e857506040513d601f19601f820116820180604052508101906107e5919061197c565b60015b610867573d8060008114610818576040519150601f19603f3d011682016040523d82523d6000602084013e61081d565b606091505b507fffdd6142bbb721f3400e3908b04b86f60649b2e4d191e3f4c50c32c3e6471d2f61084882610eef565b60405161085591906119ed565b60405180910390a1600291505061086d565b50600190505b806004600084815260200190815260200160002060006101000a81548160ff021916908360028111156108a3576108a2610fd1565b5b02179055508773ffffffffffffffffffffffffffffffffffffffff167f04214a849019ea3548afcedee810b5bc1680cfb64e22fdf9051a823f3cdfea6583838d8a6040516108f49493929190611a0f565b60405180910390a250505050505050505050565b610910610e23565b73ffffffffffffffffffffffffffffffffffffffff1661092e6104ec565b73ffffffffffffffffffffffffffffffffffffffff1614610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b90611713565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ea90611aa0565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b468503610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9690611b0c565b60405180910390fd5b6000610aac86848461036f565b905080341015610af1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae890611b78565b60405180910390fd5b600160149054906101000a900467ffffffffffffffff1667ffffffffffffffff16863373ffffffffffffffffffffffffffffffffffffffff167f4679cb14e22de98156c0e8896d3d05a0ae587315dfbb2abcbeec6ae4f0144549468b8a8a8a8a34604051610b659796959493929190611b98565b60405180910390a43460026000828254610b7f9190611c2c565b925050819055506001601481819054906101000a900467ffffffffffffffff16610ba890611c82565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050505050565b600160149054906101000a900467ffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600086864687878787604051602001610c369796959493929190611cb2565b6040516020818303038152906040528051906020012090509695505050505050565b610c60610e23565b73ffffffffffffffffffffffffffffffffffffffff16610c7e6104ec565b73ffffffffffffffffffffffffffffffffffffffff1614610cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccb90611713565b60405180910390fd5b600060025490508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d21573d6000803e3d6000fd5b506002600090555050565b610d34610e23565b73ffffffffffffffffffffffffffffffffffffffff16610d526104ec565b73ffffffffffffffffffffffffffffffffffffffff1614610da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9f90611713565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0e90611d8e565b60405180910390fd5b610e2081610e2b565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060604482511015610f38576040518060400160405280601d81526020017f5472616e73616374696f6e2072657665727465642073696c656e746c790000008152509050610f55565b60048201915081806020019051810190610f529190611ecf565b90505b919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610f8181610f6e565b8114610f8c57600080fd5b50565b600081359050610f9e81610f78565b92915050565b600060208284031215610fba57610fb9610f64565b5b6000610fc884828501610f8f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061101157611010610fd1565b5b50565b600081905061102282611000565b919050565b600061103282611014565b9050919050565b61104281611027565b82525050565b600060208201905061105d6000830184611039565b92915050565b6000819050919050565b61107681611063565b811461108157600080fd5b50565b6000813590506110938161106d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126110be576110bd611099565b5b8235905067ffffffffffffffff8111156110db576110da61109e565b5b6020830191508360018202830111156110f7576110f66110a3565b5b9250929050565b60008060006040848603121561111757611116610f64565b5b600061112586828701611084565b935050602084013567ffffffffffffffff81111561114657611145610f69565b5b611152868287016110a8565b92509250509250925092565b61116781611063565b82525050565b6000602082019050611182600083018461115e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111b382611188565b9050919050565b6111c3816111a8565b82525050565b60006020820190506111de60008301846111ba565b92915050565b600381106111f157600080fd5b50565b600081359050611203816111e4565b92915050565b600080604083850312156112205761121f610f64565b5b600061122e85828601610f8f565b925050602061123f858286016111f4565b9150509250929050565b611252816111a8565b811461125d57600080fd5b50565b60008135905061126f81611249565b92915050565b60008060008060008060008060e0898b03121561129557611294610f64565b5b60006112a38b828c01611084565b98505060206112b48b828c01610f8f565b97505060406112c58b828c01611260565b96505060606112d68b828c01611084565b95505060806112e78b828c01611084565b94505060a089013567ffffffffffffffff81111561130857611307610f69565b5b6113148b828c016110a8565b935093505060c06113278b828c01610f8f565b9150509295985092959890939650565b60006020828403121561134d5761134c610f64565b5b600061135b84828501611260565b91505092915050565b6000806000806000806080878903121561138157611380610f64565b5b600061138f89828a01610f8f565b96505060206113a089828a01611084565b955050604087013567ffffffffffffffff8111156113c1576113c0610f69565b5b6113cd89828a016110a8565b9450945050606087013567ffffffffffffffff8111156113f0576113ef610f69565b5b6113fc89828a016110a8565b92509250509295509295509295565b600067ffffffffffffffff82169050919050565b6114288161140b565b82525050565b6000602082019050611443600083018461141f565b92915050565b60008060008060008060a0878903121561146657611465610f64565b5b600061147489828a01611084565b965050602061148589828a01610f8f565b955050604061149689828a01611260565b94505060606114a789828a01611084565b935050608087013567ffffffffffffffff8111156114c8576114c7610f69565b5b6114d489828a016110a8565b92509250509295509295509295565b6114ec81610f6e565b82525050565b600060208201905061150760008301846114e3565b92915050565b600061151882611188565b9050919050565b6115288161150d565b811461153357600080fd5b50565b6000813590506115458161151f565b92915050565b60006020828403121561156157611560610f64565b5b600061156f84828501611536565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006115b58385611578565b93506115c2838584611589565b6115cb83611598565b840190509392505050565b60006040820190506115eb600083018661115e565b81810360208301526115fe8184866115a9565b9050949350505050565b6000815190506116178161106d565b92915050565b60006020828403121561163357611632610f64565b5b600061164184828501611608565b91505092915050565b600082825260208201905092915050565b7f466565206e6f7420736574000000000000000000000000000000000000000000600082015250565b6000611691600b8361164a565b915061169c8261165b565b602082019050919050565b600060208201905081810360008301526116c081611684565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006116fd60208361164a565b9150611708826116c7565b602082019050919050565b6000602082019050818103600083015261172c816116f0565b9050919050565b7f496e636f7272656374206d6573736167654964207375626d6974746564000000600082015250565b6000611769601d8361164a565b915061177482611733565b602082019050919050565b600060208201905081810360008301526117988161175c565b9050919050565b7f4d65737361676520616c72656164792065786563757465640000000000000000600082015250565b60006117d560188361164a565b91506117e08261179f565b602082019050919050565b60006020820190508181036000830152611804816117c8565b9050919050565b600081519050919050565b60005b83811015611834578082015181840152602081019050611819565b83811115611843576000848401525b50505050565b60006118548261180b565b61185e8185611578565b935061186e818560208601611816565b61187781611598565b840191505092915050565b6000602082019050818103600083015261189c8184611849565b905092915050565b60008115159050919050565b6118b9816118a4565b81146118c457600080fd5b50565b6000815190506118d6816118b0565b92915050565b6000602082840312156118f2576118f1610f64565b5b6000611900848285016118c7565b91505092915050565b600060808201905061191e60008301886114e3565b61192b602083018761115e565b818103604083015261193e8185876115a9565b905061194d60608301846111ba565b9695505050505050565b6002811061196457600080fd5b50565b60008151905061197681611957565b92915050565b60006020828403121561199257611991610f64565b5b60006119a084828501611967565b91505092915050565b600081519050919050565b60006119bf826119a9565b6119c9818561164a565b93506119d9818560208601611816565b6119e281611598565b840191505092915050565b60006020820190508181036000830152611a0781846119b4565b905092915050565b6000608082019050611a2460008301876114e3565b611a316020830186611039565b611a3e604083018561141f565b611a4b606083018461141f565b95945050505050565b7f43616e6e6f742073657420746f20300000000000000000000000000000000000600082015250565b6000611a8a600f8361164a565b9150611a9582611a54565b602082019050919050565b60006020820190508181036000830152611ab981611a7d565b9050919050565b7f496e76616c696420636861696e49640000000000000000000000000000000000600082015250565b6000611af6600f8361164a565b9150611b0182611ac0565b602082019050919050565b60006020820190508181036000830152611b2581611ae9565b9050919050565b7f496e7375666669656e7420676173206665650000000000000000000000000000600082015250565b6000611b6260128361164a565b9150611b6d82611b2c565b602082019050919050565b60006020820190508181036000830152611b9181611b55565b9050919050565b600060a082019050611bad600083018a61115e565b611bba60208301896114e3565b8181036040830152611bcd8187896115a9565b90508181036060830152611be28185876115a9565b9050611bf1608083018461115e565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c3782611063565b9150611c4283611063565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c7757611c76611bfd565b5b828201905092915050565b6000611c8d8261140b565b915067ffffffffffffffff8203611ca757611ca6611bfd565b5b600182019050919050565b600060c082019050611cc7600083018a61115e565b611cd460208301896114e3565b611ce1604083018861115e565b611cee60608301876111ba565b611cfb608083018661115e565b81810360a0830152611d0e8184866115a9565b905098975050505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611d7860268361164a565b9150611d8382611d1c565b604082019050919050565b60006020820190508181036000830152611da781611d6b565b9050919050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611deb82611598565b810181811067ffffffffffffffff82111715611e0a57611e09611db3565b5b80604052505050565b6000611e1d610f5a565b9050611e298282611de2565b919050565b600067ffffffffffffffff821115611e4957611e48611db3565b5b611e5282611598565b9050602081019050919050565b6000611e72611e6d84611e2e565b611e13565b905082815260208101848484011115611e8e57611e8d611dae565b5b611e99848285611816565b509392505050565b600082601f830112611eb657611eb5611099565b5b8151611ec6848260208601611e5f565b91505092915050565b600060208284031215611ee557611ee4610f64565b5b600082015167ffffffffffffffff811115611f0357611f02610f69565b5b611f0f84828501611ea1565b9150509291505056fea2646970667358221220b1a33217dfc97b0d6d2ff3fed0278773659b2480ac74c70ec5e3b3790d24aa8564736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c8063aa70fc0e1161007f578063c408733511610059578063c40873351461028b578063d6417b82146102b6578063d6b457b9146102f3578063f2fde38b1461031c576100dd565b8063aa70fc0e14610219578063ac8a4c1b14610244578063affed0e014610260576100dd565b80638da5cb5b116100bb5780638da5cb5b146101735780639b11079c1461019e578063a1b058d8146101c7578063a5c0edf3146101f0576100dd565b806325b19fa3146100e25780635da6d2c41461011f578063715018a61461015c575b600080fd5b3480156100ee57600080fd5b5061010960048036038101906101049190610fa4565b610345565b6040516101169190611048565b60405180910390f35b34801561012b57600080fd5b50610146600480360381019061014191906110fe565b61036f565b604051610153919061116d565b60405180910390f35b34801561016857600080fd5b50610171610464565b005b34801561017f57600080fd5b506101886104ec565b60405161019591906111c9565b60405180910390f35b3480156101aa57600080fd5b506101c560048036038101906101c09190611209565b610515565b005b3480156101d357600080fd5b506101ee60048036038101906101e99190611275565b6105d0565b005b3480156101fc57600080fd5b5061021760048036038101906102129190611337565b610908565b005b34801561022557600080fd5b5061022e610a37565b60405161023b91906111c9565b60405180910390f35b61025e60048036038101906102599190611364565b610a5d565b005b34801561026c57600080fd5b50610275610bd7565b604051610282919061142e565b60405180910390f35b34801561029757600080fd5b506102a0610bf1565b6040516102ad91906111c9565b60405180910390f35b3480156102c257600080fd5b506102dd60048036038101906102d89190611449565b610c17565b6040516102ea91906114f2565b60405180910390f35b3480156102ff57600080fd5b5061031a6004803603810190610315919061154b565b610c58565b005b34801561032857600080fd5b50610343600480360381019061033e9190611337565b610d2c565b005b60006004600083815260200190815260200160002060009054906101000a900460ff169050919050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347feadc18686866040518463ffffffff1660e01b81526004016103d1939291906115d6565b6020604051808303816000875af11580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610414919061161d565b905060008103610459576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610450906116a7565b60405180910390fd5b809150509392505050565b61046c610e23565b73ffffffffffffffffffffffffffffffffffffffff1661048a6104ec565b73ffffffffffffffffffffffffffffffffffffffff16146104e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d790611713565b60405180910390fd5b6104ea6000610e2b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61051d610e23565b73ffffffffffffffffffffffffffffffffffffffff1661053b6104ec565b73ffffffffffffffffffffffffffffffffffffffff1614610591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058890611713565b60405180910390fd5b806004600084815260200190815260200160002060006101000a81548160ff021916908360028111156105c7576105c6610fd1565b5b02179055505050565b60006105e0898989888888610c17565b9050818114610624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061b9061177f565b60405180910390fd5b6000600281111561063857610637610fd1565b5b6004600083815260200190815260200160002060009054906101000a900460ff16600281111561066b5761066a610fd1565b5b146106ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a2906117eb565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b1b3a2d336040516020016106fa91906111c9565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016107259190611882565b602060405180830381865afa158015610742573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076691906118dc565b5060008773ffffffffffffffffffffffffffffffffffffffff1663a6060871888b8d8989336040518763ffffffff1660e01b81526004016107ab959493929190611909565b60206040518083038160008887f1935050505080156107e857506040513d601f19601f820116820180604052508101906107e5919061197c565b60015b610867573d8060008114610818576040519150601f19603f3d011682016040523d82523d6000602084013e61081d565b606091505b507fffdd6142bbb721f3400e3908b04b86f60649b2e4d191e3f4c50c32c3e6471d2f61084882610eef565b60405161085591906119ed565b60405180910390a1600291505061086d565b50600190505b806004600084815260200190815260200160002060006101000a81548160ff021916908360028111156108a3576108a2610fd1565b5b02179055508773ffffffffffffffffffffffffffffffffffffffff167f04214a849019ea3548afcedee810b5bc1680cfb64e22fdf9051a823f3cdfea6583838d8a6040516108f49493929190611a0f565b60405180910390a250505050505050505050565b610910610e23565b73ffffffffffffffffffffffffffffffffffffffff1661092e6104ec565b73ffffffffffffffffffffffffffffffffffffffff1614610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b90611713565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ea90611aa0565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b468503610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9690611b0c565b60405180910390fd5b6000610aac86848461036f565b905080341015610af1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae890611b78565b60405180910390fd5b600160149054906101000a900467ffffffffffffffff1667ffffffffffffffff16863373ffffffffffffffffffffffffffffffffffffffff167f4679cb14e22de98156c0e8896d3d05a0ae587315dfbb2abcbeec6ae4f0144549468b8a8a8a8a34604051610b659796959493929190611b98565b60405180910390a43460026000828254610b7f9190611c2c565b925050819055506001601481819054906101000a900467ffffffffffffffff16610ba890611c82565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050505050565b600160149054906101000a900467ffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600086864687878787604051602001610c369796959493929190611cb2565b6040516020818303038152906040528051906020012090509695505050505050565b610c60610e23565b73ffffffffffffffffffffffffffffffffffffffff16610c7e6104ec565b73ffffffffffffffffffffffffffffffffffffffff1614610cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccb90611713565b60405180910390fd5b600060025490508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d21573d6000803e3d6000fd5b506002600090555050565b610d34610e23565b73ffffffffffffffffffffffffffffffffffffffff16610d526104ec565b73ffffffffffffffffffffffffffffffffffffffff1614610da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9f90611713565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0e90611d8e565b60405180910390fd5b610e2081610e2b565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060604482511015610f38576040518060400160405280601d81526020017f5472616e73616374696f6e2072657665727465642073696c656e746c790000008152509050610f55565b60048201915081806020019051810190610f529190611ecf565b90505b919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610f8181610f6e565b8114610f8c57600080fd5b50565b600081359050610f9e81610f78565b92915050565b600060208284031215610fba57610fb9610f64565b5b6000610fc884828501610f8f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061101157611010610fd1565b5b50565b600081905061102282611000565b919050565b600061103282611014565b9050919050565b61104281611027565b82525050565b600060208201905061105d6000830184611039565b92915050565b6000819050919050565b61107681611063565b811461108157600080fd5b50565b6000813590506110938161106d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126110be576110bd611099565b5b8235905067ffffffffffffffff8111156110db576110da61109e565b5b6020830191508360018202830111156110f7576110f66110a3565b5b9250929050565b60008060006040848603121561111757611116610f64565b5b600061112586828701611084565b935050602084013567ffffffffffffffff81111561114657611145610f69565b5b611152868287016110a8565b92509250509250925092565b61116781611063565b82525050565b6000602082019050611182600083018461115e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111b382611188565b9050919050565b6111c3816111a8565b82525050565b60006020820190506111de60008301846111ba565b92915050565b600381106111f157600080fd5b50565b600081359050611203816111e4565b92915050565b600080604083850312156112205761121f610f64565b5b600061122e85828601610f8f565b925050602061123f858286016111f4565b9150509250929050565b611252816111a8565b811461125d57600080fd5b50565b60008135905061126f81611249565b92915050565b60008060008060008060008060e0898b03121561129557611294610f64565b5b60006112a38b828c01611084565b98505060206112b48b828c01610f8f565b97505060406112c58b828c01611260565b96505060606112d68b828c01611084565b95505060806112e78b828c01611084565b94505060a089013567ffffffffffffffff81111561130857611307610f69565b5b6113148b828c016110a8565b935093505060c06113278b828c01610f8f565b9150509295985092959890939650565b60006020828403121561134d5761134c610f64565b5b600061135b84828501611260565b91505092915050565b6000806000806000806080878903121561138157611380610f64565b5b600061138f89828a01610f8f565b96505060206113a089828a01611084565b955050604087013567ffffffffffffffff8111156113c1576113c0610f69565b5b6113cd89828a016110a8565b9450945050606087013567ffffffffffffffff8111156113f0576113ef610f69565b5b6113fc89828a016110a8565b92509250509295509295509295565b600067ffffffffffffffff82169050919050565b6114288161140b565b82525050565b6000602082019050611443600083018461141f565b92915050565b60008060008060008060a0878903121561146657611465610f64565b5b600061147489828a01611084565b965050602061148589828a01610f8f565b955050604061149689828a01611260565b94505060606114a789828a01611084565b935050608087013567ffffffffffffffff8111156114c8576114c7610f69565b5b6114d489828a016110a8565b92509250509295509295509295565b6114ec81610f6e565b82525050565b600060208201905061150760008301846114e3565b92915050565b600061151882611188565b9050919050565b6115288161150d565b811461153357600080fd5b50565b6000813590506115458161151f565b92915050565b60006020828403121561156157611560610f64565b5b600061156f84828501611536565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006115b58385611578565b93506115c2838584611589565b6115cb83611598565b840190509392505050565b60006040820190506115eb600083018661115e565b81810360208301526115fe8184866115a9565b9050949350505050565b6000815190506116178161106d565b92915050565b60006020828403121561163357611632610f64565b5b600061164184828501611608565b91505092915050565b600082825260208201905092915050565b7f466565206e6f7420736574000000000000000000000000000000000000000000600082015250565b6000611691600b8361164a565b915061169c8261165b565b602082019050919050565b600060208201905081810360008301526116c081611684565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006116fd60208361164a565b9150611708826116c7565b602082019050919050565b6000602082019050818103600083015261172c816116f0565b9050919050565b7f496e636f7272656374206d6573736167654964207375626d6974746564000000600082015250565b6000611769601d8361164a565b915061177482611733565b602082019050919050565b600060208201905081810360008301526117988161175c565b9050919050565b7f4d65737361676520616c72656164792065786563757465640000000000000000600082015250565b60006117d560188361164a565b91506117e08261179f565b602082019050919050565b60006020820190508181036000830152611804816117c8565b9050919050565b600081519050919050565b60005b83811015611834578082015181840152602081019050611819565b83811115611843576000848401525b50505050565b60006118548261180b565b61185e8185611578565b935061186e818560208601611816565b61187781611598565b840191505092915050565b6000602082019050818103600083015261189c8184611849565b905092915050565b60008115159050919050565b6118b9816118a4565b81146118c457600080fd5b50565b6000815190506118d6816118b0565b92915050565b6000602082840312156118f2576118f1610f64565b5b6000611900848285016118c7565b91505092915050565b600060808201905061191e60008301886114e3565b61192b602083018761115e565b818103604083015261193e8185876115a9565b905061194d60608301846111ba565b9695505050505050565b6002811061196457600080fd5b50565b60008151905061197681611957565b92915050565b60006020828403121561199257611991610f64565b5b60006119a084828501611967565b91505092915050565b600081519050919050565b60006119bf826119a9565b6119c9818561164a565b93506119d9818560208601611816565b6119e281611598565b840191505092915050565b60006020820190508181036000830152611a0781846119b4565b905092915050565b6000608082019050611a2460008301876114e3565b611a316020830186611039565b611a3e604083018561141f565b611a4b606083018461141f565b95945050505050565b7f43616e6e6f742073657420746f20300000000000000000000000000000000000600082015250565b6000611a8a600f8361164a565b9150611a9582611a54565b602082019050919050565b60006020820190508181036000830152611ab981611a7d565b9050919050565b7f496e76616c696420636861696e49640000000000000000000000000000000000600082015250565b6000611af6600f8361164a565b9150611b0182611ac0565b602082019050919050565b60006020820190508181036000830152611b2581611ae9565b9050919050565b7f496e7375666669656e7420676173206665650000000000000000000000000000600082015250565b6000611b6260128361164a565b9150611b6d82611b2c565b602082019050919050565b60006020820190508181036000830152611b9181611b55565b9050919050565b600060a082019050611bad600083018a61115e565b611bba60208301896114e3565b8181036040830152611bcd8187896115a9565b90508181036060830152611be28185876115a9565b9050611bf1608083018461115e565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c3782611063565b9150611c4283611063565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c7757611c76611bfd565b5b828201905092915050565b6000611c8d8261140b565b915067ffffffffffffffff8203611ca757611ca6611bfd565b5b600182019050919050565b600060c082019050611cc7600083018a61115e565b611cd460208301896114e3565b611ce1604083018861115e565b611cee60608301876111ba565b611cfb608083018661115e565b81810360a0830152611d0e8184866115a9565b905098975050505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611d7860268361164a565b9150611d8382611d1c565b604082019050919050565b60006020820190508181036000830152611da781611d6b565b9050919050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611deb82611598565b810181811067ffffffffffffffff82111715611e0a57611e09611db3565b5b80604052505050565b6000611e1d610f5a565b9050611e298282611de2565b919050565b600067ffffffffffffffff821115611e4957611e48611db3565b5b611e5282611598565b9050602081019050919050565b6000611e72611e6d84611e2e565b611e13565b905082815260208101848484011115611e8e57611e8d611dae565b5b611e99848285611816565b509392505050565b600082601f830112611eb657611eb5611099565b5b8151611ec6848260208601611e5f565b91505092915050565b600060208284031215611ee557611ee4610f64565b5b600082015167ffffffffffffffff811115611f0357611f02610f69565b5b611f0f84828501611ea1565b9150509291505056fea2646970667358221220b1a33217dfc97b0d6d2ff3fed0278773659b2480ac74c70ec5e3b3790d24aa8564736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)": {
        "params": {
          "_dstAddress": "Destination address that the arbitrary message will be passed to",
          "_gasLimit": "Gas limit to be passed alongside the message, depending on the fee paid on srcChain",
          "_message": "Arbitrary message payload to pass to the destination chain receiver",
          "_srcAddress": "Originating bytes32 address of the message sender on the srcChain",
          "_srcChainId": "Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendMessage(bytes32,uint256,bytes,bytes)": {
        "params": {
          "_dstChainId": "The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains",
          "_message": "The arbitrary payload to pass to the destination chain receiver",
          "_options": "Versioned struct used to instruct relayer on how to proceed with gas limits",
          "_receiver": "The bytes32 address of the destination contract to be called"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawGasFees(address)": {
        "params": {
          "to": "Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)": {
        "notice": "Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain"
      },
      "sendMessage(bytes32,uint256,bytes,bytes)": {
        "notice": "Sends a message to a receiving contract address on another chain. Sender must make sure that the message is unique and not a duplicate message."
      },
      "updateMessageStatus(bytes32,uint8)": {
        "notice": "CONTRACT CONFIG "
      },
      "withdrawGasFees(address)": {
        "notice": "Withdraws accumulated fees in native gas token, based on fees variable."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 428,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "gasFeePricing",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 430,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "nonce",
        "offset": 20,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 432,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "fees",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 159,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "authVerifier",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 168,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "executedMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_enum(TxStatus)163)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TxStatus)163": {
        "encoding": "inplace",
        "label": "enum MessageBusReceiver.TxStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_enum(TxStatus)163)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum MessageBusReceiver.TxStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(TxStatus)163"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}