{
  "address": "0xA370d7ebaba1df1b0e0cecCd67Fab9Ff1737C4a0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "calculateAddLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "depositAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPoolToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract ISynapse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverGAS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeTokenAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "setInfiniteAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbea432f8a2f246e80701a5f1aba411a14250acdc5226713fa67ce7f2529aaf49",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0xA370d7ebaba1df1b0e0cecCd67Fab9Ff1737C4a0",
    "transactionIndex": 22,
    "gasUsed": "3239394",
    "logsBloom": "0x000000000000000000000000080000000000000000000000008000800400000000040000400040000000000000000000000000000000000000000000002100000000000000000000000000000000004000010000000001000000101000000000000000000a0000000000000000000800000000000000000000000000000002400000000000000001000000000040000000000000000000000000040000000000020000000000000000000180000000000000000000000010000000000000000000000000000000002100000000000000000000000000000001000000000020000010000000000000000104000000020004002000000000000000000000000000",
    "blockHash": "0x4bd6924c0bb65d91e196570326019098323a6d575c63cd0ee031f562e54d0ce4",
    "transactionHash": "0xbea432f8a2f246e80701a5f1aba411a14250acdc5226713fa67ce7f2529aaf49",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 13376496,
        "transactionHash": "0xbea432f8a2f246e80701a5f1aba411a14250acdc5226713fa67ce7f2529aaf49",
        "address": "0xCFc37A6AB183dd4aED08C204D1c2773c0b1BDf46",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a370d7ebaba1df1b0e0ceccd67fab9ff1737c4a0",
          "0x000000000000000000000000ed2a7edd7413021d440b09d654f3b87712abab66"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 99,
        "blockHash": "0x4bd6924c0bb65d91e196570326019098323a6d575c63cd0ee031f562e54d0ce4"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 13376496,
        "transactionHash": "0xbea432f8a2f246e80701a5f1aba411a14250acdc5226713fa67ce7f2529aaf49",
        "address": "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a370d7ebaba1df1b0e0ceccd67fab9ff1737c4a0",
          "0x000000000000000000000000ed2a7edd7413021d440b09d654f3b87712abab66"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 100,
        "blockHash": "0x4bd6924c0bb65d91e196570326019098323a6d575c63cd0ee031f562e54d0ce4"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 13376496,
        "transactionHash": "0xbea432f8a2f246e80701a5f1aba411a14250acdc5226713fa67ce7f2529aaf49",
        "address": "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a370d7ebaba1df1b0e0ceccd67fab9ff1737c4a0",
          "0x000000000000000000000000ed2a7edd7413021d440b09d654f3b87712abab66"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 101,
        "blockHash": "0x4bd6924c0bb65d91e196570326019098323a6d575c63cd0ee031f562e54d0ce4"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 13376496,
        "transactionHash": "0xbea432f8a2f246e80701a5f1aba411a14250acdc5226713fa67ce7f2529aaf49",
        "address": "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a370d7ebaba1df1b0e0ceccd67fab9ff1737c4a0",
          "0x000000000000000000000000ed2a7edd7413021d440b09d654f3b87712abab66"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 102,
        "blockHash": "0x4bd6924c0bb65d91e196570326019098323a6d575c63cd0ee031f562e54d0ce4"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 13376496,
        "transactionHash": "0xbea432f8a2f246e80701a5f1aba411a14250acdc5226713fa67ce7f2529aaf49",
        "address": "0xA370d7ebaba1df1b0e0cecCd67Fab9Ff1737C4a0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0x4bd6924c0bb65d91e196570326019098323a6d575c63cd0ee031f562e54d0ce4"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 13376496,
        "transactionHash": "0xbea432f8a2f246e80701a5f1aba411a14250acdc5226713fa67ce7f2529aaf49",
        "address": "0xA370d7ebaba1df1b0e0cecCd67Fab9Ff1737C4a0",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x000000000000000000000000a370d7ebaba1df1b0e0ceccd67fab9ff1737c4a0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 104,
        "blockHash": "0x4bd6924c0bb65d91e196570326019098323a6d575c63cd0ee031f562e54d0ce4"
      }
    ],
    "blockNumber": 13376496,
    "cumulativeGasUsed": "7887441",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Synapse USD on Avalanche",
    0,
    "0xED2a7edd7413021d440b09D654f3b87712abAB66"
  ],
  "solcInputHash": "981f38149fd49d3cec0cb27aa531a82e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"calculateAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"depositAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPoolToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract ISynapse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverGAS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeTokenAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"setInfiniteAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositAddress(address,address)\":{\"returns\":{\"_0\":\"Address to transfer tokens in order for swap() to work\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"query(uint256,address,address)\":{\"params\":{\"amountIn\":\"input amount in starting token\",\"tokenIn\":\"ERC20 token being sold\",\"tokenOut\":\"ERC20 token being bought\"}},\"recoverERC20(address)\":{\"params\":{\"token\":\"token to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeTokenAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setSwapGasEstimate(uint256)\":{\"details\":\"this is estimated amount of gas that's used by swap() implementation\"},\"swap(uint256,address,address,address)\":{\"params\":{\"amountIn\":\"input amount in starting token\",\"to\":\"address where swapped funds should be sent to\",\"tokenIn\":\"ERC20 token being sold\",\"tokenOut\":\"ERC20 token being bought\"},\"returns\":{\"amountOut\":\"amount of tokenOut tokens received in swap\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"query(uint256,address,address)\":{\"notice\":\"Get query for a swap through this adapter\"},\"recoverERC20(address)\":{\"notice\":\"Recover ERC20 from contract\"},\"recoverGAS()\":{\"notice\":\"Recover GAS from contract\"},\"revokeTokenAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"swap(uint256,address,address,address)\":{\"notice\":\"Execute a swap with given input amount of tokens from tokenIn to tokenOut,         assuming input tokens were transferred to depositAddress(tokenIn, tokenOut)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/router/adapters/synapse/SynapseBaseAdapter.sol\":\"SynapseBaseAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.4.2/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-solc8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-solc8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20 as _IERC20} from \\\"@openzeppelin/contracts-solc8/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 is _IERC20 {\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function mint(address to, uint256 amount) external; // only tokens that support minting\\n}\\n\",\"keccak256\":\"0x94eaff4005f7a976379e01f0d95693e02299589620b0fb61d708f9b400399995\",\"license\":\"MIT\"},\"@synapseprotocol/sol-lib/contracts/solc8/erc20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-solc8/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n    unchecked {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        uint256 newAllowance = oldAllowance - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x869a81fbfe37ebfd330b4d032354495f120fe74ab896436475d0bcdda2ba6d9b\",\"license\":\"MIT\"},\"@synapseprotocol/sol-lib/contracts/universal/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWETH9 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    receive() external payable;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xa6fc99a6e06ed0d13dbccd795a894ba71f3c6963dd4e0843b50069c0f2b392b8\",\"license\":\"MIT\"},\"contracts/router/Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAdapter} from \\\"./interfaces/IAdapter.sol\\\";\\n\\nimport {IERC20} from \\\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\\\";\\nimport {IWETH9} from \\\"@synapseprotocol/sol-lib/contracts/universal/interfaces/IWETH9.sol\\\";\\nimport {SafeERC20} from \\\"@synapseprotocol/sol-lib/contracts/solc8/erc20/SafeERC20.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts-4.4.2/access/Ownable.sol\\\";\\n\\n// solhint-disable reason-string\\n\\nabstract contract Adapter is Ownable, IAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    string public name;\\n    uint256 public swapGasEstimate;\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n\\n    constructor(string memory _name, uint256 _swapGasEstimate) {\\n        name = _name;\\n        setSwapGasEstimate(_swapGasEstimate);\\n    }\\n\\n    /**\\n     * @notice Fallback function\\n     * @dev use recoverGAS() to recover GAS sent to this contract\\n     */\\n    receive() external payable {\\n        // silence the linter\\n        this;\\n    }\\n\\n    /// @dev this is estimated amount of gas that's used by swap() implementation\\n    function setSwapGasEstimate(uint256 _swapGasEstimate) public onlyOwner {\\n        swapGasEstimate = _swapGasEstimate;\\n        emit UpdatedGasEstimate(address(this), _swapGasEstimate);\\n    }\\n\\n    // -- RESTRICTED ALLOWANCE FUNCTIONS --\\n\\n    function setInfiniteAllowance(IERC20 token, address spender)\\n        external\\n        onlyOwner\\n    {\\n        _setInfiniteAllowance(token, spender);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     *\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeTokenAllowance(IERC20 token, address spender)\\n        external\\n        onlyOwner\\n    {\\n        token.safeApprove(spender, 0);\\n    }\\n\\n    // -- RESTRICTED RECOVER TOKEN FUNCTIONS --\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param token token to recover\\n     */\\n    function recoverERC20(IERC20 token) external onlyOwner {\\n        uint256 amount = token.balanceOf(address(this));\\n        require(amount > 0, \\\"Adapter: Nothing to recover\\\");\\n\\n        emit Recovered(address(token), amount);\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Recover GAS from contract\\n     */\\n    function recoverGAS() external onlyOwner {\\n        uint256 amount = address(this).balance;\\n        require(amount > 0, \\\"Adapter: Nothing to recover\\\");\\n\\n        emit Recovered(address(0), amount);\\n        //solhint-disable-next-line\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"GAS transfer failed\\\");\\n    }\\n\\n    /**\\n     * @return Address to transfer tokens in order for swap() to work\\n     */\\n\\n    function depositAddress(address tokenIn, address tokenOut)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _depositAddress(tokenIn, tokenOut);\\n    }\\n\\n    /**\\n     * @notice Get query for a swap through this adapter\\n     *\\n     * @param amountIn input amount in starting token\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     */\\n    function query(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint256) {\\n        if (\\n            amountIn == 0 ||\\n            tokenIn == tokenOut ||\\n            !_checkTokens(tokenIn, tokenOut)\\n        ) {\\n            return 0;\\n        }\\n        return _query(amountIn, tokenIn, tokenOut);\\n    }\\n\\n    /**\\n     * @notice Execute a swap with given input amount of tokens from tokenIn to tokenOut,\\n     *         assuming input tokens were transferred to depositAddress(tokenIn, tokenOut)\\n     *\\n     * @param amountIn input amount in starting token\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     * @param to address where swapped funds should be sent to\\n     *\\n     * @return amountOut amount of tokenOut tokens received in swap\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) external returns (uint256 amountOut) {\\n        require(amountIn != 0, \\\"Adapter: Insufficient input amount\\\");\\n        require(to != address(0), \\\"Adapter: to cannot be zero address\\\");\\n        require(tokenIn != tokenOut, \\\"Adapter: Tokens must differ\\\");\\n        require(_checkTokens(tokenIn, tokenOut), \\\"Adapter: unknown tokens\\\");\\n        _approveIfNeeded(tokenIn, amountIn);\\n        amountOut = _swap(amountIn, tokenIn, tokenOut, to);\\n    }\\n\\n    // -- INTERNAL FUNCTIONS\\n\\n    /**\\n     * @notice Return expected funds to user\\n     *\\n     * @dev this will do nothing, if funds need to stay in this contract\\n     *\\n     * @param token address\\n     * @param amount tokens to return\\n     * @param to address where funds should be sent to\\n     */\\n    function _returnTo(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) internal {\\n        if (address(this) != to) {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check allowance, and update if it is not big enough\\n     *\\n     * @param token token to check\\n     * @param amount minimum allowance that we need\\n     * @param spender address that will be given allowance\\n     */\\n    function _checkAllowance(\\n        IERC20 token,\\n        uint256 amount,\\n        address spender\\n    ) internal {\\n        uint256 _allowance = token.allowance(address(this), spender);\\n        if (_allowance < amount) {\\n            // safeApprove should only be called when setting an initial allowance,\\n            // or when resetting it to zero. (c) openzeppelin\\n            if (_allowance != 0) {\\n                token.safeApprove(spender, 0);\\n            }\\n            token.safeApprove(spender, UINT_MAX);\\n        }\\n    }\\n\\n    function _setInfiniteAllowance(IERC20 token, address spender) internal {\\n        _checkAllowance(token, UINT_MAX, spender);\\n    }\\n\\n    // -- INTERNAL VIRTUAL FUNCTIONS\\n\\n    /**\\n     * @notice Approves token for the underneath swapper to use\\n     *\\n     * @dev Implement via _checkAllowance(tokenIn, amount, POOL)\\n     *      if actually needed\\n     */\\n    function _approveIfNeeded(address, uint256) internal virtual {\\n        this;\\n    }\\n\\n    /**\\n     * @notice Checks if a swap between two tokens is supported by adapter\\n     */\\n    function _checkTokens(address, address)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Internal implementation for depositAddress\\n     *\\n     * @dev This aims to reduce the amount of extra token transfers:\\n     *      some (1) of underneath swappers will have the ability to receive tokens and then swap,\\n     *      while some (2) will only be able to pull tokens while swapping.\\n     *      Use swapper address for (1) and Adapter address for (2)\\n     */\\n    function _depositAddress(address tokenIn, address tokenOut)\\n        internal\\n        view\\n        virtual\\n        returns (address);\\n\\n    /**\\n     * @notice Internal implementation of a swap\\n     *\\n     * @dev 1. All variables are already checked\\n     *      2. Use _returnTo(tokenOut, amountOut, to) to return tokens, only if\\n     *         underneath swapper can't send swapped tokens to arbitrary address.\\n     *      3. Wrapping is handled external to this function\\n     *\\n     * @param amountIn amount being sold\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     * @param to Where received tokens are sent to\\n     *\\n     * @return Amount of tokenOut tokens received in swap\\n     */\\n    function _swap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) internal virtual returns (uint256);\\n\\n    /**\\n     * @notice Internal implementation of query\\n     *\\n     * @dev All variables are already checked.\\n     *      This should ALWAYS return amountOut such as: the swapper underneath\\n     *      is able to produce AT LEAST amountOut in exchange for EXACTLY amountIn\\n     *      For efficiency reasons, returning the exact quote is preferable,\\n     *      however, if the swapper doesn't have a reliable quoting method,\\n     *      it's safe to underquote the swapped amount\\n     *\\n     * @param amountIn input amount in starting token\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     */\\n    function _query(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6397ff5e484aa13adc4896a80b045149d470d5d62ebb937c101c180e4dc7ffe\",\"license\":\"MIT\"},\"contracts/router/adapters/interfaces/ISynapse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\\\";\\n\\ninterface ISynapse {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            uint256 initialA,\\n            uint256 futureA,\\n            uint256 initialATime,\\n            uint256 futureATime,\\n            uint256 swapFee,\\n            uint256 adminFee,\\n            address lpToken\\n        );\\n}\\n\",\"keccak256\":\"0x975387264a675e4677ab9cd946d3698b493af98d4d2f6708a7c7676e6c18e657\",\"license\":\"MIT\"},\"contracts/router/adapters/synapse/SynapseBaseAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ISynapse} from \\\"../interfaces/ISynapse.sol\\\";\\nimport {Adapter} from \\\"../../Adapter.sol\\\";\\nimport {SwapCalculator} from \\\"../../helper/SwapCalculator.sol\\\";\\n\\nimport {IERC20} from \\\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\\\";\\n\\n//solhint-disable not-rely-on-time\\n\\ncontract SynapseBaseAdapter is SwapCalculator, Adapter {\\n    mapping(address => bool) public isPoolToken;\\n    mapping(address => uint256) public tokenIndex;\\n\\n    constructor(\\n        string memory _name,\\n        uint256 _swapGasEstimate,\\n        address _pool\\n    ) SwapCalculator(ISynapse(_pool)) Adapter(_name, _swapGasEstimate) {\\n        this;\\n    }\\n\\n    function _addPoolToken(IERC20 token, uint256 index)\\n        internal\\n        virtual\\n        override\\n    {\\n        SwapCalculator._addPoolToken(token, index);\\n        _registerPoolToken(token, index);\\n    }\\n\\n    function _registerPoolToken(IERC20 token, uint256 index) internal {\\n        isPoolToken[address(token)] = true;\\n        tokenIndex[address(token)] = index;\\n        _setInfiniteAllowance(token, address(pool));\\n    }\\n\\n    function _checkTokens(address _tokenIn, address _tokenOut)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return isPoolToken[_tokenIn] && isPoolToken[_tokenOut];\\n    }\\n\\n    function _depositAddress(address, address)\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) internal virtual override returns (uint256 _amountOut) {\\n        _amountOut = pool.swap(\\n            uint8(tokenIndex[_tokenIn]),\\n            uint8(tokenIndex[_tokenOut]),\\n            _amountIn,\\n            0,\\n            block.timestamp\\n        );\\n\\n        _returnTo(_tokenOut, _amountOut, _to);\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual override returns (uint256 _amountOut) {\\n        if (pool.paused()) {\\n            return 0;\\n        }\\n        try\\n            pool.calculateSwap(\\n                uint8(tokenIndex[_tokenIn]),\\n                uint8(tokenIndex[_tokenOut]),\\n                _amountIn\\n            )\\n        returns (uint256 amountOut) {\\n            _amountOut = amountOut;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd7dabde790886e54f6bf14226958cff8d09a9365eef3b89dbcb9a9c68924e465\",\"license\":\"MIT\"},\"contracts/router/helper/SwapCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../adapters/interfaces/ISynapse.sol\\\";\\n\\ninterface IERC20Decimals is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract SwapCalculator {\\n    // Struct storing variables used in calculations in the\\n    // {add,remove}Liquidity functions to avoid stack too deep errors\\n    struct ManageLiquidityInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 preciseA;\\n        uint256 totalSupply;\\n        uint256[] balances;\\n        uint256[] multipliers;\\n    }\\n\\n    ISynapse public immutable pool;\\n    IERC20 public immutable lpToken;\\n    uint256 public immutable numTokens;\\n    uint256 public swapFee;\\n    uint256 private swapFeePerToken;\\n\\n    IERC20[] public poolTokens;\\n    uint256[] private tokenPrecisionMultipliers;\\n\\n    uint8 private constant POOL_PRECISION_DECIMALS = 18;\\n    uint256 private constant A_PRECISION = 100;\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    constructor(ISynapse _pool) {\\n        pool = _pool;\\n        (, , , , uint256 _swapFee, , address _lpToken) = _pool.swapStorage();\\n        lpToken = IERC20(_lpToken);\\n        // set numTokens prior to swapFee\\n        numTokens = _setPoolTokens(_pool);\\n        _setSwapFee(_swapFee);\\n    }\\n\\n    function updateSwapFee() external {\\n        (, , , , uint256 _swapFee, , ) = pool.swapStorage();\\n        _setSwapFee(_swapFee);\\n    }\\n\\n    function calculateAddLiquidity(uint256[] memory _amounts)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            _amounts.length == numTokens,\\n            \\\"Amounts must match pooled tokens\\\"\\n        );\\n        uint256 _numTokens = numTokens;\\n\\n        ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n            0,\\n            0,\\n            pool.getAPrecise(),\\n            lpToken.totalSupply(),\\n            new uint256[](_numTokens),\\n            tokenPrecisionMultipliers\\n        );\\n\\n        uint256[] memory newBalances = new uint256[](_numTokens);\\n\\n        for (uint8 _i = 0; _i < _numTokens; _i++) {\\n            v.balances[_i] = ISynapse(pool).getTokenBalance(_i);\\n            newBalances[_i] = v.balances[_i] + _amounts[_i];\\n        }\\n\\n        if (v.totalSupply != 0) {\\n            v.d0 = _getD(_xp(v.balances, v.multipliers), v.preciseA);\\n        } else {\\n            // pool is empty => all amounts must be >0\\n            for (uint8 i = 0; i < _numTokens; i++) {\\n                require(_amounts[i] > 0, \\\"Must supply all tokens in pool\\\");\\n            }\\n        }\\n\\n        // invariant after change\\n        v.d1 = _getD(_xp(newBalances, v.multipliers), v.preciseA);\\n        require(v.d1 > v.d0, \\\"D should increase\\\");\\n\\n        if (v.totalSupply == 0) {\\n            return v.d1;\\n        } else {\\n            for (uint256 _i = 0; _i < _numTokens; _i++) {\\n                uint256 idealBalance = (v.d1 * v.balances[_i]) / v.d0;\\n                uint256 fees = (swapFeePerToken *\\n                    _diff(newBalances[_i], idealBalance)) / FEE_DENOMINATOR;\\n                newBalances[_i] = newBalances[_i] - fees;\\n            }\\n            v.d1 = _getD(_xp(newBalances, v.multipliers), v.preciseA);\\n            return ((v.d1 - v.d0) * v.totalSupply) / v.d0;\\n        }\\n    }\\n\\n    function _setPoolTokens(ISynapse _pool) internal returns (uint256) {\\n        for (uint8 i = 0; true; i++) {\\n            try _pool.getToken(i) returns (IERC20 token) {\\n                _addPoolToken(token, i);\\n            } catch {\\n                break;\\n            }\\n        }\\n        return tokenPrecisionMultipliers.length;\\n    }\\n\\n    function _addPoolToken(IERC20 token, uint256) internal virtual {\\n        IERC20Decimals _token = IERC20Decimals(address(token));\\n        tokenPrecisionMultipliers.push(\\n            10**uint256(POOL_PRECISION_DECIMALS - _token.decimals())\\n        );\\n        poolTokens.push(token);\\n    }\\n\\n    function _setSwapFee(uint256 _swapFee) internal {\\n        swapFee = _swapFee;\\n        swapFeePerToken = (swapFee * numTokens) / ((numTokens - 1) * 4);\\n    }\\n\\n    /**\\n     * @notice Get absolute difference between two values\\n     * @return abs(_a - _b)\\n     */\\n    function _diff(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        if (_a > _b) {\\n            return _a - _b;\\n        } else {\\n            return _b - _a;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get pool balances adjusted, as if all tokens had 18 decimals\\n     */\\n    function _xp(\\n        uint256[] memory balances,\\n        uint256[] memory precisionMultipliers\\n    ) internal pure returns (uint256[] memory) {\\n        uint256 _numTokens = balances.length;\\n        require(\\n            _numTokens == precisionMultipliers.length,\\n            \\\"Balances must match multipliers\\\"\\n        );\\n        uint256[] memory xp = new uint256[](_numTokens);\\n        for (uint256 i = 0; i < _numTokens; i++) {\\n            xp[i] = balances[i] * precisionMultipliers[i];\\n        }\\n        return xp;\\n    }\\n\\n    /**\\n     * @notice Get D: pool invariant\\n     */\\n    function _getD(uint256[] memory xp, uint256 a)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 _numTokens = xp.length;\\n        uint256 s;\\n        for (uint256 _i = 0; _i < _numTokens; _i++) {\\n            s = s + xp[_i];\\n        }\\n        if (s == 0) {\\n            return 0;\\n        }\\n\\n        uint256 prevD;\\n        uint256 d = s;\\n        uint256 nA = a * _numTokens;\\n\\n        for (uint256 _i = 0; _i < 256; _i++) {\\n            uint256 dP = d;\\n            for (uint256 j = 0; j < _numTokens; j++) {\\n                dP = (dP * d) / (xp[j] * _numTokens);\\n                // If we were to protect the division loss we would have to keep the denominator separate\\n                // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n                // dP = dP * D * D * D * ... overflow!\\n            }\\n            prevD = d;\\n            d =\\n                (((nA * s) / A_PRECISION + dP * _numTokens) * d) /\\n                (((nA - A_PRECISION) * d) /\\n                    A_PRECISION +\\n                    (_numTokens + 1) *\\n                    dP);\\n\\n            if (_diff(d, prevD) <= 1) {\\n                return d;\\n            }\\n        }\\n\\n        revert(\\\"D does not converge\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x187e398490d762a082c1e24b1a3aa4dc0331c19a0a856ad7bd9df1b0578b399d\",\"license\":\"MIT\"},\"contracts/router/interfaces/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6;\\n\\ninterface IAdapter {\\n    event UpdatedGasEstimate(address indexed adapter, uint256 newEstimate);\\n\\n    event Recovered(address indexed asset, uint256 amount);\\n\\n    function name() external view returns (string memory);\\n\\n    function swapGasEstimate() external view returns (uint256);\\n\\n    function depositAddress(address tokenIn, address tokenOut)\\n        external\\n        view\\n        returns (address);\\n\\n    function swap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) external returns (uint256);\\n\\n    function query(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x11623bb390ba5754681690892878a47c09eea91b3d60b8eaa3ee12105bfab5b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101795760003560e01c806388156e65116100cb578063bc8814671161007f578063e61cf1dc11610059578063e61cf1dc14610464578063ef99893a14610484578063f2fde38b146104a457600080fd5b8063bc881467146103e4578063dced1a5a14610404578063de260f371461042457600080fd5b80638e499bcf116100b05780638e499bcf146103705780639e8c708e146103a4578063a9e40e07146103c457600080fd5b806388156e65146103255780638da5cb5b1461034557600080fd5b806354cf2aeb1161012d57806369cff80d1161010757806369cff80d146102da578063715018a6146102f057806384a33e631461030557600080fd5b806354cf2aeb1461027b5780635fcbd2851461029157806366b866f6146102c557600080fd5b80630dcaea9d1161015e5780630dcaea9d146101c757806316f0115b146101f5578063427f91a61461024e57600080fd5b806306fdde03146101855780630c472afd146101b057600080fd5b3661018057005b600080fd5b34801561019157600080fd5b5061019a6104c4565b6040516101a79190612690565b60405180910390f35b3480156101bc57600080fd5b506101c5610552565b005b3480156101d357600080fd5b506101e76101e2366004612710565b6105f7565b6040519081526020016101a7565b34801561020157600080fd5b506102297f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a7565b34801561025a57600080fd5b506101e761026936600461280e565b60086020526000908152604090205481565b34801561028757600080fd5b506101e760005481565b34801561029d57600080fd5b506102297f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d157600080fd5b506101c5610cd3565b3480156102e657600080fd5b506101e760065481565b3480156102fc57600080fd5b506101c5610ea8565b34801561031157600080fd5b506101c561032036600461282b565b610f35565b34801561033157600080fd5b506101e7610340366004612844565b610ff3565b34801561035157600080fd5b5060045473ffffffffffffffffffffffffffffffffffffffff16610229565b34801561037c57600080fd5b506101e77f000000000000000000000000000000000000000000000000000000000000000081565b3480156103b057600080fd5b506101c56103bf36600461280e565b611237565b3480156103d057600080fd5b506102296103df366004612897565b611426565b3480156103f057600080fd5b506101c56103ff366004612897565b611433565b34801561041057600080fd5b5061022961041f36600461282b565b6114d6565b34801561043057600080fd5b5061045461043f36600461280e565b60076020526000908152604090205460ff1681565b60405190151581526020016101a7565b34801561047057600080fd5b506101c561047f366004612897565b61150d565b34801561049057600080fd5b506101e761049f3660046128d0565b611598565b3480156104b057600080fd5b506101c56104bf36600461280e565b611606565b600580546104d190612912565b80601f01602080910402602001604051908101604052809291908181526020018280546104fd90612912565b801561054a5780601f1061051f5761010080835404028352916020019161054a565b820191906000526020600020905b81548152906001019060200180831161052d57829003601f168201915b505050505081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635fd65f0f6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156105bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e39190612966565b50509450505050506105f481611a65565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000825114610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f416d6f756e7473206d757374206d6174636820706f6f6c656420746f6b656e7360448201526064015b60405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000905060006040518060c0016040528060008152602001600081526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630ba819596040518163ffffffff1660e01b8152600401602060405180830381865afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075791906129c6565b81526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb91906129c6565b81526020018367ffffffffffffffff811115610809576108096126e1565b604051908082528060200260200182016040528015610832578160200160208202803683370190505b508152602001600380548060200260200160405190810160405280929190818152602001828054801561088457602002820191906000526020600020905b815481526020019060010190808311610870575b5050505050815250905060008267ffffffffffffffff8111156108a9576108a96126e1565b6040519080825280602002602001820160405280156108d2578160200160208202803683370190505b50905060005b838160ff161015610a33576040517f91ceb3eb00000000000000000000000000000000000000000000000000000000815260ff821660048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906391ceb3eb90602401602060405180830381865afa158015610970573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099491906129c6565b83608001518260ff16815181106109ad576109ad6129df565b602002602001018181525050858160ff16815181106109ce576109ce6129df565b602002602001015183608001518260ff16815181106109ef576109ef6129df565b6020026020010151610a019190612a3d565b828260ff1681518110610a1657610a166129df565b602090810291909101015280610a2b81612a55565b9150506108d8565b50606082015115610a6457610a5d610a5383608001518460a00151611ade565b8360400151611c16565b8252610b0c565b60005b838160ff161015610b0a576000868260ff1681518110610a8957610a896129df565b602002602001015111610af8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4d75737420737570706c7920616c6c20746f6b656e7320696e20706f6f6c0000604482015260640161067f565b80610b0281612a55565b915050610a67565b505b610b1d610a53828460a00151611ade565b60208301819052825110610b8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f442073686f756c6420696e637265617365000000000000000000000000000000604482015260640161067f565b6060820151610ba25750602001519392505050565b60005b83811015610c89576000836000015184608001518381518110610bca57610bca6129df565b60200260200101518560200151610be19190612a75565b610beb9190612ab2565b905060006402540be400610c18858581518110610c0a57610c0a6129df565b602002602001015184611e04565b600154610c259190612a75565b610c2f9190612ab2565b905080848481518110610c4457610c446129df565b6020026020010151610c569190612aed565b848481518110610c6857610c686129df565b60200260200101818152505050508080610c8190612b04565b915050610ba5565b50610c9b610a53828460a00151611ade565b60208301819052825160608401519091610cb6908390612aed565b610cc09190612a75565b610cca9190612ab2565b95945050505050565b60045473ffffffffffffffffffffffffffffffffffffffff163314610d54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b4780610dbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a204e6f7468696e6720746f207265636f7665720000000000604482015260640161067f565b6040518181526000907f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289060200160405180910390a2604051600090339083908381818185875af1925050503d8060008114610e34576040519150601f19603f3d011682016040523d82523d6000602084013e610e39565b606091505b5050905080610ea4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f474153207472616e73666572206661696c656400000000000000000000000000604482015260640161067f565b5050565b60045473ffffffffffffffffffffffffffffffffffffffff163314610f29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b610f336000611e29565b565b60045473ffffffffffffffffffffffffffffffffffffffff163314610fb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b600681905560405181815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9060200160405180910390a250565b600084611082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f416461707465723a20496e73756666696369656e7420696e70757420616d6f7560448201527f6e74000000000000000000000000000000000000000000000000000000000000606482015260840161067f565b73ffffffffffffffffffffffffffffffffffffffff8216611125576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f416461707465723a20746f2063616e6e6f74206265207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161067f565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156111bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a20546f6b656e73206d757374206469666665720000000000604482015260640161067f565b6111c58484611ea0565b61122b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f416461707465723a20756e6b6e6f776e20746f6b656e73000000000000000000604482015260640161067f565b610cca85858585611efe565b60045473ffffffffffffffffffffffffffffffffffffffff1633146112b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611325573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134991906129c6565b9050600081116113b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a204e6f7468696e6720746f207265636f7665720000000000604482015260640161067f565b8173ffffffffffffffffffffffffffffffffffffffff167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28826040516113fd91815260200190565b60405180910390a2610ea473ffffffffffffffffffffffffffffffffffffffff83163383611fff565b6000305b90505b92915050565b60045473ffffffffffffffffffffffffffffffffffffffff1633146114b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b610ea473ffffffffffffffffffffffffffffffffffffffff8316826000611851565b600281815481106114e657600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60045473ffffffffffffffffffffffffffffffffffffffff16331461158e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b610ea48282612055565b60008315806115d257508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b806115e457506115e28383611ea0565b155b156115f1575060006115ff565b6115fc848484612080565b90505b9392505050565b60045473ffffffffffffffffffffffffffffffffffffffff163314611687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067f565b73ffffffffffffffffffffffffffffffffffffffff811661172a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161067f565b6105f481611e29565b600082905060038173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a99190612b3d565b6117b4906012612b60565b6117c29060ff16600a612ca3565b815460018082018455600093845260208420909101919091556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94909416939093179092555050565b8015806118f157506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ef91906129c6565b155b61197d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161067f565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611a519084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261221e565b505050565b60606115fc848460008561232a565b6000819055611a9560017f0000000000000000000000000000000000000000000000000000000000000000612aed565b611aa0906004612a75565b7f0000000000000000000000000000000000000000000000000000000000000000600054611ace9190612a75565b611ad89190612ab2565b60015550565b81518151606091908114611b4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f42616c616e636573206d757374206d61746368206d756c7469706c6965727300604482015260640161067f565b60008167ffffffffffffffff811115611b6957611b696126e1565b604051908082528060200260200182016040528015611b92578160200160208202803683370190505b50905060005b82811015611c0d57848181518110611bb257611bb26129df565b6020026020010151868281518110611bcc57611bcc6129df565b6020026020010151611bde9190612a75565b828281518110611bf057611bf06129df565b602090810291909101015280611c0581612b04565b915050611b98565b50949350505050565b815160009081805b82811015611c5f57858181518110611c3857611c386129df565b602002602001015182611c4b9190612a3d565b915080611c5781612b04565b915050611c1e565b5080611c705760009250505061142d565b60008181611c7e8588612a75565b905060005b610100811015611da1578260005b87811015611ce657878b8281518110611cac57611cac6129df565b6020026020010151611cbe9190612a75565b611cc88684612a75565b611cd29190612ab2565b915080611cde81612b04565b915050611c91565b5083945080876001611cf89190612a3d565b611d029190612a75565b606485611d0f8287612aed565b611d199190612a75565b611d239190612ab2565b611d2d9190612a3d565b84611d388984612a75565b6064611d448a88612a75565b611d4e9190612ab2565b611d589190612a3d565b611d629190612a75565b611d6c9190612ab2565b93506001611d7a8587611e04565b11611d8e578397505050505050505061142d565b5080611d9981612b04565b915050611c83565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4420646f6573206e6f7420636f6e766572676500000000000000000000000000604482015260640161067f565b600081831115611e1f57611e188284612aed565b905061142d565b611e188383612aed565b6004805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604081205460ff16801561142a57505073ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090205460ff16919050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600860205260408082205485841683528183205491517f9169558600000000000000000000000000000000000000000000000000000000815260ff918216600482015291166024820152604481018790526064810182905242608482015290917f0000000000000000000000000000000000000000000000000000000000000000169063916955869060a4016020604051808303816000875af1158015611fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fea91906129c6565b9050611ff78382846124c0565b949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611a519084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016119cf565b610ea4827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836124fe565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121119190612caf565b1561211e575060006115ff565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260086020526040808220548584168352918190205490517fa95b089f00000000000000000000000000000000000000000000000000000000815260ff928316600482015291166024820152604481018690527f00000000000000000000000000000000000000000000000000000000000000009091169063a95b089f90606401602060405180830381865afa925050508015612212575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261220f918101906129c6565b60015b6115fc575060006115ff565b6000612280826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a569092919063ffffffff16565b805190915015611a51578080602001905181019061229e9190612caf565b611a51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161067f565b6060824710156123bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161067f565b73ffffffffffffffffffffffffffffffffffffffff85163b61243a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161067f565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516124639190612cd1565b60006040518083038185875af1925050503d80600081146124a0576040519150601f19603f3d011682016040523d82523d6000602084013e6124a5565b606091505b50915091506124b5828286612611565b979650505050505050565b3073ffffffffffffffffffffffffffffffffffffffff821614611a5157611a5173ffffffffffffffffffffffffffffffffffffffff84168284611fff565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff82811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015612574573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259891906129c6565b90508281101561260b5780156125ca576125ca73ffffffffffffffffffffffffffffffffffffffff8516836000611851565b61260b73ffffffffffffffffffffffffffffffffffffffff8516837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611851565b50505050565b606083156126205750816115ff565b8251156126305782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f9190612690565b60005b8381101561267f578181015183820152602001612667565b8381111561260b5750506000910152565b60208152600082518060208401526126af816040850160208701612664565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561272357600080fd5b823567ffffffffffffffff8082111561273b57600080fd5b818501915085601f83011261274f57600080fd5b813581811115612761576127616126e1565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156127a4576127a46126e1565b6040529182528482019250838101850191888311156127c257600080fd5b938501935b828510156127e0578435845293850193928501926127c7565b98975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146105f457600080fd5b60006020828403121561282057600080fd5b81356115ff816127ec565b60006020828403121561283d57600080fd5b5035919050565b6000806000806080858703121561285a57600080fd5b84359350602085013561286c816127ec565b9250604085013561287c816127ec565b9150606085013561288c816127ec565b939692955090935050565b600080604083850312156128aa57600080fd5b82356128b5816127ec565b915060208301356128c5816127ec565b809150509250929050565b6000806000606084860312156128e557600080fd5b8335925060208401356128f7816127ec565b91506040840135612907816127ec565b809150509250925092565b600181811c9082168061292657607f821691505b60208210811415612960577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600080600080600080600060e0888a03121561298157600080fd5b875196506020880151955060408801519450606088015193506080880151925060a0880151915060c08801516129b6816127ec565b8091505092959891949750929550565b6000602082840312156129d857600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612a5057612a50612a0e565b500190565b600060ff821660ff811415612a6c57612a6c612a0e565b60010192915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612aad57612aad612a0e565b500290565b600082612ae8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015612aff57612aff612a0e565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612b3657612b36612a0e565b5060010190565b600060208284031215612b4f57600080fd5b815160ff811681146115ff57600080fd5b600060ff821660ff841680821015612b7a57612b7a612a0e565b90039392505050565b600181815b80851115612bdc57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612bc257612bc2612a0e565b80851615612bcf57918102915b93841c9390800290612b88565b509250929050565b600082612bf35750600161142d565b81612c005750600061142d565b8160018114612c165760028114612c2057612c3c565b600191505061142d565b60ff841115612c3157612c31612a0e565b50506001821b61142d565b5060208310610133831016604e8410600b8410161715612c5f575081810a61142d565b612c698383612b83565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612c9b57612c9b612a0e565b029392505050565b600061142a8383612be4565b600060208284031215612cc157600080fd5b815180151581146115ff57600080fd5b60008251612ce3818460208701612664565b919091019291505056fea26469706673582212209f7f88a6bc20294e6507c32f1e79675852f79789fcae23d4571f746920ca5f6e64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositAddress(address,address)": {
        "returns": {
          "_0": "Address to transfer tokens in order for swap() to work"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "query(uint256,address,address)": {
        "params": {
          "amountIn": "input amount in starting token",
          "tokenIn": "ERC20 token being sold",
          "tokenOut": "ERC20 token being bought"
        }
      },
      "recoverERC20(address)": {
        "params": {
          "token": "token to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeTokenAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setSwapGasEstimate(uint256)": {
        "details": "this is estimated amount of gas that's used by swap() implementation"
      },
      "swap(uint256,address,address,address)": {
        "params": {
          "amountIn": "input amount in starting token",
          "to": "address where swapped funds should be sent to",
          "tokenIn": "ERC20 token being sold",
          "tokenOut": "ERC20 token being bought"
        },
        "returns": {
          "amountOut": "amount of tokenOut tokens received in swap"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "query(uint256,address,address)": {
        "notice": "Get query for a swap through this adapter"
      },
      "recoverERC20(address)": {
        "notice": "Recover ERC20 from contract"
      },
      "recoverGAS()": {
        "notice": "Recover GAS from contract"
      },
      "revokeTokenAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "swap(uint256,address,address,address)": {
        "notice": "Execute a swap with given input amount of tokens from tokenIn to tokenOut,         assuming input tokens were transferred to depositAddress(tokenIn, tokenOut)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11928,
        "contract": "contracts/router/adapters/synapse/SynapseBaseAdapter.sol:SynapseBaseAdapter",
        "label": "swapFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 11930,
        "contract": "contracts/router/adapters/synapse/SynapseBaseAdapter.sol:SynapseBaseAdapter",
        "label": "swapFeePerToken",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 11934,
        "contract": "contracts/router/adapters/synapse/SynapseBaseAdapter.sol:SynapseBaseAdapter",
        "label": "poolTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_contract(IERC20)3461)dyn_storage"
      },
      {
        "astId": 11937,
        "contract": "contracts/router/adapters/synapse/SynapseBaseAdapter.sol:SynapseBaseAdapter",
        "label": "tokenPrecisionMultipliers",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 389,
        "contract": "contracts/router/adapters/synapse/SynapseBaseAdapter.sol:SynapseBaseAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4048,
        "contract": "contracts/router/adapters/synapse/SynapseBaseAdapter.sol:SynapseBaseAdapter",
        "label": "name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 4050,
        "contract": "contracts/router/adapters/synapse/SynapseBaseAdapter.sol:SynapseBaseAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10306,
        "contract": "contracts/router/adapters/synapse/SynapseBaseAdapter.sol:SynapseBaseAdapter",
        "label": "isPoolToken",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10310,
        "contract": "contracts/router/adapters/synapse/SynapseBaseAdapter.sol:SynapseBaseAdapter",
        "label": "tokenIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)3461)dyn_storage": {
        "base": "t_contract(IERC20)3461",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3461": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}