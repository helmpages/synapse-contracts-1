{
  "address": "0x27440DC7BC9BA0B13279F161FaB3D6316f795E70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2FactoryAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_initCodeHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "depositAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverGAS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeTokenAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "setInfiniteAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd448968dc92f92844bcdd7e1a4ad7b2188854a88cab862f1510e128512f6f31d",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0x27440DC7BC9BA0B13279F161FaB3D6316f795E70",
    "transactionIndex": 20,
    "gasUsed": "1739698",
    "logsBloom": "0x
    "blockHash": "0xb24d88ba4a04953bdfc4b3959c9cd0e9ff5b8c18dc268829ee226e3025ffc811",
    "transactionHash": "0xd448968dc92f92844bcdd7e1a4ad7b2188854a88cab862f1510e128512f6f31d",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 13376537,
        "transactionHash": "0xd448968dc92f92844bcdd7e1a4ad7b2188854a88cab862f1510e128512f6f31d",
        "address": "0x27440DC7BC9BA0B13279F161FaB3D6316f795E70",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9"
        ],
        "data": "0x",
        "logIndex": 83,
        "blockHash": "0xb24d88ba4a04953bdfc4b3959c9cd0e9ff5b8c18dc268829ee226e3025ffc811"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 13376537,
        "transactionHash": "0xd448968dc92f92844bcdd7e1a4ad7b2188854a88cab862f1510e128512f6f31d",
        "address": "0x27440DC7BC9BA0B13279F161FaB3D6316f795E70",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x00000000000000000000000027440dc7bc9ba0b13279f161fab3d6316f795e70"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 84,
        "blockHash": "0xb24d88ba4a04953bdfc4b3959c9cd0e9ff5b8c18dc268829ee226e3025ffc811"
      }
    ],
    "blockNumber": 13376537,
    "cumulativeGasUsed": "5743038",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "TraderJoe on Avalanche",
    0,
    "0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10",
    "0x0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91",
    30
  ],
  "solcInputHash": "981f38149fd49d3cec0cb27aa531a82e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2FactoryAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_initCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"depositAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverGAS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeTokenAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"setInfiniteAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Default UniSwap fee is 0.3% = 30bp\",\"params\":{\"_fee\":\"swap fee, in base points\"}},\"depositAddress(address,address)\":{\"returns\":{\"_0\":\"Address to transfer tokens in order for swap() to work\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"query(uint256,address,address)\":{\"params\":{\"amountIn\":\"input amount in starting token\",\"tokenIn\":\"ERC20 token being sold\",\"tokenOut\":\"ERC20 token being bought\"}},\"recoverERC20(address)\":{\"params\":{\"token\":\"token to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeTokenAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setSwapGasEstimate(uint256)\":{\"details\":\"this is estimated amount of gas that's used by swap() implementation\"},\"swap(uint256,address,address,address)\":{\"params\":{\"amountIn\":\"input amount in starting token\",\"to\":\"address where swapped funds should be sent to\",\"tokenIn\":\"ERC20 token being sold\",\"tokenOut\":\"ERC20 token being bought\"},\"returns\":{\"amountOut\":\"amount of tokenOut tokens received in swap\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"query(uint256,address,address)\":{\"notice\":\"Get query for a swap through this adapter\"},\"recoverERC20(address)\":{\"notice\":\"Recover ERC20 from contract\"},\"recoverGAS()\":{\"notice\":\"Recover GAS from contract\"},\"revokeTokenAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"swap(uint256,address,address,address)\":{\"notice\":\"Execute a swap with given input amount of tokens from tokenIn to tokenOut,         assuming input tokens were transferred to depositAddress(tokenIn, tokenOut)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/router/adapters/uniswap/UniswapV2Adapter.sol\":\"UniswapV2Adapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.4.2/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-solc8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-solc8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20 as _IERC20} from \\\"@openzeppelin/contracts-solc8/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 is _IERC20 {\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function mint(address to, uint256 amount) external; // only tokens that support minting\\n}\\n\",\"keccak256\":\"0x94eaff4005f7a976379e01f0d95693e02299589620b0fb61d708f9b400399995\",\"license\":\"MIT\"},\"@synapseprotocol/sol-lib/contracts/solc8/erc20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-solc8/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n    unchecked {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        uint256 newAllowance = oldAllowance - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x869a81fbfe37ebfd330b4d032354495f120fe74ab896436475d0bcdda2ba6d9b\",\"license\":\"MIT\"},\"@synapseprotocol/sol-lib/contracts/universal/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWETH9 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    receive() external payable;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xa6fc99a6e06ed0d13dbccd795a894ba71f3c6963dd4e0843b50069c0f2b392b8\",\"license\":\"MIT\"},\"contracts/router/Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAdapter} from \\\"./interfaces/IAdapter.sol\\\";\\n\\nimport {IERC20} from \\\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\\\";\\nimport {IWETH9} from \\\"@synapseprotocol/sol-lib/contracts/universal/interfaces/IWETH9.sol\\\";\\nimport {SafeERC20} from \\\"@synapseprotocol/sol-lib/contracts/solc8/erc20/SafeERC20.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts-4.4.2/access/Ownable.sol\\\";\\n\\n// solhint-disable reason-string\\n\\nabstract contract Adapter is Ownable, IAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    string public name;\\n    uint256 public swapGasEstimate;\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n\\n    constructor(string memory _name, uint256 _swapGasEstimate) {\\n        name = _name;\\n        setSwapGasEstimate(_swapGasEstimate);\\n    }\\n\\n    /**\\n     * @notice Fallback function\\n     * @dev use recoverGAS() to recover GAS sent to this contract\\n     */\\n    receive() external payable {\\n        // silence the linter\\n        this;\\n    }\\n\\n    /// @dev this is estimated amount of gas that's used by swap() implementation\\n    function setSwapGasEstimate(uint256 _swapGasEstimate) public onlyOwner {\\n        swapGasEstimate = _swapGasEstimate;\\n        emit UpdatedGasEstimate(address(this), _swapGasEstimate);\\n    }\\n\\n    // -- RESTRICTED ALLOWANCE FUNCTIONS --\\n\\n    function setInfiniteAllowance(IERC20 token, address spender)\\n        external\\n        onlyOwner\\n    {\\n        _setInfiniteAllowance(token, spender);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     *\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeTokenAllowance(IERC20 token, address spender)\\n        external\\n        onlyOwner\\n    {\\n        token.safeApprove(spender, 0);\\n    }\\n\\n    // -- RESTRICTED RECOVER TOKEN FUNCTIONS --\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param token token to recover\\n     */\\n    function recoverERC20(IERC20 token) external onlyOwner {\\n        uint256 amount = token.balanceOf(address(this));\\n        require(amount > 0, \\\"Adapter: Nothing to recover\\\");\\n\\n        emit Recovered(address(token), amount);\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Recover GAS from contract\\n     */\\n    function recoverGAS() external onlyOwner {\\n        uint256 amount = address(this).balance;\\n        require(amount > 0, \\\"Adapter: Nothing to recover\\\");\\n\\n        emit Recovered(address(0), amount);\\n        //solhint-disable-next-line\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"GAS transfer failed\\\");\\n    }\\n\\n    /**\\n     * @return Address to transfer tokens in order for swap() to work\\n     */\\n\\n    function depositAddress(address tokenIn, address tokenOut)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _depositAddress(tokenIn, tokenOut);\\n    }\\n\\n    /**\\n     * @notice Get query for a swap through this adapter\\n     *\\n     * @param amountIn input amount in starting token\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     */\\n    function query(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint256) {\\n        if (\\n            amountIn == 0 ||\\n            tokenIn == tokenOut ||\\n            !_checkTokens(tokenIn, tokenOut)\\n        ) {\\n            return 0;\\n        }\\n        return _query(amountIn, tokenIn, tokenOut);\\n    }\\n\\n    /**\\n     * @notice Execute a swap with given input amount of tokens from tokenIn to tokenOut,\\n     *         assuming input tokens were transferred to depositAddress(tokenIn, tokenOut)\\n     *\\n     * @param amountIn input amount in starting token\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     * @param to address where swapped funds should be sent to\\n     *\\n     * @return amountOut amount of tokenOut tokens received in swap\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) external returns (uint256 amountOut) {\\n        require(amountIn != 0, \\\"Adapter: Insufficient input amount\\\");\\n        require(to != address(0), \\\"Adapter: to cannot be zero address\\\");\\n        require(tokenIn != tokenOut, \\\"Adapter: Tokens must differ\\\");\\n        require(_checkTokens(tokenIn, tokenOut), \\\"Adapter: unknown tokens\\\");\\n        _approveIfNeeded(tokenIn, amountIn);\\n        amountOut = _swap(amountIn, tokenIn, tokenOut, to);\\n    }\\n\\n    // -- INTERNAL FUNCTIONS\\n\\n    /**\\n     * @notice Return expected funds to user\\n     *\\n     * @dev this will do nothing, if funds need to stay in this contract\\n     *\\n     * @param token address\\n     * @param amount tokens to return\\n     * @param to address where funds should be sent to\\n     */\\n    function _returnTo(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) internal {\\n        if (address(this) != to) {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check allowance, and update if it is not big enough\\n     *\\n     * @param token token to check\\n     * @param amount minimum allowance that we need\\n     * @param spender address that will be given allowance\\n     */\\n    function _checkAllowance(\\n        IERC20 token,\\n        uint256 amount,\\n        address spender\\n    ) internal {\\n        uint256 _allowance = token.allowance(address(this), spender);\\n        if (_allowance < amount) {\\n            // safeApprove should only be called when setting an initial allowance,\\n            // or when resetting it to zero. (c) openzeppelin\\n            if (_allowance != 0) {\\n                token.safeApprove(spender, 0);\\n            }\\n            token.safeApprove(spender, UINT_MAX);\\n        }\\n    }\\n\\n    function _setInfiniteAllowance(IERC20 token, address spender) internal {\\n        _checkAllowance(token, UINT_MAX, spender);\\n    }\\n\\n    // -- INTERNAL VIRTUAL FUNCTIONS\\n\\n    /**\\n     * @notice Approves token for the underneath swapper to use\\n     *\\n     * @dev Implement via _checkAllowance(tokenIn, amount, POOL)\\n     *      if actually needed\\n     */\\n    function _approveIfNeeded(address, uint256) internal virtual {\\n        this;\\n    }\\n\\n    /**\\n     * @notice Checks if a swap between two tokens is supported by adapter\\n     */\\n    function _checkTokens(address, address)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Internal implementation for depositAddress\\n     *\\n     * @dev This aims to reduce the amount of extra token transfers:\\n     *      some (1) of underneath swappers will have the ability to receive tokens and then swap,\\n     *      while some (2) will only be able to pull tokens while swapping.\\n     *      Use swapper address for (1) and Adapter address for (2)\\n     */\\n    function _depositAddress(address tokenIn, address tokenOut)\\n        internal\\n        view\\n        virtual\\n        returns (address);\\n\\n    /**\\n     * @notice Internal implementation of a swap\\n     *\\n     * @dev 1. All variables are already checked\\n     *      2. Use _returnTo(tokenOut, amountOut, to) to return tokens, only if\\n     *         underneath swapper can't send swapped tokens to arbitrary address.\\n     *      3. Wrapping is handled external to this function\\n     *\\n     * @param amountIn amount being sold\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     * @param to Where received tokens are sent to\\n     *\\n     * @return Amount of tokenOut tokens received in swap\\n     */\\n    function _swap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) internal virtual returns (uint256);\\n\\n    /**\\n     * @notice Internal implementation of query\\n     *\\n     * @dev All variables are already checked.\\n     *      This should ALWAYS return amountOut such as: the swapper underneath\\n     *      is able to produce AT LEAST amountOut in exchange for EXACTLY amountIn\\n     *      For efficiency reasons, returning the exact quote is preferable,\\n     *      however, if the swapper doesn't have a reliable quoting method,\\n     *      it's safe to underquote the swapped amount\\n     *\\n     * @param amountIn input amount in starting token\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     */\\n    function _query(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6397ff5e484aa13adc4896a80b045149d470d5d62ebb937c101c180e4dc7ffe\",\"license\":\"MIT\"},\"contracts/router/adapters/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n}\\n\",\"keccak256\":\"0x222cb5f3a05ce90b574ea53bb4be57172047a59e9dd6c0e3be6e83cfff692a84\",\"license\":\"MIT\"},\"contracts/router/adapters/uniswap/UniswapV2Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IUniswapV2Pair} from \\\"../interfaces/IUniswapV2Pair.sol\\\";\\nimport {Adapter} from \\\"../../Adapter.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts-solc8/utils/Address.sol\\\";\\n\\n//solhint-disable reason-string\\n\\ncontract UniswapV2Adapter is Adapter {\\n    // in base points\\n    //solhint-disable-next-line\\n    uint128 internal immutable MULTIPLIER_WITH_FEE;\\n    uint128 internal constant MULTIPLIER = 10000;\\n\\n    address public immutable uniswapV2Factory;\\n    bytes32 internal immutable initCodeHash;\\n\\n    /**\\n     * @dev Default UniSwap fee is 0.3% = 30bp\\n     * @param _fee swap fee, in base points\\n     */\\n    constructor(\\n        string memory _name,\\n        uint256 _swapGasEstimate,\\n        address _uniswapV2FactoryAddress,\\n        bytes32 _initCodeHash,\\n        uint256 _fee\\n    ) Adapter(_name, _swapGasEstimate) {\\n        require(\\n            _fee < MULTIPLIER,\\n            \\\"Fee is too high. Must be less than multiplier\\\"\\n        );\\n        MULTIPLIER_WITH_FEE = uint128(MULTIPLIER - _fee);\\n        uniswapV2Factory = _uniswapV2FactoryAddress;\\n        initCodeHash = _initCodeHash;\\n    }\\n\\n    function _depositAddress(address _tokenIn, address _tokenOut)\\n        internal\\n        view\\n        override\\n        returns (address pair)\\n    {\\n        bytes32 salt = _tokenIn < _tokenOut\\n            ? keccak256(abi.encodePacked(_tokenIn, _tokenOut))\\n            : keccak256(abi.encodePacked(_tokenOut, _tokenIn));\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            uniswapV2Factory,\\n                            salt,\\n                            initCodeHash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) internal virtual override returns (uint256 _amountOut) {\\n        address _pair = _depositAddress(_tokenIn, _tokenOut);\\n\\n        _amountOut = _getPairAmountOut(_pair, _tokenIn, _tokenOut, _amountIn);\\n        require(_amountOut > 0, \\\"Adapter: Insufficient output amount\\\");\\n\\n        if (_tokenIn < _tokenOut) {\\n            IUniswapV2Pair(_pair).swap(0, _amountOut, _to, new bytes(0));\\n        } else {\\n            IUniswapV2Pair(_pair).swap(_amountOut, 0, _to, new bytes(0));\\n        }\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual override returns (uint256 _amountOut) {\\n        address _pair = _depositAddress(_tokenIn, _tokenOut);\\n\\n        _amountOut = _getPairAmountOut(_pair, _tokenIn, _tokenOut, _amountIn);\\n    }\\n\\n    function _getPairAmountOut(\\n        address _pair,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal view returns (uint256 _amountOut) {\\n        if (Address.isContract(_pair)) {\\n            try IUniswapV2Pair(_pair).getReserves() returns (\\n                uint112 _reserve0,\\n                uint112 _reserve1,\\n                uint32\\n            ) {\\n                if (_tokenIn < _tokenOut) {\\n                    _amountOut = _calcAmountOut(\\n                        _amountIn,\\n                        _reserve0,\\n                        _reserve1\\n                    );\\n                } else {\\n                    _amountOut = _calcAmountOut(\\n                        _amountIn,\\n                        _reserve1,\\n                        _reserve0\\n                    );\\n                }\\n            } catch {\\n                this;\\n            }\\n        }\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function _calcAmountOut(\\n        uint256 _amountIn,\\n        uint256 _reserveIn,\\n        uint256 _reserveOut\\n    ) internal view returns (uint256 _amountOut) {\\n        if (_reserveIn == 0 || _reserveOut == 0) {\\n            return 0;\\n        }\\n        uint256 amountInWithFee = _amountIn * MULTIPLIER_WITH_FEE;\\n\\n        _amountOut =\\n            (amountInWithFee * _reserveOut) /\\n            (_reserveIn * MULTIPLIER + amountInWithFee);\\n    }\\n}\\n\",\"keccak256\":\"0xb754055a7bea8984fdd991e72dc469280e5977c01a961d22460aff689b30178e\",\"license\":\"MIT\"},\"contracts/router/interfaces/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6;\\n\\ninterface IAdapter {\\n    event UpdatedGasEstimate(address indexed adapter, uint256 newEstimate);\\n\\n    event Recovered(address indexed asset, uint256 amount);\\n\\n    function name() external view returns (string memory);\\n\\n    function swapGasEstimate() external view returns (uint256);\\n\\n    function depositAddress(address tokenIn, address tokenOut)\\n        external\\n        view\\n        returns (address);\\n\\n    function swap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) external returns (uint256);\\n\\n    function query(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x11623bb390ba5754681690892878a47c09eea91b3d60b8eaa3ee12105bfab5b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620021f1380380620021f18339810160408190526200003491620002c8565b8484620000413362000106565b815162000056906001906020850190620001ef565b50620000628162000156565b50506127108110620000d15760405162461bcd60e51b815260206004820152602d60248201527f46656520697320746f6f20686967682e204d757374206265206c65737320746860448201526c30b71036bab63a34b83634b2b960991b60648201526084015b60405180910390fd5b620000df81612710620003d6565b6001600160801b0316608052506001600160a01b0390911660a05260c05250620004399050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000c8565b600281905560405181815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9060200160405180910390a250565b828054620001fd90620003fc565b90600052602060002090601f0160209004810192826200022157600085556200026c565b82601f106200023c57805160ff19168380011785556200026c565b828001600101855582156200026c579182015b828111156200026c5782518255916020019190600101906200024f565b506200027a9291506200027e565b5090565b5b808211156200027a57600081556001016200027f565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002c357600080fd5b919050565b600080600080600060a08688031215620002e157600080fd5b85516001600160401b0380821115620002f957600080fd5b818801915088601f8301126200030e57600080fd5b81518181111562000323576200032362000295565b604051601f8201601f19908116603f011681019083821181831017156200034e576200034e62000295565b81604052828152602093508b848487010111156200036b57600080fd5b600091505b828210156200038f578482018401518183018501529083019062000370565b82821115620003a15760008484830101525b8099505050508088015195505050620003bd60408701620002ab565b6060870151608090970151959894975095949392505050565b600082821015620003f757634e487b7160e01b600052601160045260246000fd5b500390565b600181811c908216806200041157607f821691505b602082108114156200043357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051611d8162000470600039600061120701526000818161012a01526111d6015260006117d00152611d816000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063bc88146711610059578063bc8814671461026c578063e61cf1dc1461028c578063ef99893a146102ac578063f2fde38b146102cc57600080fd5b80638da5cb5b146102015780639e8c708e1461022c578063a9e40e071461024c57600080fd5b806369cff80d116100bb57806369cff80d14610188578063715018a6146101ac57806384a33e63146101c157806388156e65146101e157600080fd5b806306fdde03146100ed57806359d0f7131461011857806366b866f61461017157600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b506101026102ec565b60405161010f91906119fb565b60405180910390f35b34801561012457600080fd5b5061014c7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010f565b34801561017d57600080fd5b5061018661037a565b005b34801561019457600080fd5b5061019e60025481565b60405190815260200161010f565b3480156101b857600080fd5b50610186610554565b3480156101cd57600080fd5b506101866101dc366004611a0e565b6105e1565b3480156101ed57600080fd5b5061019e6101fc366004611a49565b61069f565b34801561020d57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661014c565b34801561023857600080fd5b50610186610247366004611a9c565b61087c565b34801561025857600080fd5b5061014c610267366004611ab9565b610a6b565b34801561027857600080fd5b50610186610287366004611ab9565b610a7e565b34801561029857600080fd5b506101866102a7366004611ab9565b610b21565b3480156102b857600080fd5b5061019e6102c7366004611af2565b610bac565b3480156102d857600080fd5b506101866102e7366004611a9c565b610c0f565b600180546102f990611b34565b80601f016020809104026020016040519081016040528092919081815260200182805461032590611b34565b80156103725780601f1061034757610100808354040283529160200191610372565b820191906000526020600020905b81548152906001019060200180831161035557829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff163314610400576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b4780610468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a204e6f7468696e6720746f207265636f766572000000000060448201526064016103f7565b6040518181526000907f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289060200160405180910390a2604051600090339083908381818185875af1925050503d80600081146104e0576040519150601f19603f3d011682016040523d82523d6000602084013e6104e5565b606091505b5050905080610550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f474153207472616e73666572206661696c65640000000000000000000000000060448201526064016103f7565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b6105df6000610d3f565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b600281905560405181815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9060200160405180910390a250565b60008461072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f416461707465723a20496e73756666696369656e7420696e70757420616d6f7560448201527f6e7400000000000000000000000000000000000000000000000000000000000060648201526084016103f7565b73ffffffffffffffffffffffffffffffffffffffff82166107d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f416461707465723a20746f2063616e6e6f74206265207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103f7565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a20546f6b656e73206d75737420646966666572000000000060448201526064016103f7565b61087385858585610db4565b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa15801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e9190611b88565b9050600081116109fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a204e6f7468696e6720746f207265636f766572000000000060448201526064016103f7565b8173ffffffffffffffffffffffffffffffffffffffff167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882604051610a4291815260200190565b60405180910390a261055073ffffffffffffffffffffffffffffffffffffffff83163383610fd1565b6000610a7783836110aa565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610aff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b61055073ffffffffffffffffffffffffffffffffffffffff831682600061126f565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ba2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b61055082826113f1565b6000831580610be657508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b80610bef575060005b15610bfc57506000610a77565b610c0784848461141c565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b73ffffffffffffffffffffffffffffffffffffffff8116610d33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103f7565b610d3c81610d3f565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080610dc185856110aa565b9050610dcf81868689611433565b915060008211610e61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f416461707465723a20496e73756666696369656e74206f757470757420616d6f60448201527f756e74000000000000000000000000000000000000000000000000000000000060648201526084016103f7565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161015610f315760408051600080825260208201928390527f022c0d9f0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff83169163022c0d9f91610efa91908690889060248101611ba1565b600060405180830381600087803b158015610f1457600080fd5b505af1158015610f28573d6000803e3d6000fd5b50505050610fc8565b60408051600080825260208201928390527f022c0d9f0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff83169163022c0d9f91610f95918691889060248101611ba1565b600060405180830381600087803b158015610faf57600080fd5b505af1158015610fc3573d6000803e3d6000fd5b505050505b50949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526110a59084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261157f565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610611137576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b8216602084015286901b1660348201526048016040516020818303038152906040528051906020012061118a565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086811b8216602084015285901b166034820152604801604051602081830303815290604052805190602001205b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060601b166021820152603581018290527f00000000000000000000000000000000000000000000000000000000000000006055820152909150607501604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b80158061130f57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156112e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130d9190611b88565b155b61139b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016103f7565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526110a59084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611023565b610550827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8361168b565b60008061142984846110aa565b9050610873818585885b600073ffffffffffffffffffffffffffffffffffffffff85163b15610c07578473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa9250505080156114d7575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526114d491810190611c09565b60015b6114e057610c07565b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1610156115465761153f85846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661179e565b9350611574565b61157185836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff1661179e565b93505b505050949350505050565b60006115e1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118239092919063ffffffff16565b8051909150156110a557808060200190518101906115ff9190611c4e565b6110a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103f7565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff82811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117259190611b88565b9050828110156117985780156117575761175773ffffffffffffffffffffffffffffffffffffffff851683600061126f565b61179873ffffffffffffffffffffffffffffffffffffffff8516837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61126f565b50505050565b60008215806117ab575081155b156117b857506000610a77565b60006117f66fffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686611c9f565b90508061180561271086611c9f565b61180f9190611cdc565b6118198483611c9f565b6108739190611cf4565b6060610c0784846000858573ffffffffffffffffffffffffffffffffffffffff85163b6118ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f7565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516118d59190611d2f565b60006040518083038185875af1925050503d8060008114611912576040519150601f19603f3d011682016040523d82523d6000602084013e611917565b606091505b5091509150611927828286611932565b979650505050505050565b60608315611941575081610a77565b8251156119515782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f791906119fb565b60005b838110156119a0578181015183820152602001611988565b838111156117985750506000910152565b600081518084526119c9816020860160208601611985565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610a7760208301846119b1565b600060208284031215611a2057600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610d3c57600080fd5b60008060008060808587031215611a5f57600080fd5b843593506020850135611a7181611a27565b92506040850135611a8181611a27565b91506060850135611a9181611a27565b939692955090935050565b600060208284031215611aae57600080fd5b8135610a7781611a27565b60008060408385031215611acc57600080fd5b8235611ad781611a27565b91506020830135611ae781611a27565b809150509250929050565b600080600060608486031215611b0757600080fd5b833592506020840135611b1981611a27565b91506040840135611b2981611a27565b809150509250925092565b600181811c90821680611b4857607f821691505b60208210811415611b82577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215611b9a57600080fd5b5051919050565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201526000611bdc60808301846119b1565b9695505050505050565b80516dffffffffffffffffffffffffffff81168114611c0457600080fd5b919050565b600080600060608486031215611c1e57600080fd5b611c2784611be6565b9250611c3560208501611be6565b9150604084015163ffffffff81168114611b2957600080fd5b600060208284031215611c6057600080fd5b81518015158114610a7757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cd757611cd7611c70565b500290565b60008219821115611cef57611cef611c70565b500190565b600082611d2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008251611d41818460208701611985565b919091019291505056fea26469706673582212203e8116cfa7e9f6700b9b1ff85a1ae9b83b59693f77f0a3ecf1f150e0517815ee64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063bc88146711610059578063bc8814671461026c578063e61cf1dc1461028c578063ef99893a146102ac578063f2fde38b146102cc57600080fd5b80638da5cb5b146102015780639e8c708e1461022c578063a9e40e071461024c57600080fd5b806369cff80d116100bb57806369cff80d14610188578063715018a6146101ac57806384a33e63146101c157806388156e65146101e157600080fd5b806306fdde03146100ed57806359d0f7131461011857806366b866f61461017157600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b506101026102ec565b60405161010f91906119fb565b60405180910390f35b34801561012457600080fd5b5061014c7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010f565b34801561017d57600080fd5b5061018661037a565b005b34801561019457600080fd5b5061019e60025481565b60405190815260200161010f565b3480156101b857600080fd5b50610186610554565b3480156101cd57600080fd5b506101866101dc366004611a0e565b6105e1565b3480156101ed57600080fd5b5061019e6101fc366004611a49565b61069f565b34801561020d57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661014c565b34801561023857600080fd5b50610186610247366004611a9c565b61087c565b34801561025857600080fd5b5061014c610267366004611ab9565b610a6b565b34801561027857600080fd5b50610186610287366004611ab9565b610a7e565b34801561029857600080fd5b506101866102a7366004611ab9565b610b21565b3480156102b857600080fd5b5061019e6102c7366004611af2565b610bac565b3480156102d857600080fd5b506101866102e7366004611a9c565b610c0f565b600180546102f990611b34565b80601f016020809104026020016040519081016040528092919081815260200182805461032590611b34565b80156103725780601f1061034757610100808354040283529160200191610372565b820191906000526020600020905b81548152906001019060200180831161035557829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff163314610400576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b4780610468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a204e6f7468696e6720746f207265636f766572000000000060448201526064016103f7565b6040518181526000907f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289060200160405180910390a2604051600090339083908381818185875af1925050503d80600081146104e0576040519150601f19603f3d011682016040523d82523d6000602084013e6104e5565b606091505b5050905080610550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f474153207472616e73666572206661696c65640000000000000000000000000060448201526064016103f7565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b6105df6000610d3f565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b600281905560405181815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9060200160405180910390a250565b60008461072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f416461707465723a20496e73756666696369656e7420696e70757420616d6f7560448201527f6e7400000000000000000000000000000000000000000000000000000000000060648201526084016103f7565b73ffffffffffffffffffffffffffffffffffffffff82166107d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f416461707465723a20746f2063616e6e6f74206265207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103f7565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a20546f6b656e73206d75737420646966666572000000000060448201526064016103f7565b61087385858585610db4565b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa15801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e9190611b88565b9050600081116109fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a204e6f7468696e6720746f207265636f766572000000000060448201526064016103f7565b8173ffffffffffffffffffffffffffffffffffffffff167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882604051610a4291815260200190565b60405180910390a261055073ffffffffffffffffffffffffffffffffffffffff83163383610fd1565b6000610a7783836110aa565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610aff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b61055073ffffffffffffffffffffffffffffffffffffffff831682600061126f565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ba2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b61055082826113f1565b6000831580610be657508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b80610bef575060005b15610bfc57506000610a77565b610c0784848461141c565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f7565b73ffffffffffffffffffffffffffffffffffffffff8116610d33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103f7565b610d3c81610d3f565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080610dc185856110aa565b9050610dcf81868689611433565b915060008211610e61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f416461707465723a20496e73756666696369656e74206f757470757420616d6f60448201527f756e74000000000000000000000000000000000000000000000000000000000060648201526084016103f7565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161015610f315760408051600080825260208201928390527f022c0d9f0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff83169163022c0d9f91610efa91908690889060248101611ba1565b600060405180830381600087803b158015610f1457600080fd5b505af1158015610f28573d6000803e3d6000fd5b50505050610fc8565b60408051600080825260208201928390527f022c0d9f0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff83169163022c0d9f91610f95918691889060248101611ba1565b600060405180830381600087803b158015610faf57600080fd5b505af1158015610fc3573d6000803e3d6000fd5b505050505b50949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526110a59084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261157f565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610611137576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b8216602084015286901b1660348201526048016040516020818303038152906040528051906020012061118a565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086811b8216602084015285901b166034820152604801604051602081830303815290604052805190602001205b6040517fff0000000000000000000000000000000000000000000000000000000000000060208201527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060601b166021820152603581018290527f00000000000000000000000000000000000000000000000000000000000000006055820152909150607501604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b80158061130f57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156112e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130d9190611b88565b155b61139b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016103f7565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526110a59084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611023565b610550827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8361168b565b60008061142984846110aa565b9050610873818585885b600073ffffffffffffffffffffffffffffffffffffffff85163b15610c07578473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa9250505080156114d7575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526114d491810190611c09565b60015b6114e057610c07565b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1610156115465761153f85846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661179e565b9350611574565b61157185836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff1661179e565b93505b505050949350505050565b60006115e1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118239092919063ffffffff16565b8051909150156110a557808060200190518101906115ff9190611c4e565b6110a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103f7565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff82811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117259190611b88565b9050828110156117985780156117575761175773ffffffffffffffffffffffffffffffffffffffff851683600061126f565b61179873ffffffffffffffffffffffffffffffffffffffff8516837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61126f565b50505050565b60008215806117ab575081155b156117b857506000610a77565b60006117f66fffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686611c9f565b90508061180561271086611c9f565b61180f9190611cdc565b6118198483611c9f565b6108739190611cf4565b6060610c0784846000858573ffffffffffffffffffffffffffffffffffffffff85163b6118ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f7565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516118d59190611d2f565b60006040518083038185875af1925050503d8060008114611912576040519150601f19603f3d011682016040523d82523d6000602084013e611917565b606091505b5091509150611927828286611932565b979650505050505050565b60608315611941575081610a77565b8251156119515782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f791906119fb565b60005b838110156119a0578181015183820152602001611988565b838111156117985750506000910152565b600081518084526119c9816020860160208601611985565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610a7760208301846119b1565b600060208284031215611a2057600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610d3c57600080fd5b60008060008060808587031215611a5f57600080fd5b843593506020850135611a7181611a27565b92506040850135611a8181611a27565b91506060850135611a9181611a27565b939692955090935050565b600060208284031215611aae57600080fd5b8135610a7781611a27565b60008060408385031215611acc57600080fd5b8235611ad781611a27565b91506020830135611ae781611a27565b809150509250929050565b600080600060608486031215611b0757600080fd5b833592506020840135611b1981611a27565b91506040840135611b2981611a27565b809150509250925092565b600181811c90821680611b4857607f821691505b60208210811415611b82577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215611b9a57600080fd5b5051919050565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201526000611bdc60808301846119b1565b9695505050505050565b80516dffffffffffffffffffffffffffff81168114611c0457600080fd5b919050565b600080600060608486031215611c1e57600080fd5b611c2784611be6565b9250611c3560208501611be6565b9150604084015163ffffffff81168114611b2957600080fd5b600060208284031215611c6057600080fd5b81518015158114610a7757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cd757611cd7611c70565b500290565b60008219821115611cef57611cef611c70565b500190565b600082611d2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008251611d41818460208701611985565b919091019291505056fea26469706673582212203e8116cfa7e9f6700b9b1ff85a1ae9b83b59693f77f0a3ecf1f150e0517815ee64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Default UniSwap fee is 0.3% = 30bp",
        "params": {
          "_fee": "swap fee, in base points"
        }
      },
      "depositAddress(address,address)": {
        "returns": {
          "_0": "Address to transfer tokens in order for swap() to work"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "query(uint256,address,address)": {
        "params": {
          "amountIn": "input amount in starting token",
          "tokenIn": "ERC20 token being sold",
          "tokenOut": "ERC20 token being bought"
        }
      },
      "recoverERC20(address)": {
        "params": {
          "token": "token to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeTokenAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setSwapGasEstimate(uint256)": {
        "details": "this is estimated amount of gas that's used by swap() implementation"
      },
      "swap(uint256,address,address,address)": {
        "params": {
          "amountIn": "input amount in starting token",
          "to": "address where swapped funds should be sent to",
          "tokenIn": "ERC20 token being sold",
          "tokenOut": "ERC20 token being bought"
        },
        "returns": {
          "amountOut": "amount of tokenOut tokens received in swap"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "query(uint256,address,address)": {
        "notice": "Get query for a swap through this adapter"
      },
      "recoverERC20(address)": {
        "notice": "Recover ERC20 from contract"
      },
      "recoverGAS()": {
        "notice": "Recover GAS from contract"
      },
      "revokeTokenAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "swap(uint256,address,address,address)": {
        "notice": "Execute a swap with given input amount of tokens from tokenIn to tokenOut,         assuming input tokens were transferred to depositAddress(tokenIn, tokenOut)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/router/adapters/uniswap/UniswapV2Adapter.sol:UniswapV2Adapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4048,
        "contract": "contracts/router/adapters/uniswap/UniswapV2Adapter.sol:UniswapV2Adapter",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 4050,
        "contract": "contracts/router/adapters/uniswap/UniswapV2Adapter.sol:UniswapV2Adapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}