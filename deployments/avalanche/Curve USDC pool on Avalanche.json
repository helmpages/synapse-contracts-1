{
  "address": "0x1010d6F1Af51e4699Da34ACAdb3E8E672EE02F1E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_directSwapSupported",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "depositAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPoolToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract ICurvePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverGAS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeTokenAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "setInfiniteAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenIndex",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6a8bcb5e3a6d235ed3c6897a01917f23450abba85cd9ee48906477084f6a618a",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0x1010d6F1Af51e4699Da34ACAdb3E8E672EE02F1E",
    "transactionIndex": 20,
    "gasUsed": "2016995",
    "logsBloom": "0x
    "blockHash": "0x0bda3a8740672f65992a0bf34e3d4967ba8cbd56f88730f38dd0ce54f7000fb4",
    "transactionHash": "0x6a8bcb5e3a6d235ed3c6897a01917f23450abba85cd9ee48906477084f6a618a",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 13375244,
        "transactionHash": "0x6a8bcb5e3a6d235ed3c6897a01917f23450abba85cd9ee48906477084f6a618a",
        "address": "0x1010d6F1Af51e4699Da34ACAdb3E8E672EE02F1E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0x0bda3a8740672f65992a0bf34e3d4967ba8cbd56f88730f38dd0ce54f7000fb4"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 13375244,
        "transactionHash": "0x6a8bcb5e3a6d235ed3c6897a01917f23450abba85cd9ee48906477084f6a618a",
        "address": "0x1010d6F1Af51e4699Da34ACAdb3E8E672EE02F1E",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x0000000000000000000000001010d6f1af51e4699da34acadb3e8e672ee02f1e"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 54,
        "blockHash": "0x0bda3a8740672f65992a0bf34e3d4967ba8cbd56f88730f38dd0ce54f7000fb4"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 13375244,
        "transactionHash": "0x6a8bcb5e3a6d235ed3c6897a01917f23450abba85cd9ee48906477084f6a618a",
        "address": "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000001010d6f1af51e4699da34acadb3e8e672ee02f1e",
          "0x0000000000000000000000003a43a5851a3e3e0e25a3c1089670269786be1577"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 55,
        "blockHash": "0x0bda3a8740672f65992a0bf34e3d4967ba8cbd56f88730f38dd0ce54f7000fb4"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 13375244,
        "transactionHash": "0x6a8bcb5e3a6d235ed3c6897a01917f23450abba85cd9ee48906477084f6a618a",
        "address": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000001010d6f1af51e4699da34acadb3e8e672ee02f1e",
          "0x0000000000000000000000003a43a5851a3e3e0e25a3c1089670269786be1577"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 56,
        "blockHash": "0x0bda3a8740672f65992a0bf34e3d4967ba8cbd56f88730f38dd0ce54f7000fb4"
      }
    ],
    "blockNumber": 13375244,
    "cumulativeGasUsed": "5098095",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Curve USDC pool on Avalanche",
    0,
    "0x3a43A5851A3e3E0e25A3c1089670269786be1577",
    true
  ],
  "solcInputHash": "981f38149fd49d3cec0cb27aa531a82e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_directSwapSupported\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"depositAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPoolToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverGAS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeTokenAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"setInfiniteAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositAddress(address,address)\":{\"returns\":{\"_0\":\"Address to transfer tokens in order for swap() to work\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"query(uint256,address,address)\":{\"params\":{\"amountIn\":\"input amount in starting token\",\"tokenIn\":\"ERC20 token being sold\",\"tokenOut\":\"ERC20 token being bought\"}},\"recoverERC20(address)\":{\"params\":{\"token\":\"token to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeTokenAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setSwapGasEstimate(uint256)\":{\"details\":\"this is estimated amount of gas that's used by swap() implementation\"},\"swap(uint256,address,address,address)\":{\"params\":{\"amountIn\":\"input amount in starting token\",\"to\":\"address where swapped funds should be sent to\",\"tokenIn\":\"ERC20 token being sold\",\"tokenOut\":\"ERC20 token being bought\"},\"returns\":{\"amountOut\":\"amount of tokenOut tokens received in swap\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"tokenIndex\":{\"details\":\"Base Adapter is using int128 for indexes and is using exchange() for swaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"query(uint256,address,address)\":{\"notice\":\"Get query for a swap through this adapter\"},\"recoverERC20(address)\":{\"notice\":\"Recover ERC20 from contract\"},\"recoverGAS()\":{\"notice\":\"Recover GAS from contract\"},\"revokeTokenAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"swap(uint256,address,address,address)\":{\"notice\":\"Execute a swap with given input amount of tokens from tokenIn to tokenOut,         assuming input tokens were transferred to depositAddress(tokenIn, tokenOut)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/router/adapters/curve/CurveBaseAdapter.sol\":\"CurveBaseAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.4.2/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-solc8/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-solc8/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20 as _IERC20} from \\\"@openzeppelin/contracts-solc8/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 is _IERC20 {\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function mint(address to, uint256 amount) external; // only tokens that support minting\\n}\\n\",\"keccak256\":\"0x94eaff4005f7a976379e01f0d95693e02299589620b0fb61d708f9b400399995\",\"license\":\"MIT\"},\"@synapseprotocol/sol-lib/contracts/solc8/erc20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-solc8/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n    unchecked {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        uint256 newAllowance = oldAllowance - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x869a81fbfe37ebfd330b4d032354495f120fe74ab896436475d0bcdda2ba6d9b\",\"license\":\"MIT\"},\"@synapseprotocol/sol-lib/contracts/universal/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWETH9 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    receive() external payable;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xa6fc99a6e06ed0d13dbccd795a894ba71f3c6963dd4e0843b50069c0f2b392b8\",\"license\":\"MIT\"},\"contracts/router/Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAdapter} from \\\"./interfaces/IAdapter.sol\\\";\\n\\nimport {IERC20} from \\\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\\\";\\nimport {IWETH9} from \\\"@synapseprotocol/sol-lib/contracts/universal/interfaces/IWETH9.sol\\\";\\nimport {SafeERC20} from \\\"@synapseprotocol/sol-lib/contracts/solc8/erc20/SafeERC20.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts-4.4.2/access/Ownable.sol\\\";\\n\\n// solhint-disable reason-string\\n\\nabstract contract Adapter is Ownable, IAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    string public name;\\n    uint256 public swapGasEstimate;\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n\\n    constructor(string memory _name, uint256 _swapGasEstimate) {\\n        name = _name;\\n        setSwapGasEstimate(_swapGasEstimate);\\n    }\\n\\n    /**\\n     * @notice Fallback function\\n     * @dev use recoverGAS() to recover GAS sent to this contract\\n     */\\n    receive() external payable {\\n        // silence the linter\\n        this;\\n    }\\n\\n    /// @dev this is estimated amount of gas that's used by swap() implementation\\n    function setSwapGasEstimate(uint256 _swapGasEstimate) public onlyOwner {\\n        swapGasEstimate = _swapGasEstimate;\\n        emit UpdatedGasEstimate(address(this), _swapGasEstimate);\\n    }\\n\\n    // -- RESTRICTED ALLOWANCE FUNCTIONS --\\n\\n    function setInfiniteAllowance(IERC20 token, address spender)\\n        external\\n        onlyOwner\\n    {\\n        _setInfiniteAllowance(token, spender);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     *\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeTokenAllowance(IERC20 token, address spender)\\n        external\\n        onlyOwner\\n    {\\n        token.safeApprove(spender, 0);\\n    }\\n\\n    // -- RESTRICTED RECOVER TOKEN FUNCTIONS --\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param token token to recover\\n     */\\n    function recoverERC20(IERC20 token) external onlyOwner {\\n        uint256 amount = token.balanceOf(address(this));\\n        require(amount > 0, \\\"Adapter: Nothing to recover\\\");\\n\\n        emit Recovered(address(token), amount);\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Recover GAS from contract\\n     */\\n    function recoverGAS() external onlyOwner {\\n        uint256 amount = address(this).balance;\\n        require(amount > 0, \\\"Adapter: Nothing to recover\\\");\\n\\n        emit Recovered(address(0), amount);\\n        //solhint-disable-next-line\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"GAS transfer failed\\\");\\n    }\\n\\n    /**\\n     * @return Address to transfer tokens in order for swap() to work\\n     */\\n\\n    function depositAddress(address tokenIn, address tokenOut)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _depositAddress(tokenIn, tokenOut);\\n    }\\n\\n    /**\\n     * @notice Get query for a swap through this adapter\\n     *\\n     * @param amountIn input amount in starting token\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     */\\n    function query(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint256) {\\n        if (\\n            amountIn == 0 ||\\n            tokenIn == tokenOut ||\\n            !_checkTokens(tokenIn, tokenOut)\\n        ) {\\n            return 0;\\n        }\\n        return _query(amountIn, tokenIn, tokenOut);\\n    }\\n\\n    /**\\n     * @notice Execute a swap with given input amount of tokens from tokenIn to tokenOut,\\n     *         assuming input tokens were transferred to depositAddress(tokenIn, tokenOut)\\n     *\\n     * @param amountIn input amount in starting token\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     * @param to address where swapped funds should be sent to\\n     *\\n     * @return amountOut amount of tokenOut tokens received in swap\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) external returns (uint256 amountOut) {\\n        require(amountIn != 0, \\\"Adapter: Insufficient input amount\\\");\\n        require(to != address(0), \\\"Adapter: to cannot be zero address\\\");\\n        require(tokenIn != tokenOut, \\\"Adapter: Tokens must differ\\\");\\n        require(_checkTokens(tokenIn, tokenOut), \\\"Adapter: unknown tokens\\\");\\n        _approveIfNeeded(tokenIn, amountIn);\\n        amountOut = _swap(amountIn, tokenIn, tokenOut, to);\\n    }\\n\\n    // -- INTERNAL FUNCTIONS\\n\\n    /**\\n     * @notice Return expected funds to user\\n     *\\n     * @dev this will do nothing, if funds need to stay in this contract\\n     *\\n     * @param token address\\n     * @param amount tokens to return\\n     * @param to address where funds should be sent to\\n     */\\n    function _returnTo(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) internal {\\n        if (address(this) != to) {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check allowance, and update if it is not big enough\\n     *\\n     * @param token token to check\\n     * @param amount minimum allowance that we need\\n     * @param spender address that will be given allowance\\n     */\\n    function _checkAllowance(\\n        IERC20 token,\\n        uint256 amount,\\n        address spender\\n    ) internal {\\n        uint256 _allowance = token.allowance(address(this), spender);\\n        if (_allowance < amount) {\\n            // safeApprove should only be called when setting an initial allowance,\\n            // or when resetting it to zero. (c) openzeppelin\\n            if (_allowance != 0) {\\n                token.safeApprove(spender, 0);\\n            }\\n            token.safeApprove(spender, UINT_MAX);\\n        }\\n    }\\n\\n    function _setInfiniteAllowance(IERC20 token, address spender) internal {\\n        _checkAllowance(token, UINT_MAX, spender);\\n    }\\n\\n    // -- INTERNAL VIRTUAL FUNCTIONS\\n\\n    /**\\n     * @notice Approves token for the underneath swapper to use\\n     *\\n     * @dev Implement via _checkAllowance(tokenIn, amount, POOL)\\n     *      if actually needed\\n     */\\n    function _approveIfNeeded(address, uint256) internal virtual {\\n        this;\\n    }\\n\\n    /**\\n     * @notice Checks if a swap between two tokens is supported by adapter\\n     */\\n    function _checkTokens(address, address)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Internal implementation for depositAddress\\n     *\\n     * @dev This aims to reduce the amount of extra token transfers:\\n     *      some (1) of underneath swappers will have the ability to receive tokens and then swap,\\n     *      while some (2) will only be able to pull tokens while swapping.\\n     *      Use swapper address for (1) and Adapter address for (2)\\n     */\\n    function _depositAddress(address tokenIn, address tokenOut)\\n        internal\\n        view\\n        virtual\\n        returns (address);\\n\\n    /**\\n     * @notice Internal implementation of a swap\\n     *\\n     * @dev 1. All variables are already checked\\n     *      2. Use _returnTo(tokenOut, amountOut, to) to return tokens, only if\\n     *         underneath swapper can't send swapped tokens to arbitrary address.\\n     *      3. Wrapping is handled external to this function\\n     *\\n     * @param amountIn amount being sold\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     * @param to Where received tokens are sent to\\n     *\\n     * @return Amount of tokenOut tokens received in swap\\n     */\\n    function _swap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) internal virtual returns (uint256);\\n\\n    /**\\n     * @notice Internal implementation of query\\n     *\\n     * @dev All variables are already checked.\\n     *      This should ALWAYS return amountOut such as: the swapper underneath\\n     *      is able to produce AT LEAST amountOut in exchange for EXACTLY amountIn\\n     *      For efficiency reasons, returning the exact quote is preferable,\\n     *      however, if the swapper doesn't have a reliable quoting method,\\n     *      it's safe to underquote the swapped amount\\n     *\\n     * @param amountIn input amount in starting token\\n     * @param tokenIn ERC20 token being sold\\n     * @param tokenOut ERC20 token being bought\\n     */\\n    function _query(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6397ff5e484aa13adc4896a80b045149d470d5d62ebb937c101c180e4dc7ffe\",\"license\":\"MIT\"},\"contracts/router/adapters/curve/CurveAbstractAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Adapter} from \\\"../../Adapter.sol\\\";\\n\\nimport {ICurvePool} from \\\"../interfaces/ICurvePool.sol\\\";\\n\\nimport {IERC20} from \\\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\\\";\\n\\nabstract contract CurveAbstractAdapter is Adapter {\\n    ICurvePool public immutable pool;\\n    bool internal immutable directSwapSupported;\\n\\n    mapping(address => bool) public isPoolToken;\\n\\n    constructor(\\n        string memory _name,\\n        uint256 _swapGasEstimate,\\n        address _pool,\\n        bool _directSwapSupported\\n    ) Adapter(_name, _swapGasEstimate) {\\n        pool = ICurvePool(_pool);\\n        directSwapSupported = _directSwapSupported;\\n        _setPoolTokens();\\n    }\\n\\n    function _setPoolTokens() internal virtual {\\n        for (uint8 i = 0; true; i++) {\\n            try pool.coins(i) returns (address _tokenAddress) {\\n                _addPoolToken(_tokenAddress, i);\\n                _setInfiniteAllowance(IERC20(_tokenAddress), address(pool));\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _addPoolToken(address _tokenAddress, uint8 _index)\\n        internal\\n        virtual;\\n\\n    function _checkTokens(address _tokenIn, address _tokenOut)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return isPoolToken[_tokenIn] && isPoolToken[_tokenOut];\\n    }\\n\\n    function _depositAddress(address, address)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return address(this);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) internal virtual override returns (uint256 _amountOut) {\\n        if (directSwapSupported) {\\n            _amountOut = _doDirectSwap(_amountIn, _tokenIn, _tokenOut, _to);\\n        } else {\\n            _amountOut = _doIndirectSwap(_amountIn, _tokenIn, _tokenOut);\\n            _returnTo(_tokenOut, _amountOut, _to);\\n        }\\n    }\\n\\n    function _doDirectSwap(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) internal virtual returns (uint256);\\n\\n    function _doIndirectSwap(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x01b7c656f48a535218424c79cdfaba2e27dce1443ca83e0c277968c12a47057f\",\"license\":\"MIT\"},\"contracts/router/adapters/curve/CurveBaseAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CurveAbstractAdapter} from \\\"./CurveAbstractAdapter.sol\\\";\\n\\nimport {IERC20} from \\\"@synapseprotocol/sol-lib/contracts/solc8/erc20/IERC20.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts-4.4.2/utils/math/SafeCast.sol\\\";\\n\\ncontract CurveBaseAdapter is CurveAbstractAdapter {\\n    /**\\n        @dev Base Adapter is using int128 for indexes\\n        and is using exchange() for swaps\\n     */\\n\\n    mapping(address => int128) public tokenIndex;\\n\\n    constructor(\\n        string memory _name,\\n        uint256 _swapGasEstimate,\\n        address _pool,\\n        bool _directSwapSupported\\n    )\\n        CurveAbstractAdapter(\\n            _name,\\n            _swapGasEstimate,\\n            _pool,\\n            _directSwapSupported\\n        )\\n    {\\n        this;\\n    }\\n\\n    function _addPoolToken(address _tokenAddress, uint8 _index)\\n        internal\\n        virtual\\n        override\\n    {\\n        isPoolToken[_tokenAddress] = true;\\n        tokenIndex[_tokenAddress] = SafeCast.toInt128(\\n            SafeCast.toInt256(_index)\\n        );\\n    }\\n\\n    function _doDirectSwap(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) internal virtual override returns (uint256 _amountOut) {\\n        _amountOut = IERC20(_tokenOut).balanceOf(_to);\\n        pool.exchange(\\n            tokenIndex[_tokenIn],\\n            tokenIndex[_tokenOut],\\n            _amountIn,\\n            0,\\n            _to\\n        );\\n        _amountOut = IERC20(_tokenOut).balanceOf(_to) - _amountOut;\\n    }\\n\\n    function _doIndirectSwap(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal virtual override returns (uint256 _amountOut) {\\n        pool.exchange(\\n            tokenIndex[_tokenIn],\\n            tokenIndex[_tokenOut],\\n            _amountIn,\\n            0\\n        );\\n        // Imagine not returning amount of swapped tokens\\n        _amountOut = IERC20(_tokenOut).balanceOf(address(this));\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual override returns (uint256 _amountOut) {\\n        try\\n            pool.get_dy(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn)\\n        returns (uint256 _amt) {\\n            // -1 to account for rounding errors.\\n            // This will underquote by 1 wei sometimes, but that's life\\n            _amountOut = _amt != 0 ? _amt - 1 : 0;\\n        } catch {\\n            _amountOut = 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd730925b88baf09ef5bbce00d2d9baec6dc61ccad2b0f7d274ead9801721702\",\"license\":\"MIT\"},\"contracts/router/adapters/interfaces/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICurvePool {\\n    // Coin getters\\n\\n    function coins(uint256 arg0) external view returns (address);\\n\\n    function base_coins(uint256 arg0) external view returns (address);\\n\\n    function underlying_coins(uint256 arg0) external view returns (address);\\n\\n    // Quote functions (int128)\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // Quote functions (uint256)\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // Swap functions (int128)\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external;\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    // Swap functions (uint256)\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external;\\n\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbef7c0fcceffc9878fc165b28b356d07e0afbba90de2c527101715505ec7f22a\",\"license\":\"MIT\"},\"contracts/router/interfaces/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6;\\n\\ninterface IAdapter {\\n    event UpdatedGasEstimate(address indexed adapter, uint256 newEstimate);\\n\\n    event Recovered(address indexed asset, uint256 amount);\\n\\n    function name() external view returns (string memory);\\n\\n    function swapGasEstimate() external view returns (uint256);\\n\\n    function depositAddress(address tokenIn, address tokenOut)\\n        external\\n        view\\n        returns (address);\\n\\n    function swap(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        address to\\n    ) external returns (uint256);\\n\\n    function query(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x11623bb390ba5754681690892878a47c09eea91b3d60b8eaa3ee12105bfab5b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002ac538038062002ac583398101604081905262000034916200096b565b838383838383620000453362000093565b81516200005a9060019060208501906200085c565b506200006681620000e3565b50506001600160a01b03821660805280151560a0526200008562000180565b505050505050505062000b69565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001435760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600281905560405181815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9060200160405180910390a250565b60005b60805160405163c661065760e01b815260ff831660048201526001600160a01b039091169063c661065790602401602060405180830381865afa925050508015620001ed575060408051601f3d908101601f19168201909252620001ea9181019062000a54565b60015b620001f55750565b6200020181836200022b565b6200021581608051620002bb60201b60201c565b5080620002228162000a72565b91505062000183565b6001600160a01b0382166000908152600360209081526040909120805460ff1916600117905562000280906200026f9060ff84169062000e49620002ce821b17901c565b6200033e60201b62000eff1760201c565b6001600160a01b0392909216600090815260046020526040902080546001600160801b0319166001600160801b039093169290921790915550565b620002ca8260001983620003be565b5050565b60006001600160ff1b038211156200033a5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016200013a565b5090565b600060016001607f1b0319821280159062000360575060016001607f1b038213155b6200033a5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016200013a565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156200040f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000435919062000aa1565b905082811015620004945780156200046d576200046d826000866001600160a01b03166200049a60201b62000fcd179092919060201c565b6200049482600019866001600160a01b03166200049a60201b62000fcd179092919060201c565b50505050565b801580620005185750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015620004f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000516919062000aa1565b155b6200058c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016200013a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620005e4918591620005e916565b505050565b600062000645826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620006c760201b620011d2179092919060201c565b805190915015620005e4578080602001905181019062000666919062000abb565b620005e45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016200013a565b6060620006d88484600085620006e2565b90505b9392505050565b606082471015620007455760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016200013a565b6001600160a01b0385163b6200079e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016200013a565b600080866001600160a01b03168587604051620007bc919062000ad9565b60006040518083038185875af1925050503d8060008114620007fb576040519150601f19603f3d011682016040523d82523d6000602084013e62000800565b606091505b509092509050620008138282866200081e565b979650505050505050565b606083156200082f575081620006db565b825115620008405782518084602001fd5b8160405162461bcd60e51b81526004016200013a919062000af7565b8280546200086a9062000b2c565b90600052602060002090601f0160209004810192826200088e5760008555620008d9565b82601f10620008a957805160ff1916838001178555620008d9565b82800160010185558215620008d9579182015b82811115620008d9578251825591602001919060010190620008bc565b506200033a9291505b808211156200033a5760008155600101620008e2565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200092b57818101518382015260200162000911565b83811115620004945750506000910152565b80516001600160a01b03811681146200095557600080fd5b919050565b805180151581146200095557600080fd5b600080600080608085870312156200098257600080fd5b84516001600160401b03808211156200099a57600080fd5b818701915087601f830112620009af57600080fd5b815181811115620009c457620009c4620008f8565b604051601f8201601f19908116603f01168101908382118183101715620009ef57620009ef620008f8565b816040528281528a602084870101111562000a0957600080fd5b62000a1c8360208301602088016200090e565b80985050505050506020850151925062000a39604086016200093d565b915062000a49606086016200095a565b905092959194509250565b60006020828403121562000a6757600080fd5b620006db826200093d565b600060ff821660ff81141562000a9857634e487b7160e01b600052601160045260246000fd5b60010192915050565b60006020828403121562000ab457600080fd5b5051919050565b60006020828403121562000ace57600080fd5b620006db826200095a565b6000825162000aed8184602087016200090e565b9190910192915050565b602081526000825180602084015262000b188160408501602087016200090e565b601f01601f19169190910160400192915050565b600181811c9082168062000b4157607f821691505b6020821081141562000b6357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051611f2162000ba460003960006112b8015260008181610140015281816113fd0152818161185d01526119d10152611f216000f3fe6080604052600436106100f75760003560e01c80638da5cb5b1161008a578063de260f3711610059578063de260f37146102e5578063e61cf1dc14610325578063ef99893a14610345578063f2fde38b1461036557600080fd5b80638da5cb5b1461025a5780639e8c708e14610285578063a9e40e07146102a5578063bc881467146102c557600080fd5b806369cff80d116100c657806369cff80d146101e1578063715018a61461020557806384a33e631461021a57806388156e651461023a57600080fd5b806306fdde031461010357806316f0115b1461012e578063427f91a61461018757806366b866f6146101ca57600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b50610118610385565b6040516101259190611c8b565b60405180910390f35b34801561013a57600080fd5b506101627f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610125565b34801561019357600080fd5b506101b76101a2366004611cfe565b600460205260009081526040902054600f0b81565b604051600f9190910b8152602001610125565b3480156101d657600080fd5b506101df610413565b005b3480156101ed57600080fd5b506101f760025481565b604051908152602001610125565b34801561021157600080fd5b506101df6105ed565b34801561022657600080fd5b506101df610235366004611d1b565b61067a565b34801561024657600080fd5b506101f7610255366004611d34565b610738565b34801561026657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610162565b34801561029157600080fd5b506101df6102a0366004611cfe565b610985565b3480156102b157600080fd5b506101626102c0366004611d87565b610b74565b3480156102d157600080fd5b506101df6102e0366004611d87565b610b7f565b3480156102f157600080fd5b50610315610300366004611cfe565b60036020526000908152604090205460ff1681565b6040519015158152602001610125565b34801561033157600080fd5b506101df610340366004611d87565b610c22565b34801561035157600080fd5b506101f7610360366004611dc0565b610cad565b34801561037157600080fd5b506101df610380366004611cfe565b610d19565b6001805461039290611e02565b80601f01602080910402602001604051908101604052809291908181526020018280546103be90611e02565b801561040b5780601f106103e05761010080835404028352916020019161040b565b820191906000526020600020905b8154815290600101906020018083116103ee57829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff163314610499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b4780610501576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a204e6f7468696e6720746f207265636f76657200000000006044820152606401610490565b6040518181526000907f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289060200160405180910390a2604051600090339083908381818185875af1925050503d8060008114610579576040519150601f19603f3d011682016040523d82523d6000602084013e61057e565b606091505b50509050806105e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f474153207472616e73666572206661696c6564000000000000000000000000006044820152606401610490565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461066e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b61067860006111e1565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b600281905560405181815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9060200160405180910390a250565b6000846107c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f416461707465723a20496e73756666696369656e7420696e70757420616d6f7560448201527f6e740000000000000000000000000000000000000000000000000000000000006064820152608401610490565b73ffffffffffffffffffffffffffffffffffffffff821661086a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f416461707465723a20746f2063616e6e6f74206265207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610490565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610900576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a20546f6b656e73206d7573742064696666657200000000006044820152606401610490565b61090a8484611256565b610970576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f416461707465723a20756e6b6e6f776e20746f6b656e730000000000000000006044820152606401610490565b61097c858585856112b4565b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a979190611e56565b905060008111610b03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a204e6f7468696e6720746f207265636f76657200000000006044820152606401610490565b8173ffffffffffffffffffffffffffffffffffffffff167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882604051610b4b91815260200190565b60405180910390a26105e973ffffffffffffffffffffffffffffffffffffffff83163383611307565b6000305b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b6105e973ffffffffffffffffffffffffffffffffffffffff8316826000610fcd565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ca3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b6105e9828261135d565b6000831580610ce757508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b80610cf95750610cf78383611256565b155b15610d0657506000610b78565b610d11848484611388565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b73ffffffffffffffffffffffffffffffffffffffff8116610e3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610490565b610e46816111e1565b50565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115610efb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610490565b5090565b60007fffffffffffffffffffffffffffffffff800000000000000000000000000000008212801590610f4157506f7fffffffffffffffffffffffffffffff8213155b610efb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610490565b80158061106d57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b9190611e56565b155b6110f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610490565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526111cd9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526114a1565b505050565b6060610d1184846000856115ad565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604081205460ff168015610b7857505073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205460ff16919050565b60007f0000000000000000000000000000000000000000000000000000000000000000156112ef576112e885858585611743565b9050610d11565b6112fa858585611955565b9050610d11838284611abb565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526111cd9084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161114b565b6105e9827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83611af9565b73ffffffffffffffffffffffffffffffffffffffff82811660009081526004602081905260408083205485851684528184205491517f5e0d443f000000000000000000000000000000000000000000000000000000008152600f91820b938101939093520b60248201526044810186905290917f00000000000000000000000000000000000000000000000000000000000000001690635e0d443f90606401602060405180830381865afa92505050801561147e575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261147b91810190611e56565b60015b61148a57506000610b78565b8061149657600061097c565b61097c600182611e6f565b6000611503826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111d29092919063ffffffff16565b8051909150156111cd57808060200190518101906115219190611ead565b6111cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610490565b60608247101561163f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610490565b73ffffffffffffffffffffffffffffffffffffffff85163b6116bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610490565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116e69190611ecf565b60006040518083038185875af1925050503d8060008114611723576040519150601f19603f3d011682016040523d82523d6000602084013e611728565b606091505b5091509150611738828286611c0c565b979650505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152600091908416906370a0823190602401602060405180830381865afa1580156117b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d79190611e56565b73ffffffffffffffffffffffffffffffffffffffff85811660009081526004602081905260408083205488851684528184205491517fddc1f59d000000000000000000000000000000000000000000000000000000008152600f91820b938101939093520b602482015260448101899052606481019190915284821660848201529192507f0000000000000000000000000000000000000000000000000000000000000000169063ddc1f59d9060a401600060405180830381600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b50506040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152849350861691506370a0823190602401602060405180830381865afa158015611927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194b9190611e56565b61097c9190611e6f565b73ffffffffffffffffffffffffffffffffffffffff82811660009081526004602081905260408083205485851684528184205491517f3df02124000000000000000000000000000000000000000000000000000000008152600f91820b938101939093520b6024820152604481018690526064810182905290917f00000000000000000000000000000000000000000000000000000000000000001690633df0212490608401600060405180830381600087803b158015611a1557600080fd5b505af1158015611a29573d6000803e3d6000fd5b50506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff851692506370a082319150602401602060405180830381865afa158015611a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190611e56565b3073ffffffffffffffffffffffffffffffffffffffff8216146111cd576111cd73ffffffffffffffffffffffffffffffffffffffff84168284611307565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff82811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b939190611e56565b905082811015611c06578015611bc557611bc573ffffffffffffffffffffffffffffffffffffffff8516836000610fcd565b611c0673ffffffffffffffffffffffffffffffffffffffff8516837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610fcd565b50505050565b60608315611c1b575081610b78565b825115611c2b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104909190611c8b565b60005b83811015611c7a578181015183820152602001611c62565b83811115611c065750506000910152565b6020815260008251806020840152611caa816040850160208701611c5f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b73ffffffffffffffffffffffffffffffffffffffff81168114610e4657600080fd5b600060208284031215611d1057600080fd5b8135610b7881611cdc565b600060208284031215611d2d57600080fd5b5035919050565b60008060008060808587031215611d4a57600080fd5b843593506020850135611d5c81611cdc565b92506040850135611d6c81611cdc565b91506060850135611d7c81611cdc565b939692955090935050565b60008060408385031215611d9a57600080fd5b8235611da581611cdc565b91506020830135611db581611cdc565b809150509250929050565b600080600060608486031215611dd557600080fd5b833592506020840135611de781611cdc565b91506040840135611df781611cdc565b809150509250925092565b600181811c90821680611e1657607f821691505b60208210811415611e50577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215611e6857600080fd5b5051919050565b600082821015611ea8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b600060208284031215611ebf57600080fd5b81518015158114610b7857600080fd5b60008251611ee1818460208701611c5f565b919091019291505056fea2646970667358221220a4af079a08194a9cb3b166dca60d91a7a8ab929add4152841d70e31856fd933364736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c80638da5cb5b1161008a578063de260f3711610059578063de260f37146102e5578063e61cf1dc14610325578063ef99893a14610345578063f2fde38b1461036557600080fd5b80638da5cb5b1461025a5780639e8c708e14610285578063a9e40e07146102a5578063bc881467146102c557600080fd5b806369cff80d116100c657806369cff80d146101e1578063715018a61461020557806384a33e631461021a57806388156e651461023a57600080fd5b806306fdde031461010357806316f0115b1461012e578063427f91a61461018757806366b866f6146101ca57600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b50610118610385565b6040516101259190611c8b565b60405180910390f35b34801561013a57600080fd5b506101627f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610125565b34801561019357600080fd5b506101b76101a2366004611cfe565b600460205260009081526040902054600f0b81565b604051600f9190910b8152602001610125565b3480156101d657600080fd5b506101df610413565b005b3480156101ed57600080fd5b506101f760025481565b604051908152602001610125565b34801561021157600080fd5b506101df6105ed565b34801561022657600080fd5b506101df610235366004611d1b565b61067a565b34801561024657600080fd5b506101f7610255366004611d34565b610738565b34801561026657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610162565b34801561029157600080fd5b506101df6102a0366004611cfe565b610985565b3480156102b157600080fd5b506101626102c0366004611d87565b610b74565b3480156102d157600080fd5b506101df6102e0366004611d87565b610b7f565b3480156102f157600080fd5b50610315610300366004611cfe565b60036020526000908152604090205460ff1681565b6040519015158152602001610125565b34801561033157600080fd5b506101df610340366004611d87565b610c22565b34801561035157600080fd5b506101f7610360366004611dc0565b610cad565b34801561037157600080fd5b506101df610380366004611cfe565b610d19565b6001805461039290611e02565b80601f01602080910402602001604051908101604052809291908181526020018280546103be90611e02565b801561040b5780601f106103e05761010080835404028352916020019161040b565b820191906000526020600020905b8154815290600101906020018083116103ee57829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff163314610499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b4780610501576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a204e6f7468696e6720746f207265636f76657200000000006044820152606401610490565b6040518181526000907f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289060200160405180910390a2604051600090339083908381818185875af1925050503d8060008114610579576040519150601f19603f3d011682016040523d82523d6000602084013e61057e565b606091505b50509050806105e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f474153207472616e73666572206661696c6564000000000000000000000000006044820152606401610490565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461066e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b61067860006111e1565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b600281905560405181815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9060200160405180910390a250565b6000846107c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f416461707465723a20496e73756666696369656e7420696e70757420616d6f7560448201527f6e740000000000000000000000000000000000000000000000000000000000006064820152608401610490565b73ffffffffffffffffffffffffffffffffffffffff821661086a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f416461707465723a20746f2063616e6e6f74206265207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610490565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610900576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a20546f6b656e73206d7573742064696666657200000000006044820152606401610490565b61090a8484611256565b610970576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f416461707465723a20756e6b6e6f776e20746f6b656e730000000000000000006044820152606401610490565b61097c858585856112b4565b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a979190611e56565b905060008111610b03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416461707465723a204e6f7468696e6720746f207265636f76657200000000006044820152606401610490565b8173ffffffffffffffffffffffffffffffffffffffff167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882604051610b4b91815260200190565b60405180910390a26105e973ffffffffffffffffffffffffffffffffffffffff83163383611307565b6000305b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b6105e973ffffffffffffffffffffffffffffffffffffffff8316826000610fcd565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ca3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b6105e9828261135d565b6000831580610ce757508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b80610cf95750610cf78383611256565b155b15610d0657506000610b78565b610d11848484611388565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610490565b73ffffffffffffffffffffffffffffffffffffffff8116610e3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610490565b610e46816111e1565b50565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115610efb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610490565b5090565b60007fffffffffffffffffffffffffffffffff800000000000000000000000000000008212801590610f4157506f7fffffffffffffffffffffffffffffff8213155b610efb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610490565b80158061106d57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b9190611e56565b155b6110f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610490565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526111cd9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526114a1565b505050565b6060610d1184846000856115ad565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604081205460ff168015610b7857505073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205460ff16919050565b60007f0000000000000000000000000000000000000000000000000000000000000000156112ef576112e885858585611743565b9050610d11565b6112fa858585611955565b9050610d11838284611abb565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526111cd9084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161114b565b6105e9827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83611af9565b73ffffffffffffffffffffffffffffffffffffffff82811660009081526004602081905260408083205485851684528184205491517f5e0d443f000000000000000000000000000000000000000000000000000000008152600f91820b938101939093520b60248201526044810186905290917f00000000000000000000000000000000000000000000000000000000000000001690635e0d443f90606401602060405180830381865afa92505050801561147e575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261147b91810190611e56565b60015b61148a57506000610b78565b8061149657600061097c565b61097c600182611e6f565b6000611503826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111d29092919063ffffffff16565b8051909150156111cd57808060200190518101906115219190611ead565b6111cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610490565b60608247101561163f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610490565b73ffffffffffffffffffffffffffffffffffffffff85163b6116bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610490565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116e69190611ecf565b60006040518083038185875af1925050503d8060008114611723576040519150601f19603f3d011682016040523d82523d6000602084013e611728565b606091505b5091509150611738828286611c0c565b979650505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152600091908416906370a0823190602401602060405180830381865afa1580156117b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d79190611e56565b73ffffffffffffffffffffffffffffffffffffffff85811660009081526004602081905260408083205488851684528184205491517fddc1f59d000000000000000000000000000000000000000000000000000000008152600f91820b938101939093520b602482015260448101899052606481019190915284821660848201529192507f0000000000000000000000000000000000000000000000000000000000000000169063ddc1f59d9060a401600060405180830381600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b50506040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152849350861691506370a0823190602401602060405180830381865afa158015611927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194b9190611e56565b61097c9190611e6f565b73ffffffffffffffffffffffffffffffffffffffff82811660009081526004602081905260408083205485851684528184205491517f3df02124000000000000000000000000000000000000000000000000000000008152600f91820b938101939093520b6024820152604481018690526064810182905290917f00000000000000000000000000000000000000000000000000000000000000001690633df0212490608401600060405180830381600087803b158015611a1557600080fd5b505af1158015611a29573d6000803e3d6000fd5b50506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff851692506370a082319150602401602060405180830381865afa158015611a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190611e56565b3073ffffffffffffffffffffffffffffffffffffffff8216146111cd576111cd73ffffffffffffffffffffffffffffffffffffffff84168284611307565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff82811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b939190611e56565b905082811015611c06578015611bc557611bc573ffffffffffffffffffffffffffffffffffffffff8516836000610fcd565b611c0673ffffffffffffffffffffffffffffffffffffffff8516837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610fcd565b50505050565b60608315611c1b575081610b78565b825115611c2b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104909190611c8b565b60005b83811015611c7a578181015183820152602001611c62565b83811115611c065750506000910152565b6020815260008251806020840152611caa816040850160208701611c5f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b73ffffffffffffffffffffffffffffffffffffffff81168114610e4657600080fd5b600060208284031215611d1057600080fd5b8135610b7881611cdc565b600060208284031215611d2d57600080fd5b5035919050565b60008060008060808587031215611d4a57600080fd5b843593506020850135611d5c81611cdc565b92506040850135611d6c81611cdc565b91506060850135611d7c81611cdc565b939692955090935050565b60008060408385031215611d9a57600080fd5b8235611da581611cdc565b91506020830135611db581611cdc565b809150509250929050565b600080600060608486031215611dd557600080fd5b833592506020840135611de781611cdc565b91506040840135611df781611cdc565b809150509250925092565b600181811c90821680611e1657607f821691505b60208210811415611e50577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215611e6857600080fd5b5051919050565b600082821015611ea8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b600060208284031215611ebf57600080fd5b81518015158114610b7857600080fd5b60008251611ee1818460208701611c5f565b919091019291505056fea2646970667358221220a4af079a08194a9cb3b166dca60d91a7a8ab929add4152841d70e31856fd933364736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositAddress(address,address)": {
        "returns": {
          "_0": "Address to transfer tokens in order for swap() to work"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "query(uint256,address,address)": {
        "params": {
          "amountIn": "input amount in starting token",
          "tokenIn": "ERC20 token being sold",
          "tokenOut": "ERC20 token being bought"
        }
      },
      "recoverERC20(address)": {
        "params": {
          "token": "token to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeTokenAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setSwapGasEstimate(uint256)": {
        "details": "this is estimated amount of gas that's used by swap() implementation"
      },
      "swap(uint256,address,address,address)": {
        "params": {
          "amountIn": "input amount in starting token",
          "to": "address where swapped funds should be sent to",
          "tokenIn": "ERC20 token being sold",
          "tokenOut": "ERC20 token being bought"
        },
        "returns": {
          "amountOut": "amount of tokenOut tokens received in swap"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "tokenIndex": {
        "details": "Base Adapter is using int128 for indexes and is using exchange() for swaps"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "query(uint256,address,address)": {
        "notice": "Get query for a swap through this adapter"
      },
      "recoverERC20(address)": {
        "notice": "Recover ERC20 from contract"
      },
      "recoverGAS()": {
        "notice": "Recover GAS from contract"
      },
      "revokeTokenAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "swap(uint256,address,address,address)": {
        "notice": "Execute a swap with given input amount of tokens from tokenIn to tokenOut,         assuming input tokens were transferred to depositAddress(tokenIn, tokenOut)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/router/adapters/curve/CurveBaseAdapter.sol:CurveBaseAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4048,
        "contract": "contracts/router/adapters/curve/CurveBaseAdapter.sol:CurveBaseAdapter",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 4050,
        "contract": "contracts/router/adapters/curve/CurveBaseAdapter.sol:CurveBaseAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7279,
        "contract": "contracts/router/adapters/curve/CurveBaseAdapter.sol:CurveBaseAdapter",
        "label": "isPoolToken",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7474,
        "contract": "contracts/router/adapters/curve/CurveBaseAdapter.sol:CurveBaseAdapter",
        "label": "tokenIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_int128)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}