{
  "address": "0xf0284FB86adA5E4D82555C529677eEA3B2C3E022",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "getTrustedRemote",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "trustedRemote",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_receiver",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_dstChainId",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_message",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_options",
          "type": "bytes[]"
        }
      ],
      "name": "sendMultipleMessages",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b97126840e6fb3a7a0e2310b93d59aee58bca48e1a68991a100d8fd5fb594e3",
  "receipt": {
    "to": null,
    "from": "0x235AF07E770f474d24F5bf73074735892371b40D",
    "contractAddress": "0xf0284FB86adA5E4D82555C529677eEA3B2C3E022",
    "transactionIndex": 7,
    "gasUsed": "913774",
    "logsBloom": "0x
    "blockHash": "0xd71f3c85ea423825c61081c0c3905d5ac5cb82d4937f116653e69b2740206e66",
    "transactionHash": "0x5b97126840e6fb3a7a0e2310b93d59aee58bca48e1a68991a100d8fd5fb594e3",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 1516665,
        "transactionHash": "0x5b97126840e6fb3a7a0e2310b93d59aee58bca48e1a68991a100d8fd5fb594e3",
        "address": "0xf0284FB86adA5E4D82555C529677eEA3B2C3E022",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000235af07e770f474d24f5bf73074735892371b40d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd71f3c85ea423825c61081c0c3905d5ac5cb82d4937f116653e69b2740206e66"
      }
    ],
    "blockNumber": 1516665,
    "cumulativeGasUsed": "1246680",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7bc5fD6b80067d6052A4550c69f152877bF7C748"
  ],
  "solcInputHash": "200756367ec4af6f4417c57087503c7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getTrustedRemote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"trustedRemote\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_receiver\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_dstChainId\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_message\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_options\",\"type\":\"bytes[]\"}],\"name\":\"sendMultipleMessages\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"details\":\"Must be called by MessageBug & sent from src chain by a trusted srcApp\",\"params\":{\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_srcAddress\":\"The bytes32 address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Example app of sending multiple messages in one transaction\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"notice\":\"Executes a message called by MessageBus (MessageBusReceiver)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/apps/BatchMessageSender.sol\":\"BatchMessageSender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/messaging/apps/BatchMessageSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../framework/SynMessagingReceiver.sol\\\";\\n\\npragma solidity 0.8.13;\\n\\n/** @title Example app of sending multiple messages in one transaction\\n */\\n\\ncontract BatchMessageSender is SynMessagingReceiver {\\n    constructor(address _messageBus) {\\n        messageBus = _messageBus;\\n    }\\n\\n    function sendMultipleMessages(bytes32[] memory _receiver, uint256[] memory _dstChainId, bytes[] memory _message, bytes[] memory _options) public payable {\\n        require(_receiver.length == _dstChainId.length);\\n        require(_receiver.length == _message.length);\\n        require(_receiver.length == _options.length);\\n\\n        uint256 feePerMessage = msg.value / _message.length;\\n\\n        // Care for block gas limit\\n        for (uint16 i = 0; i < _message.length; i++) {\\n            require(trustedRemoteLookup[_dstChainId[i]] != bytes32(0), \\\"Receiver not trusted remote\\\");\\n            IMessageBus(messageBus).sendMessage{value: feePerMessage}(_receiver[i], _dstChainId[i], _message[i], _options[i]);\\n        }\\n    }\\n\\n    function _handleMessage(bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes memory _message,\\n        address _executor) internal override {\\n            return;\\n        }\\n}\\n\",\"keccak256\":\"0x73e7d3c8aabb7998afde193da3043f80c93164b2e2c550eee4ba68f9688b2d46\",\"license\":\"MIT\"},\"contracts/messaging/framework/SynMessagingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/ISynMessagingReceiver.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\n\\nabstract contract SynMessagingReceiver is ISynMessagingReceiver, Ownable {\\n    \\n    address public messageBus;\\n\\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\\n    mapping(uint256 => bytes32) internal trustedRemoteLookup;\\n\\n    event SetTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress);\\n\\n\\n    /**\\n     * @notice Executes a message called by MessageBus (MessageBusReceiver)\\n     * @dev Must be called by MessageBug & sent from src chain by a trusted srcApp\\n     * @param _srcAddress The bytes32 address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external {\\n        // Must be called by the MessageBus/MessageBus for security\\n        require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        // Must also be from a trusted source app\\n        require(_srcAddress == trustedRemoteLookup[_srcChainId], \\\"Invalid source sending app\\\");\\n\\n        _handleMessage(_srcAddress, _srcChainId, _message, _executor);\\n    }\\n\\n    // Logic here handling messsage contents\\n    function _handleMessage(bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes memory _message,\\n        address _executor) internal virtual;\\n\\n\\n    function _send(bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes memory _message,\\n        bytes memory _options) internal virtual {\\n            require(trustedRemoteLookup[_dstChainId] != bytes32(0), \\\"Receiver not trusted remote\\\");\\n            IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\\n    }\\n\\n    //** Config Functions */\\n    function setMessageBus(address _messageBus) public onlyOwner {\\n        messageBus = _messageBus;\\n    }\\n\\n     // allow owner to set trusted addresses allowed to be source senders\\n    function setTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\n    }\\n\\n    //** View functions */\\n    function getTrustedRemote(uint256 _chainId) external view returns (bytes32 trustedRemote) {\\n        return trustedRemoteLookup[_chainId];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x159e22beeed8ce7868c6f4ff3fdb2749e0a9398af16130face5dac349d6f08cc\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IMessageBus {\\n    \\n    /**\\n     * @notice Sends a message to a receiving contract address on another chain. \\n     * Sender must make sure that the message is unique and not a duplicate message.\\n     * @param _receiver The bytes32 address of the destination contract to be called\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _message The arbitrary payload to pass to the destination chain receiver\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\\n     */\\n    function sendMessage(\\n        bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message,\\n        bytes calldata _options\\n    ) external payable;\\n\\n    /**\\n    * @notice Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\\n     * @param _srcAddress Originating bytes address of the message sender on the srcChain\\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\\n     * @param _nonce Nonce from origin chain\\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\\n     * @param _messageId MessageId for uniqueness of messages (alongisde nonce)\\n     */\\n    function executeMessage(\\n        uint256 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint256 _gasLimit,\\n        uint256 _nonce,\\n        bytes calldata _message,\\n        bytes32 _messageId\\n    ) external;\\n\\n\\n    /**\\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\\n     */\\n    function estimateFee(uint256 _dstChainId, bytes calldata _options)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     */\\n    function withdrawFee(\\n        address _account\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x093e1de0a5b809cdb555dcc10930fab5ed45db9b60020283ca430a86d2ab88f4\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/ISynMessagingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISynMessagingReceiver {\\n\\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\\n    // mapping(uint256 => bytes32) internal trustedRemoteLookup;\\n\\n     /**\\n     * @notice Called by MessageBus \\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\\n     * @param _srcAddress The bytes32 address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external;\\n}\\n    \",\"keccak256\":\"0xba5ab0e72e5e312080dfe929264e63db0d2dc94748b43588102fab7cfab3c4de\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100965760003560e01c8063a1a227fa11610069578063b51ca31e1161004e578063b51ca31e146101ab578063bd3583ae146101be578063f2fde38b146101de57600080fd5b8063a1a227fa1461015e578063a60608711461018b57600080fd5b8063547cad121461009b578063715018a6146100bd57806384a12b0f146100d25780638da5cb5b14610112575b600080fd5b3480156100a757600080fd5b506100bb6100b636600461092f565b6101fe565b005b3480156100c957600080fd5b506100bb6102cb565b3480156100de57600080fd5b506100ff6100ed366004610951565b60009081526002602052604090205490565b6040519081526020015b60405180910390f35b34801561011e57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610109565b34801561016a57600080fd5b506001546101399073ffffffffffffffffffffffffffffffffffffffff1681565b34801561019757600080fd5b506100bb6101a636600461096a565b610358565b6100bb6101b9366004610c10565b61049a565b3480156101ca57600080fd5b506100bb6101d9366004610d12565b61068b565b3480156101ea57600080fd5b506100bb6101f936600461092f565b61075b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461034c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161027b565b610356600061088b565b565b60015473ffffffffffffffffffffffffffffffffffffffff1633146103d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161027b565b6000848152600260205260409020548514610450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f496e76616c696420736f757263652073656e64696e6720617070000000000000604482015260640161027b565b610493858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250610900915050565b5050505050565b82518451146104a857600080fd5b81518451146104b657600080fd5b80518451146104c457600080fd5b60008251346104d39190610d34565b905060005b83518161ffff161015610683576000801b60026000878461ffff168151811061050357610503610d6f565b602002602001015181526020019081526020016000205403610581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5265636569766572206e6f7420747275737465642072656d6f74650000000000604482015260640161027b565b600154865173ffffffffffffffffffffffffffffffffffffffff9091169063ac8a4c1b908490899061ffff86169081106105bd576105bd610d6f565b6020026020010151888561ffff16815181106105db576105db610d6f565b6020026020010151888661ffff16815181106105f9576105f9610d6f565b6020026020010151888761ffff168151811061061757610617610d6f565b60200260200101516040518663ffffffff1660e01b815260040161063e9493929190610e09565b6000604051808303818588803b15801561065757600080fd5b505af115801561066b573d6000803e3d6000fd5b5050505050808061067b90610e45565b9150506104d8565b505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461070c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161027b565b60008281526002602090815260409182902083905581518481529081018390527f642e74356c0610a9f944fb1a2d88d2fb82c6b74921566eee8bc0f9bb30f74f03910160405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161027b565b73ffffffffffffffffffffffffffffffffffffffff811661087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161027b565b6108888161088b565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b50505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461092a57600080fd5b919050565b60006020828403121561094157600080fd5b61094a82610906565b9392505050565b60006020828403121561096357600080fd5b5035919050565b60008060008060006080868803121561098257600080fd5b8535945060208601359350604086013567ffffffffffffffff808211156109a857600080fd5b818801915088601f8301126109bc57600080fd5b8135818111156109cb57600080fd5b8960208285010111156109dd57600080fd5b6020830195508094505050506109f560608701610906565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610a7757610a77610a01565b604052919050565b600067ffffffffffffffff821115610a9957610a99610a01565b5060051b60200190565b600082601f830112610ab457600080fd5b81356020610ac9610ac483610a7f565b610a30565b82815260059290921b84018101918181019086841115610ae857600080fd5b8286015b84811015610b035780358352918301918301610aec565b509695505050505050565b6000601f8381840112610b2057600080fd5b82356020610b30610ac483610a7f565b82815260059290921b85018101918181019087841115610b4f57600080fd5b8287015b84811015610c0457803567ffffffffffffffff80821115610b745760008081fd5b818a0191508a603f830112610b895760008081fd5b85820135604082821115610b9f57610b9f610a01565b610bce887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08c85011601610a30565b92508183528c81838601011115610be55760008081fd5b8181850189850137506000908201870152845250918301918301610b53565b50979650505050505050565b60008060008060808587031215610c2657600080fd5b843567ffffffffffffffff80821115610c3e57600080fd5b818701915087601f830112610c5257600080fd5b81356020610c62610ac483610a7f565b82815260059290921b8401810191818101908b841115610c8157600080fd5b948201945b83861015610c9f57853582529482019490820190610c86565b98505088013592505080821115610cb557600080fd5b610cc188838901610aa3565b94506040870135915080821115610cd757600080fd5b610ce388838901610b0e565b93506060870135915080821115610cf957600080fd5b50610d0687828801610b0e565b91505092959194509250565b60008060408385031215610d2557600080fd5b50508035926020909101359150565b600082610d6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815180845260005b81811015610dc457602081850181015186830182015201610da8565b81811115610dd6576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b848152836020820152608060408201526000610e286080830185610d9e565b8281036060840152610e3a8185610d9e565b979650505050505050565b600061ffff808316818103610e83577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600101939250505056fea2646970667358221220c4fe76b67ad00eb1e02a1c1fdad838cc84729e14bd415444fa82917455d5302164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessage(bytes32,uint256,bytes,address)": {
        "details": "Must be called by MessageBug & sent from src chain by a trusted srcApp",
        "params": {
          "_executor": "Address who called the MessageBus execution function",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_srcAddress": "The bytes32 address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Example app of sending multiple messages in one transaction",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessage(bytes32,uint256,bytes,address)": {
        "notice": "Executes a message called by MessageBus (MessageBusReceiver)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/messaging/apps/BatchMessageSender.sol:BatchMessageSender",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12454,
        "contract": "contracts/messaging/apps/BatchMessageSender.sol:BatchMessageSender",
        "label": "messageBus",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12458,
        "contract": "contracts/messaging/apps/BatchMessageSender.sol:BatchMessageSender",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}