{
  "address": "0x6a00Dc976a7291a1E9F5380FE6F96fE006dCdD3c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaiaTear",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dstUser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arrivalChainId",
          "type": "uint256"
        }
      ],
      "name": "GaiaArrived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dstUser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "arrivalChainId",
          "type": "uint256"
        }
      ],
      "name": "GaiaSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaiaTears",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "getTrustedRemote",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "trustedRemote",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "msgGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tearsAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        }
      ],
      "name": "sendTear",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_msgGasLimit",
          "type": "uint256"
        }
      ],
      "name": "setMsgGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x03d383de1f258a0351dc7e103251cb5af4ee8a8b090463a1be3f399059e5cb6d",
  "receipt": {
    "to": null,
    "from": "0x235AF07E770f474d24F5bf73074735892371b40D",
    "contractAddress": "0x6a00Dc976a7291a1E9F5380FE6F96fE006dCdD3c",
    "transactionIndex": 3,
    "gasUsed": "923298",
    "logsBloom": "0x
    "blockHash": "0xd56f55dc74d41460546ebcbf7b83eee1d818c85a78f775a6a1018d22abe08b96",
    "transactionHash": "0x03d383de1f258a0351dc7e103251cb5af4ee8a8b090463a1be3f399059e5cb6d",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 1514780,
        "transactionHash": "0x03d383de1f258a0351dc7e103251cb5af4ee8a8b090463a1be3f399059e5cb6d",
        "address": "0x6a00Dc976a7291a1E9F5380FE6F96fE006dCdD3c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000235af07e770f474d24f5bf73074735892371b40d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd56f55dc74d41460546ebcbf7b83eee1d818c85a78f775a6a1018d22abe08b96"
      }
    ],
    "blockNumber": 1514780,
    "cumulativeGasUsed": "1065942",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7bc5fD6b80067d6052A4550c69f152877bF7C748",
    "0x58E63A9bbb2047cd9Ba7E6bB4490C238d271c278"
  ],
  "solcInputHash": "a3b42a6bd52c323c3781e633e0d442ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaiaTear\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrivalChainId\",\"type\":\"uint256\"}],\"name\":\"GaiaArrived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrivalChainId\",\"type\":\"uint256\"}],\"name\":\"GaiaSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaiaTears\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getTrustedRemote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"trustedRemote\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tearsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"}],\"name\":\"sendTear\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_msgGasLimit\",\"type\":\"uint256\"}],\"name\":\"setMsgGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"details\":\"Must be called by MessageBug & sent from src chain by a trusted srcApp\",\"params\":{\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_srcAddress\":\"The bytes32 address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"notice\":\"Executes a message called by MessageBus (MessageBusReceiver)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/dfk/bridge/TearBridge.sol\":\"TearBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/messaging/dfk/bridge/TearBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../../framework/SynMessagingReceiver.sol\\\";\\n\\nimport \\\"../inventory/IInventoryItem.sol\\\";\\n\\ncontract TearBridge is SynMessagingReceiver {\\n        address public immutable gaiaTears;\\n        uint256 public msgGasLimit;\\n\\n    struct MessageFormat {\\n        address dstUser;\\n        uint256 dstTearAmount;\\n    }\\n    \\n    event GaiaSent(address indexed dstUser, uint256 arrivalChainId);\\n    event GaiaArrived(address indexed dstUser, uint256 arrivalChainId);\\n\\n    constructor(\\n        address _messageBus,\\n        address _gaiaTear\\n    ) {\\n        messageBus = _messageBus;\\n        gaiaTears = _gaiaTear; \\n    }\\n\\n    function _createMessage(\\n        address _dstUserAddress,\\n        uint256 _dstTearAmount\\n    ) internal pure returns (bytes memory) {\\n        // create the message here from the nested struct\\n        MessageFormat memory msgFormat = MessageFormat({\\n            dstUser: _dstUserAddress,\\n            dstTearAmount: _dstTearAmount\\n        });\\n        return abi.encode(msgFormat);\\n    }\\n\\n    function _decodeMessage(bytes memory _message)\\n        internal\\n        pure\\n        returns (MessageFormat memory)\\n    {\\n        MessageFormat memory decodedMessage = abi.decode(\\n            _message,\\n            (MessageFormat)\\n        );\\n        return decodedMessage;\\n    }\\n\\n    function _createOptions() internal view returns (bytes memory) {\\n        return abi.encodePacked(uint16(1), msgGasLimit);\\n    }\\n\\n    function sendTear(uint256 _tearsAmount, uint256 _dstChainId) external payable {\\n        uint256 tearsAmount = _tearsAmount;\\n        uint256 dstChainId = _dstChainId;\\n        // Tears now burnt, equivalent amount will be bridged to dstChainId\\n        IInventoryItem(gaiaTears).burnFrom(msg.sender, tearsAmount);\\n\\n        bytes32 receiver = trustedRemoteLookup[dstChainId];\\n        bytes memory message = _createMessage(msg.sender, tearsAmount);\\n        bytes memory options = _createOptions();\\n\\n        _send(receiver, dstChainId, message, options);\\n        emit GaiaSent(msg.sender, tearsAmount);\\n    }\\n\\n    // Function called by executeMessage() - handleMessage will handle the gaia tear mint\\n    // executeMessage() handles permissioning checks\\n    function _handleMessage(bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes memory _message,\\n        address _executor) internal override {\\n            MessageFormat memory passedMsg = _decodeMessage(_message);\\n            address dstUser = passedMsg.dstUser;\\n            uint256 dstTearAmount = passedMsg.dstTearAmount;\\n            IInventoryItem(gaiaTears).mint(dstUser, dstTearAmount);\\n            emit GaiaArrived(dstUser, dstTearAmount);\\n        }\\n\\n    function _send(\\n        bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes memory _message,\\n        bytes memory _options\\n    ) internal override {\\n        bytes32 trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote != bytes32(0), \\\"No remote app set for dst chain\\\");\\n        require(trustedRemote == _receiver, \\\"Receiver is not in trusted remote apps\\\");\\n        IMessageBus(messageBus).sendMessage{value: msg.value}(\\n            _receiver,\\n            _dstChainId,\\n            _message,\\n            _options\\n        );\\n    }\\n\\n\\n    function setMsgGasLimit(uint256 _msgGasLimit) external onlyOwner {\\n        msgGasLimit = _msgGasLimit;\\n    }\\n}\",\"keccak256\":\"0x6740eec94cd97ea1726d9c6829b72f96d4ef1ebbfc8f4dbc46f9652979a38f88\",\"license\":\"MIT\"},\"contracts/messaging/dfk/inventory/IInventoryItem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of Inventory Items.\\n */\\ninterface IInventoryItem is IERC20 {\\n    /**\\n     * @dev Burns tokens.\\n     */\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n}\",\"keccak256\":\"0xb0cf03ad40b94dd9db77bcf45240c175c167ffd26193b0536807cefa2be72449\",\"license\":\"MIT\"},\"contracts/messaging/framework/SynMessagingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/ISynMessagingReceiver.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\n\\nabstract contract SynMessagingReceiver is ISynMessagingReceiver, Ownable {\\n    \\n    address public messageBus;\\n\\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\\n    mapping(uint256 => bytes32) internal trustedRemoteLookup;\\n\\n    event SetTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress);\\n\\n\\n    /**\\n     * @notice Executes a message called by MessageBus (MessageBusReceiver)\\n     * @dev Must be called by MessageBug & sent from src chain by a trusted srcApp\\n     * @param _srcAddress The bytes32 address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external {\\n        // Must be called by the MessageBus/MessageBus for security\\n        require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        // Must also be from a trusted source app\\n        require(_srcAddress == trustedRemoteLookup[_srcChainId], \\\"Invalid source sending app\\\");\\n\\n        _handleMessage(_srcAddress, _srcChainId, _message, _executor);\\n    }\\n\\n    // Logic here handling messsage contents\\n    function _handleMessage(bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes memory _message,\\n        address _executor) internal virtual;\\n\\n\\n    function _send(bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes memory _message,\\n        bytes memory _options) internal virtual {\\n            require(trustedRemoteLookup[_dstChainId] != bytes32(0), \\\"Receiver not trusted remote\\\");\\n            IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\\n    }\\n\\n    //** Config Functions */\\n    function setMessageBus(address _messageBus) public onlyOwner {\\n        messageBus = _messageBus;\\n    }\\n\\n     // allow owner to set trusted addresses allowed to be source senders\\n    function setTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\n    }\\n\\n    //** View functions */\\n    function getTrustedRemote(uint256 _chainId) external view returns (bytes32 trustedRemote) {\\n        return trustedRemoteLookup[_chainId];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x159e22beeed8ce7868c6f4ff3fdb2749e0a9398af16130face5dac349d6f08cc\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IMessageBus {\\n    \\n    /**\\n     * @notice Sends a message to a receiving contract address on another chain. \\n     * Sender must make sure that the message is unique and not a duplicate message.\\n     * @param _receiver The bytes32 address of the destination contract to be called\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _message The arbitrary payload to pass to the destination chain receiver\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\\n     */\\n    function sendMessage(\\n        bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message,\\n        bytes calldata _options\\n    ) external payable;\\n\\n    /**\\n    * @notice Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\\n     * @param _srcAddress Originating bytes address of the message sender on the srcChain\\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\\n     * @param _nonce Nonce from origin chain\\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\\n     * @param _messageId MessageId for uniqueness of messages (alongisde nonce)\\n     */\\n    function executeMessage(\\n        uint256 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint256 _gasLimit,\\n        uint256 _nonce,\\n        bytes calldata _message,\\n        bytes32 _messageId\\n    ) external;\\n\\n\\n    /**\\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\\n     */\\n    function estimateFee(uint256 _dstChainId, bytes calldata _options)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     */\\n    function withdrawFee(\\n        address _account\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x093e1de0a5b809cdb555dcc10930fab5ed45db9b60020283ca430a86d2ab88f4\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/ISynMessagingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISynMessagingReceiver {\\n\\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\\n    // mapping(uint256 => bytes32) internal trustedRemoteLookup;\\n\\n     /**\\n     * @notice Called by MessageBus \\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\\n     * @param _srcAddress The bytes32 address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external;\\n}\\n    \",\"keccak256\":\"0xba5ab0e72e5e312080dfe929264e63db0d2dc94748b43588102fab7cfab3c4de\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100c75760003560e01c8063a606087111610074578063c0e07f281161004e578063c0e07f2814610243578063f2fde38b14610259578063f9ecc6f51461027957600080fd5b8063a6060871146101cf578063acac4bdd146101ef578063bd3583ae1461022357600080fd5b806384a12b0f116100a557806384a12b0f146101165780638da5cb5b14610156578063a1a227fa146101a257600080fd5b8063547cad12146100cc578063715018a6146100ee5780638273190314610103575b600080fd5b3480156100d857600080fd5b506100ec6100e7366004610ca4565b610299565b005b3480156100fa57600080fd5b506100ec610366565b6100ec610111366004610cc1565b6103f3565b34801561012257600080fd5b50610143610131366004610ce3565b60009081526002602052604090205490565b6040519081526020015b60405180910390f35b34801561016257600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161014d565b3480156101ae57600080fd5b5060015461017d9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101db57600080fd5b506100ec6101ea366004610cfc565b61056d565b3480156101fb57600080fd5b5061017d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561022f57600080fd5b506100ec61023e366004610cc1565b6106af565b34801561024f57600080fd5b5061014360035481565b34801561026557600080fd5b506100ec610274366004610ca4565b61077f565b34801561028557600080fd5b506100ec610294366004610ce3565b6108af565b60005473ffffffffffffffffffffffffffffffffffffffff16331461031f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610316565b6103f16000610935565b565b6040517f79cc679000000000000000000000000000000000000000000000000000000000815233600482015260248101839052829082907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906379cc679090604401600060405180830381600087803b15801561048557600080fd5b505af1158015610499573d6000803e3d6000fd5b50505060008281526002602090815260409182902054825180840184523380825290830187815284519384019190915251828401528251808303840181526060830184526003547e0100000000000000000000000000000000000000000000000000000000000060808501526082808501919091528451808503909101815260a2909301909352925061052e838584846109aa565b60405185815233907fe82273e05845454dcf88823968e5c722028bc4cb17ed03bdc06eaa32cc58ee66906020015b60405180910390a250505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f63616c6c6572206973206e6f74206d65737361676520627573000000000000006044820152606401610316565b6000848152600260205260409020548514610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f496e76616c696420736f757263652073656e64696e67206170700000000000006044820152606401610316565b6106a8858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250610b46915050565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610316565b60008281526002602090815260409182902083905581518481529081018390527f642e74356c0610a9f944fb1a2d88d2fb82c6b74921566eee8bc0f9bb30f74f03910160405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610800576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610316565b73ffffffffffffffffffffffffffffffffffffffff81166108a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610316565b6108ac81610935565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610316565b600355565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008381526002602052604090205480610a20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e6f2072656d6f7465206170702073657420666f722064737420636861696e006044820152606401610316565b848114610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f5265636569766572206973206e6f7420696e20747275737465642072656d6f7460448201527f65206170707300000000000000000000000000000000000000000000000000006064820152608401610316565b6001546040517fac8a4c1b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063ac8a4c1b903490610b0d908990899089908990600401610e02565b6000604051808303818588803b158015610b2657600080fd5b505af1158015610b3a573d6000803e3d6000fd5b50505050505050505050565b6000610b5183610c51565b805160208201516040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260248201839052939450919290917f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b158015610bf157600080fd5b505af1158015610c05573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f07b815cd29685803e7213231371fa19ce2e23221109bf847d949305e6b7464a48260405161055c91815260200190565b6040805180820190915260008082526020820152600082806020019051810190610c7b9190610e3e565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146108ac57600080fd5b600060208284031215610cb657600080fd5b8135610c7b81610c82565b60008060408385031215610cd457600080fd5b50508035926020909101359150565b600060208284031215610cf557600080fd5b5035919050565b600080600080600060808688031215610d1457600080fd5b8535945060208601359350604086013567ffffffffffffffff80821115610d3a57600080fd5b818801915088601f830112610d4e57600080fd5b813581811115610d5d57600080fd5b896020828501011115610d6f57600080fd5b6020830195508094505050506060860135610d8981610c82565b809150509295509295909350565b6000815180845260005b81811015610dbd57602081850181015186830182015201610da1565b81811115610dcf576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b848152836020820152608060408201526000610e216080830185610d97565b8281036060840152610e338185610d97565b979650505050505050565b600060408284031215610e5057600080fd5b6040516040810181811067ffffffffffffffff82111715610e9a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528251610ea881610c82565b8152602092830151928101929092525091905056fea264697066735822122017aabdf7a153b67665d6528ec1a8a6ea1f8996b292de9590d6e75650a4008f3064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessage(bytes32,uint256,bytes,address)": {
        "details": "Must be called by MessageBug & sent from src chain by a trusted srcApp",
        "params": {
          "_executor": "Address who called the MessageBus execution function",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_srcAddress": "The bytes32 address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessage(bytes32,uint256,bytes,address)": {
        "notice": "Executes a message called by MessageBus (MessageBusReceiver)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/messaging/dfk/bridge/TearBridge.sol:TearBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12454,
        "contract": "contracts/messaging/dfk/bridge/TearBridge.sol:TearBridge",
        "label": "messageBus",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12458,
        "contract": "contracts/messaging/dfk/bridge/TearBridge.sol:TearBridge",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 11306,
        "contract": "contracts/messaging/dfk/bridge/TearBridge.sol:TearBridge",
        "label": "msgGasLimit",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}