{
  "language": "Solidity",
  "sources": {
    "contracts/messaging/MessageBus.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-4.5.0/access/Ownable.sol\";\nimport \"./MessageBusSender.sol\";\nimport \"./MessageBusReceiver.sol\";\n\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\n    constructor(address _gasFeePricing, address _authVerifier)\n        MessageBusSender(_gasFeePricing)\n        MessageBusReceiver(_authVerifier)\n    {}\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/messaging/MessageBusSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-4.5.0/access/Ownable.sol\";\nimport \"./interfaces/IGasFeePricing.sol\";\n\ncontract MessageBusSender is Ownable {\n    address public gasFeePricing;\n    uint64 public nonce;\n    uint256 internal fees;\n\n    constructor(address _gasFeePricing) {\n        gasFeePricing = _gasFeePricing;\n    }\n\n    event MessageSent(\n        address indexed sender,\n        uint256 srcChainID,\n        bytes32 receiver,\n        uint256 indexed dstChainId,\n        bytes message,\n        uint64 indexed nonce,\n        bytes options,\n        uint256 fee\n    );\n\n    function estimateFee(uint256 _dstChainId, bytes calldata _options)\n        public\n        returns (uint256)\n    {\n        uint256 fee = IGasFeePricing(gasFeePricing).estimateGasFee(\n            _dstChainId,\n            _options\n        );\n        require(fee != 0, \"Fee not set\");\n        return fee;\n    }\n\n    /**\n     * @notice Sends a message to a receiving contract address on another chain.\n     * Sender must make sure that the message is unique and not a duplicate message.\n     * @param _receiver The bytes32 address of the destination contract to be called\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\n     * @param _message The arbitrary payload to pass to the destination chain receiver\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\n     */\n    function sendMessage(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message,\n        bytes calldata _options\n    ) external payable {\n        require(_dstChainId != block.chainid, \"Invalid chainId\");\n        uint256 fee = estimateFee(_dstChainId, _options);\n        require(msg.value >= fee, \"Insuffient gas fee\");\n        emit MessageSent(\n            msg.sender,\n            block.chainid,\n            _receiver,\n            _dstChainId,\n            _message,\n            nonce,\n            _options,\n            msg.value\n        );\n        fees += msg.value;\n        ++nonce;\n    }\n\n    /**\n     * @notice Withdraws accumulated fees in native gas token, based on fees variable.\n     * @param to Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas\n     */\n    function withdrawGasFees(address payable to) external onlyOwner {\n        uint256 withdrawAmount = fees;\n        // Reset fees to 0\n        to.transfer(withdrawAmount);\n        delete fees;\n    }\n\n    function updateGasFeePricing(address _gasFeePricing) public onlyOwner {\n        require(_gasFeePricing != address(0), \"Cannot set to 0\");\n        gasFeePricing = _gasFeePricing;\n    }\n}\n"
    },
    "contracts/messaging/MessageBusReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-4.5.0/access/Ownable.sol\";\nimport \"./interfaces/IAuthVerifier.sol\";\nimport \"./interfaces/ISynMessagingReceiver.sol\";\n\ncontract MessageBusReceiver is Ownable {\n    address public authVerifier;\n\n    enum TxStatus {\n        Null,\n        Success,\n        Fail\n    }\n\n    // Store all successfully executed messages\n    mapping(bytes32 => TxStatus) executedMessages;\n\n    // TODO: Rename to follow one standard convention -> Send -> Receive?\n    event Executed(\n        bytes32 msgId,\n        TxStatus status,\n        address indexed _dstAddress,\n        uint64 srcChainId,\n        uint64 srcNonce\n    );\n    event CallReverted(string reason);\n\n    constructor(address _authVerifier) {\n        authVerifier = _authVerifier;\n    }\n\n    function computeMessageId(\n        uint256 _srcChainId,\n        bytes32 _srcAddress,\n        address _dstAddress,\n        uint256 _nonce,\n        bytes calldata _message\n    ) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _srcChainId,\n                    _srcAddress,\n                    block.chainid,\n                    _dstAddress,\n                    _nonce,\n                    _message\n                )\n            );\n    }\n\n    function getExecutedMessage(bytes32 _messageId)\n        external\n        view\n        returns (TxStatus)\n    {\n        return executedMessages[_messageId];\n    }\n\n    /**\n     * @notice Relayer executes messages through an authenticated method to the destination receiver\n     based on the originating transaction on source chain\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\n     * @param _srcAddress Originating bytes32 address of the message sender on the srcChain\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\n     */\n    function executeMessage(\n        uint256 _srcChainId,\n        bytes32 _srcAddress,\n        address _dstAddress,\n        uint256 _gasLimit,\n        uint256 _nonce,\n        bytes calldata _message,\n        bytes32 _messageId\n    ) external {\n        // In order to guarentee that an individual message is only executed once, a messageId is generated.\n        bytes32 messageId = computeMessageId(\n            _srcChainId,\n            _srcAddress,\n            _dstAddress,\n            _nonce,\n            _message\n        );\n        require(messageId == _messageId, \"Incorrect messageId submitted\");\n        // enforce that this message ID hasn't already been tried ever\n        // console.log(uint256(executedMessages[messageId]));\n        require(\n            executedMessages[messageId] == TxStatus.Null,\n            \"Message already executed\"\n        );\n        // Authenticate executeMessage, will revert if not authenticated\n        IAuthVerifier(authVerifier).msgAuth(abi.encode(msg.sender));\n        // Message is now in-flight, adjust status\n        // executedMessages[messageId] = TxStatus.Pending;\n\n        TxStatus status;\n        try\n            ISynMessagingReceiver(_dstAddress).executeMessage{gas: _gasLimit}(\n                _srcAddress,\n                _srcChainId,\n                _message,\n                msg.sender\n            )\n        {\n            // Assuming success state if no revert\n            status = TxStatus.Success;\n        } catch (bytes memory reason) {\n            // call hard reverted & failed\n            emit CallReverted(getRevertMsg(reason));\n            status = TxStatus.Fail;\n        }\n\n        executedMessages[messageId] = status;\n        emit Executed(\n            messageId,\n            status,\n            _dstAddress,\n            uint64(_srcChainId),\n            uint64(_nonce)\n        );\n    }\n\n    /** HELPER VIEW FUNCTION */\n    // https://ethereum.stackexchange.com/a/83577\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\n    function getRevertMsg(bytes memory _returnData)\n        private\n        pure\n        returns (string memory)\n    {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n    /** CONTRACT CONFIG */\n\n    function updateMessageStatus(bytes32 _messageId, TxStatus _status)\n        public\n        onlyOwner\n    {\n        executedMessages[_messageId] = _status;\n    }\n\n    function updateAuthVerifier(address _authVerifier) public onlyOwner {\n        require(_authVerifier != address(0), \"Cannot set to 0\");\n        authVerifier = _authVerifier;\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/messaging/interfaces/IGasFeePricing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\ninterface IGasFeePricing {\n    \n    /**\n     * @notice Permissioned method to allow an off-chain party to set what each dstChain's\n     * gas cost is priced in the srcChain's native gas currency. \n     * Example: call on ETH, setCostPerChain(43114, 30000000000, 25180000000000000)\n     * chain ID 43114\n     * Average of 30 gwei cost to transaction on 43114\n     * AVAX/ETH = 0.02518, scaled to gas in wei = 25180000000000000\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\n     * @param _gasUnitPrice The estimated current gas price in wei of the destination chain\n     * @param _gasTokenPriceRatio Gas ratio of dstGasToken / srcGasToken\n     */\n    function setCostPerChain(uint256 _dstChainId, uint256 _gasUnitPrice, uint256 _gasTokenPriceRatio) external;\n\n    /**\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\n     */\n    function estimateGasFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\n}  "
    },
    "contracts/messaging/interfaces/IAuthVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\ninterface IAuthVerifier {\n    /**\n     * @notice Authentication library to allow the validator network to execute cross-chain messages.\n     * @param _authData A bytes32 address encoded via abi.encode(address)\n     * @return authenticated returns true if bytes data submitted and decoded to the address is correct\n     */\n    function msgAuth(bytes calldata _authData)\n        external\n        view\n        returns (bool authenticated);\n\n    /**\n     * @notice Permissioned method to support upgrades to the library\n     * @param _nodegroup address which has authentication to execute messages\n     */\n    function setNodeGroup(address _nodegroup) external;\n}"
    },
    "contracts/messaging/interfaces/ISynMessagingReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ISynMessagingReceiver {\n\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    // mapping(uint256 => bytes32) internal trustedRemoteLookup;\n\n\n    /** \n     * @notice MsgExecutionStatus state\n     * @return Success execution succeeded, finalized\n     * @return Fail // execution failed, finalized\n     * @return Retry // execution failed or rejected, set to be retryable\n    */ \n    enum MsgExecutionStatus {\n        Success, \n        Fail\n    }\n\n     /**\n     * @notice Called by MessageBus \n     * @dev MUST be permissioned to trusted source apps via trustedRemote\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external returns (MsgExecutionStatus);\n}\n    "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}