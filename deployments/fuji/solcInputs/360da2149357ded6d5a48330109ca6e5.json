{
  "language": "Solidity",
  "sources": {
    "contracts/messaging/GasFeePricing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-4.5.0/access/Ownable.sol\";\n\ncontract GasFeePricing is Ownable {\n    // DstChainId => The estimated current gas price in wei of the destination chain\n    mapping(uint256 => uint256) public dstGasPriceInWei;\n    // DstChainId => USD gas ratio of dstGasToken / srcGasToken\n    mapping(uint256 => uint256) public dstGasTokenRatio;\n\n    constructor() {}\n\n    /**\n     * @notice Permissioned method to allow an off-chain party to set what each dstChain's\n     * gas cost is priced in the srcChain's native gas currency.\n     * Example: call on ETH, setCostPerChain(43114, 30000000000, 25180000000000000)\n     * chain ID 43114\n     * Average of 30 gwei cost to transaction on 43114\n     * AVAX/ETH = 0.02518, scaled to gas in wei = 25180000000000000\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\n     * @param _gasUnitPrice The estimated current gas price in wei of the destination chain\n     * @param _gasTokenPriceRatio USD gas ratio of dstGasToken / srcGasToken\n     */\n    function setCostPerChain(\n        uint256 _dstChainId,\n        uint256 _gasUnitPrice,\n        uint256 _gasTokenPriceRatio\n    ) external onlyOwner {\n        dstGasPriceInWei[_dstChainId] = _gasUnitPrice;\n        dstGasTokenRatio[_dstChainId] = _gasTokenPriceRatio;\n    }\n\n    /**\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\n     */\n    function estimateGasFee(uint256 _dstChainId, bytes memory _options)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 gasLimit;\n        // temporary gas limit set\n        if (_options.length != 0) {\n            (\n                uint16 _txType,\n                uint256 _gasLimit,\n                uint256 _dstAirdrop,\n                bytes32 _dstAddress\n            ) = decodeOptions(_options);\n            gasLimit = _gasLimit;\n        } else {\n            gasLimit = 200000;\n        }\n\n        uint256 minFee = ((dstGasPriceInWei[_dstChainId] *\n            dstGasTokenRatio[_dstChainId] *\n            gasLimit) / 10**18);\n\n        return minFee;\n    }\n\n    function encodeOptions(uint16 txType, uint256 gasLimit)\n        public\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(txType, gasLimit);\n    }\n\n    function encodeOptions(\n        uint16 txType,\n        uint256 gasLimit,\n        uint256 dstNativeAmt,\n        bytes32 dstAddress\n    ) public pure returns (bytes memory) {\n        return abi.encodePacked(txType, gasLimit, dstNativeAmt, dstAddress);\n    }\n\n    function decodeOptions(bytes memory _options)\n        public\n        pure\n        returns (\n            uint16,\n            uint256,\n            uint256,\n            bytes32\n        )\n    {\n        // decoding the _options - reverts if type 2 and there is no dstNativeAddress\n        require(\n            _options.length == 34 || _options.length > 66,\n            \"Wrong _adapterParameters size\"\n        );\n        uint16 txType;\n        uint256 gasLimit;\n        uint256 dstNativeAmt;\n        bytes32 dstNativeAddress;\n        assembly {\n            txType := mload(add(_options, 2))\n            gasLimit := mload(add(_options, 34))\n        }\n\n        if (txType == 2) {\n            assembly {\n                dstNativeAmt := mload(add(_options, 66))\n                dstNativeAddress := mload(add(_options, 98))\n            }\n            require(dstNativeAmt != 0, \"dstNativeAmt empty\");\n            require(dstNativeAddress != bytes32(0), \"dstNativeAddress empty\");\n        }\n\n        return (txType, gasLimit, dstNativeAmt, dstNativeAddress);\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts-4.5.0/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}