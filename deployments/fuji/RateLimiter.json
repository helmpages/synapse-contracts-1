{
  "address": "0x0783A772277C70cA529cd65194CA12AcF0c095a2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ResetAllowance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "allowanceAmount",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "resetTime",
          "type": "uint16"
        }
      ],
      "name": "SetAllowance",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BRIDGE_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BRIDGE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNANCE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIMITER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_RETRY_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "toRetry",
          "type": "bytes"
        }
      ],
      "name": "addToRetryQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowances",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "spent",
          "type": "uint96"
        },
        {
          "internalType": "uint16",
          "name": "resetTimeMin",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "lastResetMin",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "checkAndUpdateAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "deleteByKappa",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenAllowance",
      "outputs": [
        {
          "internalType": "uint256[4]",
          "name": "",
          "type": "uint256[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "resetAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "retryByKappa",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "count",
          "type": "uint8"
        }
      ],
      "name": "retryCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retryQueueLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retryTimeout",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "allowanceAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint16",
          "name": "resetTimeMin",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "resetBaseMin",
          "type": "uint32"
        }
      ],
      "name": "setAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "setBridgeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_retryTimeout",
          "type": "uint32"
        }
      ],
      "name": "setRetryTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fc31eb34abfc8038dbbd9a09eee05df80b56d8ac4b2ec92d5ad4ab8b2648171",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0x0783A772277C70cA529cd65194CA12AcF0c095a2",
    "transactionIndex": 1,
    "gasUsed": "2566872",
    "logsBloom": "0x
    "blockHash": "0x4e84ea1c1f34521db4c857515bf69284487786383cd8ed665be480be940e2f6a",
    "transactionHash": "0x5fc31eb34abfc8038dbbd9a09eee05df80b56d8ac4b2ec92d5ad4ab8b2648171",
    "logs": [],
    "blockNumber": 9538179,
    "cumulativeGasUsed": "3535234",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a10bad590e6f15313bad17f0c537c7b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ResetAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"allowanceAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"resetTime\",\"type\":\"uint16\"}],\"name\":\"SetAllowance\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRIDGE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNANCE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIMITER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RETRY_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"toRetry\",\"type\":\"bytes\"}],\"name\":\"addToRetryQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"spent\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"resetTimeMin\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"lastResetMin\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkAndUpdateAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"deleteByKappa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenAllowance\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"resetAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"retryByKappa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"}],\"name\":\"retryCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retryQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retryTimeout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"allowanceAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint16\",\"name\":\"resetTimeMin\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"resetBaseMin\",\"type\":\"uint32\"}],\"name\":\"setAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"setBridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_retryTimeout\",\"type\":\"uint32\"}],\"name\":\"setRetryTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkAndUpdateAllowance(address,uint256)\":{\"params\":{\"amount\":\"to transfer*\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAllowance(address,uint96,uint16,uint32)\":{\"params\":{\"allowanceAmount\":\"for the token\",\"resetBaseMin\":\"amount Amount in native token decimals to transfer cross-chain pre-fees*\",\"resetTimeMin\":\"minimum reset time (amount goes to 0 after this)\",\"token\":\"to update the allowance for\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAndUpdateAllowance(address,uint256)\":{\"notice\":\"Checks the allowance for a given token. If the new amount exceeds the allowance, it is not updated and false is returned otherwise true is returned and the transaction can proceed\"},\"getTokens()\":{\"notice\":\"Gets a  list of tokens with allowances*\"},\"setAllowance(address,uint96,uint16,uint32)\":{\"notice\":\"Updates the allowance for a given token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/RateLimiter.sol\":\"RateLimiter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x744cb90b7dc9071a2584ddd1bdaded932308ce802ab943b026e8ccc638b9b4d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa109948c335bb0126a22ef94871dd6ff26a92ddde041b6849d005e1f42fe53c9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"contracts/bridge/RateLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.5.0-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.5.0-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.5.0-upgradeable/utils/math/MathUpgradeable.sol\\\";\\n\\nimport \\\"./libraries/EnumerableQueueUpgradeable.sol\\\";\\nimport \\\"./interfaces/IRateLimiter.sol\\\";\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-4.5.0-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\n\\ninterface IBridge {\\n    function kappaExists(bytes32 kappa) external view returns (bool);\\n}\\n\\n// @title RateLimiter\\n// @dev a bridge asset rate limiter based on https://github.com/gnosis/safe-modules/blob/master/allowances/contracts/AlowanceModule.sol\\ncontract RateLimiter is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IRateLimiter\\n{\\n    using EnumerableQueueUpgradeable for EnumerableQueueUpgradeable.KappaQueue;\\n    /*** STATE ***/\\n\\n    string public constant NAME = \\\"Rate Limiter\\\";\\n    string public constant VERSION = \\\"0.1.0\\\";\\n\\n    // roles\\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\n    bytes32 public constant LIMITER_ROLE = keccak256(\\\"LIMITER_ROLE\\\");\\n    bytes32 public constant BRIDGE_ROLE = keccak256(\\\"BRIDGE_ROLE\\\");\\n\\n    // Token -> Allowance\\n    mapping(address => Allowance) public allowances;\\n    // Kappa->Retry Selector\\n    EnumerableQueueUpgradeable.KappaQueue private rateLimitedQueue;\\n    mapping(bytes32 => bytes) private failedRetries;\\n    // Bridge Address\\n    address public BRIDGE_ADDRESS;\\n    // Time period after anyone can retry a rate limited tx\\n    uint32 public retryTimeout;\\n    uint32 public constant MIN_RETRY_TIMEOUT = 10;\\n\\n    // List of tokens\\n    address[] public tokens;\\n\\n    /*** EVENTS ***/\\n\\n    event SetAllowance(\\n        address indexed token,\\n        uint96 allowanceAmount,\\n        uint16 resetTime\\n    );\\n    event ResetAllowance(address indexed token);\\n\\n    /*** STRUCTS ***/\\n\\n    // The allowance info is optimized to fit into one word of storage.\\n    struct Allowance {\\n        uint96 amount;\\n        uint96 spent;\\n        uint16 resetTimeMin; // Maximum reset time span is 65k minutes\\n        uint32 lastResetMin; // epoch/60\\n        bool initialized;\\n    }\\n\\n    /*** FUNCTIONS ***/\\n\\n    function initialize() external initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        __AccessControl_init();\\n        retryTimeout = MIN_RETRY_TIMEOUT;\\n    }\\n\\n    /*** VIEWS ***/\\n\\n    function getTokenAllowance(address token)\\n        external\\n        view\\n        returns (uint256[4] memory)\\n    {\\n        Allowance memory allowance = _getAllowance(token);\\n        return [\\n            uint256(allowance.amount),\\n            uint256(allowance.spent),\\n            uint256(allowance.resetTimeMin),\\n            uint256(allowance.lastResetMin)\\n        ];\\n    }\\n\\n    /**\\n     * @notice Gets a  list of tokens with allowances\\n     **/\\n    function getTokens() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    function retryQueueLength() external view returns (uint256 length) {\\n        length = rateLimitedQueue.length();\\n    }\\n\\n    /*** RESTRICTED: GOVERNANCE ***/\\n\\n    function setBridgeAddress(address bridge)\\n        external\\n        onlyRole(GOVERNANCE_ROLE)\\n    {\\n        BRIDGE_ADDRESS = bridge;\\n    }\\n\\n    function setRetryTimeout(uint32 _retryTimeout)\\n        external\\n        onlyRole(GOVERNANCE_ROLE)\\n    {\\n        require(_retryTimeout >= MIN_RETRY_TIMEOUT, \\\"Timeout too short\\\");\\n        retryTimeout = _retryTimeout;\\n    }\\n\\n    /*** RESTRICTED: LIMITER ***/\\n\\n    function deleteByKappa(bytes32 kappa) external onlyRole(LIMITER_ROLE) {\\n        rateLimitedQueue.deleteKey(kappa);\\n    }\\n\\n    function resetAllowance(address token) external onlyRole(LIMITER_ROLE) {\\n        Allowance memory allowance = _getAllowance(token);\\n        allowance.spent = 0;\\n        _updateAllowance(token, allowance);\\n        emit ResetAllowance(token);\\n    }\\n\\n    /**\\n     * @notice Updates the allowance for a given token\\n     * @param token to update the allowance for\\n     * @param allowanceAmount for the token\\n     * @param resetTimeMin minimum reset time (amount goes to 0 after this)\\n     * @param resetBaseMin amount Amount in native token decimals to transfer cross-chain pre-fees\\n     **/\\n    function setAllowance(\\n        address token,\\n        uint96 allowanceAmount,\\n        uint16 resetTimeMin,\\n        uint32 resetBaseMin\\n    ) external onlyRole(LIMITER_ROLE) {\\n        Allowance memory allowance = _getAllowance(token);\\n        if (!allowance.initialized) {\\n            // New token\\n            allowance.initialized = true;\\n            tokens.push(token);\\n        }\\n        // Divide by 60 to get current time in minutes\\n        // solium-disable-next-line security/no-block-members\\n        uint32 currentMin = uint32(block.timestamp / 60);\\n        if (resetBaseMin > 0) {\\n            require(resetBaseMin <= currentMin, \\\"resetBaseMin <= currentMin\\\");\\n            allowance.lastResetMin =\\n                currentMin -\\n                ((currentMin - resetBaseMin) % resetTimeMin);\\n        } else if (allowance.lastResetMin == 0) {\\n            allowance.lastResetMin = currentMin;\\n        }\\n        allowance.resetTimeMin = resetTimeMin;\\n        allowance.amount = allowanceAmount;\\n        _updateAllowance(token, allowance);\\n        emit SetAllowance(token, allowanceAmount, resetTimeMin);\\n    }\\n\\n    /*** RESTRICTED: BRIDGE ***/\\n\\n    function addToRetryQueue(bytes32 kappa, bytes memory toRetry)\\n        external\\n        onlyRole(BRIDGE_ROLE)\\n    {\\n        rateLimitedQueue.add(kappa, toRetry);\\n    }\\n\\n    /**\\n     * @notice Checks the allowance for a given token. If the new amount exceeds the allowance, it is not updated and false is returned\\n     * otherwise true is returned and the transaction can proceed\\n     * @param amount to transfer\\n     **/\\n    function checkAndUpdateAllowance(address token, uint256 amount)\\n        external\\n        nonReentrant\\n        onlyRole(BRIDGE_ROLE)\\n        returns (bool)\\n    {\\n        Allowance memory allowance = _getAllowance(token);\\n\\n        // Update state\\n        // @dev reverts if amount > (2^96 - 1)\\n        uint96 newSpent = allowance.spent + uint96(amount);\\n\\n        // do not proceed. Store the transaction for later\\n        if (newSpent > allowance.amount) {\\n            return false;\\n        }\\n\\n        allowance.spent = newSpent;\\n        _updateAllowance(token, allowance);\\n\\n        return true;\\n    }\\n\\n    /*** INTERNAL: ALLOWANCE ***/\\n\\n    function _getAllowance(address token)\\n        internal\\n        view\\n        returns (Allowance memory allowance)\\n    {\\n        allowance = allowances[token];\\n        // solium-disable-next-line security/no-block-members\\n        uint32 currentMin = uint32(block.timestamp / 60);\\n        // Check if we should reset the time. We do this on load to minimize storage read/ writes\\n        if (\\n            allowance.resetTimeMin > 0 &&\\n            allowance.lastResetMin <= currentMin - allowance.resetTimeMin\\n        ) {\\n            allowance.spent = 0;\\n            // Resets happen in regular intervals and `lastResetMin` should be aligned to that\\n            allowance.lastResetMin =\\n                currentMin -\\n                ((currentMin - allowance.lastResetMin) %\\n                    allowance.resetTimeMin);\\n        }\\n        return allowance;\\n    }\\n\\n    function _updateAllowance(address token, Allowance memory allowance)\\n        internal\\n    {\\n        allowances[token] = allowance;\\n    }\\n\\n    /*** RETRY FUNCTIONS ***/\\n\\n    function retryByKappa(bytes32 kappa) external {\\n        (bytes memory toRetry, uint32 storedAtMin) = rateLimitedQueue.get(\\n            kappa\\n        );\\n        if (toRetry.length > 0) {\\n            if (!hasRole(LIMITER_ROLE, msg.sender)) {\\n                // Permissionless retry is only available once timeout is finished\\n                uint32 currentMin = uint32(block.timestamp / 60);\\n                require(\\n                    currentMin >= storedAtMin + retryTimeout,\\n                    \\\"Retry timeout not finished\\\"\\n                );\\n            }\\n            rateLimitedQueue.deleteKey(kappa);\\n            _retry(kappa, toRetry);\\n        } else {\\n            // Try looking up in the failed txs:\\n            // anyone should be able to do so, with no timeout\\n            _retryFailed(kappa);\\n        }\\n    }\\n\\n    function retryCount(uint8 count) external onlyRole(LIMITER_ROLE) {\\n        // no issues casting to uint8 here. If length is greater then 255, min is always taken\\n        uint8 attempts = uint8(\\n            MathUpgradeable.min(uint256(count), rateLimitedQueue.length())\\n        );\\n\\n        for (uint8 i = 0; i < attempts; i++) {\\n            // check out the first element\\n            (bytes32 kappa, bytes memory toRetry, ) = rateLimitedQueue\\n            .pop_front();\\n\\n            if (toRetry.length > 0) {\\n                _retry(kappa, toRetry);\\n            }\\n        }\\n    }\\n\\n    function _retry(bytes32 kappa, bytes memory toRetry) internal {\\n        (bool success, ) = BRIDGE_ADDRESS.call(toRetry);\\n        if (!success && !IBridge(BRIDGE_ADDRESS).kappaExists(kappa)) {\\n            // save payload for failed transactions\\n            // that haven't been processed by Bridge yet\\n            failedRetries[kappa] = toRetry;\\n        }\\n    }\\n\\n    function _retryFailed(bytes32 kappa) internal {\\n        bytes memory toRetry = failedRetries[kappa];\\n        if (toRetry.length > 0) {\\n            failedRetries[kappa] = bytes(\\\"\\\");\\n            (bool success, bytes memory returnData) = BRIDGE_ADDRESS.call(\\n                toRetry\\n            );\\n            require(\\n                success,\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Could not call bridge for kappa: \\\",\\n                        StringsUpgradeable.toHexString(uint256(kappa), 32),\\n                        \\\" reverted with: \\\",\\n                        _getRevertMsg(returnData)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function _getRevertMsg(bytes memory _returnData)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n}\\n\",\"keccak256\":\"0xefbecee2e4860eeac12a5c81b355ad712090b4e5e9b1b5b33063d8f5ba3f5d45\",\"license\":\"MIT\"},\"contracts/bridge/interfaces/IRateLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.23 <0.9.0;\\n\\ninterface IRateLimiter {\\n    function addToRetryQueue(bytes32 kappa, bytes memory rateLimited) external;\\n    function checkAndUpdateAllowance(address token, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x5d26f07b7f4d84587999447ca5fa97210ed3dd919e2af476e4cb60e6301875aa\",\"license\":\"MIT\"},\"contracts/bridge/libraries/EnumerableQueueUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary EnumerableQueueUpgradeable {\\n    struct RetryableTx {\\n        /// @dev epoch time in minutes the tx was stored at. Always non-zero on initialized struct\\n        uint32 storedAtMin;\\n        /// @dev bridge calldata for retrying\\n        bytes toRetry;\\n    }\\n\\n    /**\\n     * @dev New elements are added to the tail of queue:\\n     *\\n     *                H=T=0\\n     *                  v\\n     * Initial state: EMPTY [head (H) = 0, tail(T) = 0]\\n     *\\n     *          H    T\\n     * add(1): [1]\\n     *\\n     *          H         T\\n     * add(2): [1]<>[2]\\n     *\\n     *          H              T\\n     * add(3): [1]<>[2]<>[3]\\n     */\\n\\n    /**\\n     * @dev Getting arbitrary elements is supported, but not their deletion:\\n     * Initial state: [1]<>[2]<>[3]\\n     *  get(key=2) -> [2]: gets data for a given key\\n     * at(index=0) -> [1]: gets data for a given queue index (queue head index is always 0)\\n     */\\n\\n    /**\\n     * @dev Elements are polled from the head of queue:\\n     *           H              T\\n     * State  : [1]<>[2]<>[3]\\n     *\\n     *                H         T\\n     * poll() :      [2]<>[3]\\n     *\\n     *                     H    T\\n     * poll() :           [3]\\n     */\\n\\n    struct KappaQueue {\\n        /// @dev Array of keys for data. Every existing key is unique.\\n        /// Can't add the same key twice, but it's possible\\n        /// to add the key again once it is deleted from the Queue.\\n        mapping(uint256 => bytes32) _keys;\\n        /// @dev Data map for each key.\\n        mapping(bytes32 => RetryableTx) _data;\\n        /// @dev Index of the first Queue key.\\n        uint128 _head;\\n        /// @dev Index following the last Queue key, i.e.\\n        /// index, where newly added key would reside.\\n        /// _head == _tail => Queue is empty\\n        uint128 _tail;\\n    }\\n\\n    /**\\n     * @notice Adds [key, value] pair to the `queue`. Will not to anything, if\\n     * a key already exists in the `queue`.\\n     *\\n     * Returns true only if [key, value] was added to the Queue.\\n     */\\n    function add(\\n        KappaQueue storage queue,\\n        bytes32 key,\\n        bytes memory value\\n    ) internal returns (bool) {\\n        if (contains(queue, key)) {\\n            // key already exists, don't add anything\\n            return false;\\n        }\\n\\n        queue._keys[queue._tail] = key;\\n        queue._data[key] = RetryableTx({\\n            storedAtMin: uint32(block.timestamp / 60),\\n            toRetry: value\\n        });\\n\\n        ++queue._tail;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Returns data for N-th element of the Queue:\\n     * key, value and the time it was stored.\\n     * @dev All return variables will be zero, if `index >= queue.length()`.\\n     * `value` will be zero, if `deleteKey(key)` was called previously.\\n     */\\n    function at(KappaQueue storage queue, uint256 index)\\n        internal\\n        view\\n        returns (\\n            bytes32 key,\\n            bytes memory value,\\n            uint32 storedAtMin\\n        )\\n    {\\n        key = queue._keys[queue._head + index];\\n        (value, storedAtMin) = get(queue, key);\\n    }\\n\\n    /**\\n     * @notice Checks whether `key` is present in the Queue.\\n     */\\n    function contains(KappaQueue storage queue, bytes32 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return queue._data[key].storedAtMin != 0;\\n    }\\n\\n    /**\\n     * @notice Delete key from the Queue.\\n     * @dev For gas efficiency we don't use the double-linked queue implementation,\\n     * allowing to remove an arbitrary element. All we're doing is setting\\n     * the stored value for the given key to zero.\\n     * It means, that one should check value obtained by `get(key)` before using it.\\n     */\\n    function deleteKey(KappaQueue storage queue, bytes32 key) internal {\\n        queue._data[key].toRetry = bytes(\\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Checks whether Queue is empty.\\n     */\\n    function isEmpty(KappaQueue storage queue) internal view returns (bool) {\\n        return queue._head == queue._tail;\\n    }\\n\\n    /**\\n     * @notice Gets data associated with the given `key`: value and the time it was stored.\\n     * @dev All return variables will be zero, if `key` is not added to the Queue.\\n     * `value` will be zero, if `deleteKey(key)` was called previously.\\n     */\\n    function get(KappaQueue storage queue, bytes32 key)\\n        internal\\n        view\\n        returns (bytes memory value, uint32 storedAtMin)\\n    {\\n        (value, storedAtMin) = (\\n            queue._data[key].toRetry,\\n            queue._data[key].storedAtMin\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the number of elements in the Queue.\\n     */\\n    function length(KappaQueue storage queue) internal view returns (uint256) {\\n        // This never underflows\\n        return queue._tail - queue._head;\\n    }\\n\\n    /**\\n     * @notice Returns data for the first (head) element from\\n     * the Queue, without removing it.\\n     * Data: key, value and the time it was stored.\\n     * @dev All return variables will be zero, Queue is empty.\\n     * `value` will be zero, if `deleteKey(key)` was called previously.\\n     */\\n    function peek(KappaQueue storage queue)\\n        internal\\n        view\\n        returns (\\n            bytes32 key,\\n            bytes memory value,\\n            uint32 storedAtMin\\n        )\\n    {\\n        key = queue._keys[queue._head];\\n        (value, storedAtMin) = get(queue, key);\\n    }\\n\\n    /**\\n     * @notice Returns data for the first (head) element from\\n     * the Queue and removes the element from Queue.\\n     * Data: key, value and the time it was stored.\\n     * @dev All return variables will be zero, Queue is empty.\\n     * `value` will be zero, if `deleteKey(key)` was called previously.\\n     */\\n    function pop_front(KappaQueue storage queue)\\n        internal\\n        returns (\\n            bytes32 key,\\n            bytes memory value,\\n            uint32 storedAtMin\\n        )\\n    {\\n        (uint256 head, uint256 tail) = (queue._head, queue._tail);\\n        if (head != tail) {\\n            key = queue._keys[head];\\n            (value, storedAtMin) = get(queue, key);\\n\\n            delete queue._keys[head];\\n            delete queue._data[key];\\n\\n            ++head;\\n            if (head == tail) {\\n                (queue._head, queue._tail) = (0, 0);\\n            } else {\\n                queue._head = uint128(head);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9dd4b3aa980140da6f4fa8159b55b37d773d0af56500e8fa698e9110eae20452\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612dcf806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063a3f4df7e11610104578063b5bfddea116100a2578063e91e2f6d11610071578063e91e2f6d146105b7578063f36c8f5c146105ca578063f778c12e146105f1578063ffa1ad741461060457600080fd5b8063b5bfddea1461054a578063c44f340014610571578063cf7fdc9d14610584578063d547741f146105a457600080fd5b8063aa6ca808116100de578063aa6ca808146104e8578063b3de4214146104fd578063b3e8e4b814610524578063b55f46e51461053757600080fd5b8063a3f4df7e1461046c578063a5b599e4146104b5578063a88e42ce146104d557600080fd5b80634ed416081161017c5780637f5a22f91161014b5780637f5a22f9146104035780638129fc1c1461041657806391d148541461041e578063a217fddf1461046457600080fd5b80634ed41608146103885780634f64b2be146103905780635eb9c710146103c85780637eb5016e146103db57600080fd5b8063248a9ca3116101b8578063248a9ca3146102395780632b603c711461026a5780632f2ff15d1461036257806336568abe1461037557600080fd5b806301ffc9a7146101df57806313398a901461020757806314cec89614610224575b600080fd5b6101f26101ed3660046124ed565b610640565b60405190151581526020015b60405180910390f35b61020f600a81565b60405163ffffffff90911681526020016101fe565b61023761023236600461252f565b6106d9565b005b61025c610247366004612552565b60009081526065602052604090206001015490565b6040519081526020016101fe565b61031a610278366004612594565b60c9602052600090815260409020546bffffffffffffffffffffffff808216916c010000000000000000000000008104909116907801000000000000000000000000000000000000000000000000810461ffff16907a010000000000000000000000000000000000000000000000000000810463ffffffff16907e01000000000000000000000000000000000000000000000000000000000000900460ff1685565b604080516bffffffffffffffffffffffff968716815295909416602086015261ffff9092169284019290925263ffffffff90911660608301521515608082015260a0016101fe565b6102376103703660046125af565b61076e565b6102376103833660046125af565b610799565b61025c610851565b6103a361039e366004612552565b610862565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101fe565b6102376103d6366004612552565b610899565b60ce5461020f9074010000000000000000000000000000000000000000900463ffffffff1681565b610237610411366004612594565b6109b9565b610237610a2c565b6101f261042c3660046125af565b600091825260656020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b61025c600081565b6104a86040518060400160405280600c81526020017f52617465204c696d69746572000000000000000000000000000000000000000081525081565b6040516101fe9190612607565b6104c86104c3366004612594565b610b9a565b6040516101fe9190612658565b6101f26104e3366004612689565b610c0e565b6104f0610ea5565b6040516101fe91906126b3565b61025c7ff7b34cf87af24ce01c1aff9f518b133989851466d994e0016fc14651fa02826c81565b610237610532366004612721565b610f14565b610237610545366004612791565b611293565b61025c7f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f81565b61023761057f366004612552565b61137f565b60ce546103a39073ffffffffffffffffffffffffffffffffffffffff1681565b6102376105b23660046125af565b6113b5565b6102376105c5366004612594565b6113db565b61025c7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb181565b6102376105ff366004612870565b6115b1565b6104a86040518060400160405280600581526020017f302e312e3000000000000000000000000000000000000000000000000000000081525081565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806106d357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7ff7b34cf87af24ce01c1aff9f518b133989851466d994e0016fc14651fa02826c61070481336115e8565b600061071c8360ff1661071760ca6116ba565b61170d565b905060005b8160ff168160ff1610156107685760008061073c60ca611725565b508051919350915015610753576107538282611840565b5050808061076090612929565b915050610721565b50505050565b60008281526065602052604090206001015461078a81336115e8565b6107948383611973565b505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61084d8282611a67565b5050565b600061085d60ca6116ba565b905090565b60cf818154811061087257600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000806108a760ca84611b22565b81519193509150156109b0573360009081527f3ed388a1d2364d5b9a8aaca854ba9c96aa9f1f92229c5253866b634067b14585602052604090205460ff1661099b5760006108f6603c42612978565b60ce549091506109249074010000000000000000000000000000000000000000900463ffffffff168361298c565b63ffffffff168163ffffffff161015610999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f52657472792074696d656f7574206e6f742066696e6973686564000000000000604482015260640161083a565b505b6109a660ca84611bda565b6107948383611840565b61079483611c0b565b7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb16109e481336115e8565b5060ce80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600054610100900460ff16610a475760005460ff1615610a4b565b303b155b610ad7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161083a565b600054610100900460ff16158015610b1657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610b21600033611dc2565b610b29611dcc565b60ce80547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff16740a00000000000000000000000000000000000000001790558015610b9757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b610ba26123fc565b6000610bad83611e65565b9050604051806080016040528082600001516bffffffffffffffffffffffff16815260200182602001516bffffffffffffffffffffffff168152602001826040015161ffff168152602001826060015163ffffffff16815250915050919050565b600060026097541415610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161083a565b60026097557f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f610cad81336115e8565b6000610cb885611e65565b90506000848260200151610ccc91906129b4565b905081600001516bffffffffffffffffffffffff16816bffffffffffffffffffffffff161115610d0157600093505050610e99565b6bffffffffffffffffffffffff81166020830152610e92868373ffffffffffffffffffffffffffffffffffffffff909116600090815260c96020908152604091829020835181549285015193850151606086015160809096015115157e01000000000000000000000000000000000000000000000000000000000000027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff9097167a010000000000000000000000000000000000000000000000000000027fffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff909316780100000000000000000000000000000000000000000000000002929092167fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff6bffffffffffffffffffffffff9788166c01000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090971697909416969096179490941791909116939093179290921792909216919091179055565b6001935050505b50600160975592915050565b606060cf805480602002602001604051908101604052809291908181526020018280548015610f0a57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610edf575b5050505050905090565b7ff7b34cf87af24ce01c1aff9f518b133989851466d994e0016fc14651fa02826c610f3f81336115e8565b6000610f4a86611e65565b90508060800151610fcb5760016080820181905260cf805491820181556000527facb8d954e2cfef495862221e91bd7523613cf8808827cb33edfe4904cc51bf290180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88161790555b6000610fd8603c42612978565b905063ffffffff84161561108f578063ffffffff168463ffffffff16111561105c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7265736574426173654d696e203c3d2063757272656e744d696e000000000000604482015260640161083a565b61ffff851661106b85836129db565b6110759190612a00565b61107f90826129db565b63ffffffff1660608301526110ab565b606082015163ffffffff166110ab5763ffffffff811660608301525b61ffff85811660408481019182526bffffffffffffffffffffffff898116865273ffffffffffffffffffffffffffffffffffffffff8b16600090815260c9602090815292902086518154938801519451606089015160808a015115157e01000000000000000000000000000000000000000000000000000000000000027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff9092167a010000000000000000000000000000000000000000000000000000027fffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffff93909916780100000000000000000000000000000000000000000000000002929092167fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff9786166c01000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090971693909516929092179490941794909416919091179390931791909116179055604080516bffffffffffffffffffffffff8816815261ffff8716602082015273ffffffffffffffffffffffffffffffffffffffff8916917f74a2df75e844fef5875c37aa03ff31ba3732ff013175bfb9285d3f47bb8c4fc9910160405180910390a250505050505050565b7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb16112be81336115e8565b600a63ffffffff8316101561132f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f54696d656f757420746f6f2073686f7274000000000000000000000000000000604482015260640161083a565b5060ce805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b7ff7b34cf87af24ce01c1aff9f518b133989851466d994e0016fc14651fa02826c6113aa81336115e8565b61084d60ca83611bda565b6000828152606560205260409020600101546113d181336115e8565b6107948383611a67565b7ff7b34cf87af24ce01c1aff9f518b133989851466d994e0016fc14651fa02826c61140681336115e8565b600061141183611e65565b6000602082810182815273ffffffffffffffffffffffffffffffffffffffff871680845260c9909252604080842085518154935183880151606089015160808a015115157e01000000000000000000000000000000000000000000000000000000000000027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff9092167a010000000000000000000000000000000000000000000000000000027fffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff909416780100000000000000000000000000000000000000000000000002939093167fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff6bffffffffffffffffffffffff9586166c01000000000000000000000000027fffffffffffffffff000000000000000000000000000000000000000000000000909a16959096169490941797909717939093169190911717169290921790915551929350917fe9c2678ff6b16779478ca0ff73f9face6adeb21fffd1b2ffd6ee79794c51294b9190a2505050565b7f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f6115dc81336115e8565b61076860ca8484611fff565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661084d576116408173ffffffffffffffffffffffffffffffffffffffff16601461215a565b61164b83602061215a565b60405160200161165c929190612a23565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261083a91600401612607565b60028101546000906116f5906fffffffffffffffffffffffffffffffff80821691700100000000000000000000000000000000900416612aa4565b6fffffffffffffffffffffffffffffffff1692915050565b600081831061171c578161171e565b825b9392505050565b600281015460009060609082906fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041680821461183757600082815260208790526040902054945061177e8686611b22565b6000848152602089815260408083208390558983526001808c01909252822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000168155939750919550906117d69083018261241a565b5050816117e290612acd565b9150808214156117f85760006002870155611837565b6002860180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff84161790555b50509193909250565b60ce5460405160009173ffffffffffffffffffffffffffffffffffffffff169061186b908490612b06565b6000604051808303816000865af19150503d80600081146118a8576040519150601f19603f3d011682016040523d82523d6000602084013e6118ad565b606091505b505090508015801561194f575060ce546040517f2fe87b950000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff90911690632fe87b9590602401602060405180830381865afa158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d9190612b22565b155b1561079457600083815260cd60209081526040909120835161076892850190612454565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661084d57600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611a093390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561084d57600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001808401602052604082208054910180546060939263ffffffff16908290611b4f90612b44565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7b90612b44565b8015611bc85780601f10611b9d57610100808354040283529160200191611bc8565b820191906000526020600020905b815481529060010190602001808311611bab57829003601f168201915b50939a94995093975050505050505050565b6040805160208082018084526000808452858152600180880190935293909320915161079493929091019190612454565b600081815260cd602052604081208054611c2490612b44565b80601f0160208091040260200160405190810160405280929190818152602001828054611c5090612b44565b8015611c9d5780601f10611c7257610100808354040283529160200191611c9d565b820191906000526020600020905b815481529060010190602001808311611c8057829003601f168201915b5050505050905060008151111561084d57604080516020808201808452600080845286815260cd9092529290209051611cd69290612454565b5060ce54604051600091829173ffffffffffffffffffffffffffffffffffffffff90911690611d06908590612b06565b6000604051808303816000865af19150503d8060008114611d43576040519150601f19603f3d011682016040523d82523d6000602084013e611d48565b606091505b50909250905081611d5a85602061215a565b611d638361239d565b604051602001611d74929190612b92565b60405160208183030381529060405290611dbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083a9190612607565b5050505050565b61084d8282611973565b600054610100900460ff16611e63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161083a565b565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091525073ffffffffffffffffffffffffffffffffffffffff8116600090815260c960209081526040808320815160a08101835290546bffffffffffffffffffffffff80821683526c01000000000000000000000000820416938201939093527801000000000000000000000000000000000000000000000000830461ffff16918101919091527a010000000000000000000000000000000000000000000000000000820463ffffffff1660608201527e0100000000000000000000000000000000000000000000000000000000000090910460ff161515608082015290611f76603c42612978565b90506000826040015161ffff16118015611fb257506040820151611f9e9061ffff16826129db565b63ffffffff16826060015163ffffffff1611155b15611ff957600060208301526040820151606083015161ffff90911690611fd990836129db565b611fe39190612a00565b611fed90826129db565b63ffffffff1660608301525b50919050565b600082815260018401602052604081205463ffffffff16156120235750600061171e565b600284015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1660009081526020859052604090819020849055805180820190915280612075603c42612978565b63ffffffff908116825260209182018590526000868152600188810184526040909120845181547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000016931692909217825583830151805192936120de9392850192910190612454565b5050506002840180546010906121199070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16612c39565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550600190509392505050565b60606000612169836002612c69565b612174906002612ca6565b67ffffffffffffffff81111561218c5761218c6127ac565b6040519080825280601f01601f1916602001820160405280156121b6576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106121ed576121ed612cbe565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061225057612250612cbe565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061228c846002612c69565b612297906001612ca6565b90505b6001811115612334577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106122d8576122d8612cbe565b1a60f81b8282815181106122ee576122ee612cbe565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361232d81612ced565b905061229a565b50831561171e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161083a565b60606044825110156123e257505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b600482019150818060200190518101906106d39190612d22565b60405180608001604052806004906020820280368337509192915050565b50805461242690612b44565b6000825580601f10612436575050565b601f016020900490600052602060002090810190610b9791906124d8565b82805461246090612b44565b90600052602060002090601f01602090048101928261248257600085556124c8565b82601f1061249b57805160ff19168380011785556124c8565b828001600101855582156124c8579182015b828111156124c85782518255916020019190600101906124ad565b506124d49291506124d8565b5090565b5b808211156124d457600081556001016124d9565b6000602082840312156124ff57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461171e57600080fd5b60006020828403121561254157600080fd5b813560ff8116811461171e57600080fd5b60006020828403121561256457600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461258f57600080fd5b919050565b6000602082840312156125a657600080fd5b61171e8261256b565b600080604083850312156125c257600080fd5b823591506125d26020840161256b565b90509250929050565b60005b838110156125f65781810151838201526020016125de565b838111156107685750506000910152565b60208152600082518060208401526126268160408501602087016125db565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60808101818360005b6004811015612680578151835260209283019290910190600101612661565b50505092915050565b6000806040838503121561269c57600080fd5b6126a58361256b565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561270157835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016126cf565b50909695505050505050565b803563ffffffff8116811461258f57600080fd5b6000806000806080858703121561273757600080fd5b6127408561256b565b935060208501356bffffffffffffffffffffffff8116811461276157600080fd5b9250604085013561ffff8116811461277857600080fd5b91506127866060860161270d565b905092959194509250565b6000602082840312156127a357600080fd5b61171e8261270d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612822576128226127ac565b604052919050565b600067ffffffffffffffff821115612844576128446127ac565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000806040838503121561288357600080fd5b82359150602083013567ffffffffffffffff8111156128a157600080fd5b8301601f810185136128b257600080fd5b80356128c56128c08261282a565b6127db565b8181528660208385010111156128da57600080fd5b816020840160208301376000602083830101528093505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff811415612940576129406128fa565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261298757612987612949565b500490565b600063ffffffff8083168185168083038211156129ab576129ab6128fa565b01949350505050565b60006bffffffffffffffffffffffff8083168185168083038211156129ab576129ab6128fa565b600063ffffffff838116908316818110156129f8576129f86128fa565b039392505050565b600063ffffffff80841680612a1757612a17612949565b92169190910692915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612a5b8160178501602088016125db565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612a988160288401602088016125db565b01602801949350505050565b60006fffffffffffffffffffffffffffffffff838116908316818110156129f8576129f86128fa565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612aff57612aff6128fa565b5060010190565b60008251612b188184602087016125db565b9190910192915050565b600060208284031215612b3457600080fd5b8151801515811461171e57600080fd5b600181811c90821680612b5857607f821691505b60208210811415611ff9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f436f756c64206e6f742063616c6c2062726964676520666f72206b617070613a81527f2000000000000000000000000000000000000000000000000000000000000000602082015260008351612bf08160218501602088016125db565b7f20726576657274656420776974683a20000000000000000000000000000000006021918401918201528351612c2d8160318401602088016125db565b01603101949350505050565b60006fffffffffffffffffffffffffffffffff80831681811415612c5f57612c5f6128fa565b6001019392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ca157612ca16128fa565b500290565b60008219821115612cb957612cb96128fa565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081612cfc57612cfc6128fa565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600060208284031215612d3457600080fd5b815167ffffffffffffffff811115612d4b57600080fd5b8201601f81018413612d5c57600080fd5b8051612d6a6128c08261282a565b818152856020838501011115612d7f57600080fd5b612d908260208301602086016125db565b9594505050505056fea264697066735822122096b9b0d074fe5bdf1239b840ac12e7257d722837984419e29985a4ec28e2889764736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063a3f4df7e11610104578063b5bfddea116100a2578063e91e2f6d11610071578063e91e2f6d146105b7578063f36c8f5c146105ca578063f778c12e146105f1578063ffa1ad741461060457600080fd5b8063b5bfddea1461054a578063c44f340014610571578063cf7fdc9d14610584578063d547741f146105a457600080fd5b8063aa6ca808116100de578063aa6ca808146104e8578063b3de4214146104fd578063b3e8e4b814610524578063b55f46e51461053757600080fd5b8063a3f4df7e1461046c578063a5b599e4146104b5578063a88e42ce146104d557600080fd5b80634ed416081161017c5780637f5a22f91161014b5780637f5a22f9146104035780638129fc1c1461041657806391d148541461041e578063a217fddf1461046457600080fd5b80634ed41608146103885780634f64b2be146103905780635eb9c710146103c85780637eb5016e146103db57600080fd5b8063248a9ca3116101b8578063248a9ca3146102395780632b603c711461026a5780632f2ff15d1461036257806336568abe1461037557600080fd5b806301ffc9a7146101df57806313398a901461020757806314cec89614610224575b600080fd5b6101f26101ed3660046124ed565b610640565b60405190151581526020015b60405180910390f35b61020f600a81565b60405163ffffffff90911681526020016101fe565b61023761023236600461252f565b6106d9565b005b61025c610247366004612552565b60009081526065602052604090206001015490565b6040519081526020016101fe565b61031a610278366004612594565b60c9602052600090815260409020546bffffffffffffffffffffffff808216916c010000000000000000000000008104909116907801000000000000000000000000000000000000000000000000810461ffff16907a010000000000000000000000000000000000000000000000000000810463ffffffff16907e01000000000000000000000000000000000000000000000000000000000000900460ff1685565b604080516bffffffffffffffffffffffff968716815295909416602086015261ffff9092169284019290925263ffffffff90911660608301521515608082015260a0016101fe565b6102376103703660046125af565b61076e565b6102376103833660046125af565b610799565b61025c610851565b6103a361039e366004612552565b610862565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101fe565b6102376103d6366004612552565b610899565b60ce5461020f9074010000000000000000000000000000000000000000900463ffffffff1681565b610237610411366004612594565b6109b9565b610237610a2c565b6101f261042c3660046125af565b600091825260656020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b61025c600081565b6104a86040518060400160405280600c81526020017f52617465204c696d69746572000000000000000000000000000000000000000081525081565b6040516101fe9190612607565b6104c86104c3366004612594565b610b9a565b6040516101fe9190612658565b6101f26104e3366004612689565b610c0e565b6104f0610ea5565b6040516101fe91906126b3565b61025c7ff7b34cf87af24ce01c1aff9f518b133989851466d994e0016fc14651fa02826c81565b610237610532366004612721565b610f14565b610237610545366004612791565b611293565b61025c7f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f81565b61023761057f366004612552565b61137f565b60ce546103a39073ffffffffffffffffffffffffffffffffffffffff1681565b6102376105b23660046125af565b6113b5565b6102376105c5366004612594565b6113db565b61025c7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb181565b6102376105ff366004612870565b6115b1565b6104a86040518060400160405280600581526020017f302e312e3000000000000000000000000000000000000000000000000000000081525081565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806106d357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7ff7b34cf87af24ce01c1aff9f518b133989851466d994e0016fc14651fa02826c61070481336115e8565b600061071c8360ff1661071760ca6116ba565b61170d565b905060005b8160ff168160ff1610156107685760008061073c60ca611725565b508051919350915015610753576107538282611840565b5050808061076090612929565b915050610721565b50505050565b60008281526065602052604090206001015461078a81336115e8565b6107948383611973565b505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61084d8282611a67565b5050565b600061085d60ca6116ba565b905090565b60cf818154811061087257600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000806108a760ca84611b22565b81519193509150156109b0573360009081527f3ed388a1d2364d5b9a8aaca854ba9c96aa9f1f92229c5253866b634067b14585602052604090205460ff1661099b5760006108f6603c42612978565b60ce549091506109249074010000000000000000000000000000000000000000900463ffffffff168361298c565b63ffffffff168163ffffffff161015610999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f52657472792074696d656f7574206e6f742066696e6973686564000000000000604482015260640161083a565b505b6109a660ca84611bda565b6107948383611840565b61079483611c0b565b7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb16109e481336115e8565b5060ce80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600054610100900460ff16610a475760005460ff1615610a4b565b303b155b610ad7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161083a565b600054610100900460ff16158015610b1657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610b21600033611dc2565b610b29611dcc565b60ce80547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff16740a00000000000000000000000000000000000000001790558015610b9757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b610ba26123fc565b6000610bad83611e65565b9050604051806080016040528082600001516bffffffffffffffffffffffff16815260200182602001516bffffffffffffffffffffffff168152602001826040015161ffff168152602001826060015163ffffffff16815250915050919050565b600060026097541415610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161083a565b60026097557f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f610cad81336115e8565b6000610cb885611e65565b90506000848260200151610ccc91906129b4565b905081600001516bffffffffffffffffffffffff16816bffffffffffffffffffffffff161115610d0157600093505050610e99565b6bffffffffffffffffffffffff81166020830152610e92868373ffffffffffffffffffffffffffffffffffffffff909116600090815260c96020908152604091829020835181549285015193850151606086015160809096015115157e01000000000000000000000000000000000000000000000000000000000000027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff9097167a010000000000000000000000000000000000000000000000000000027fffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff909316780100000000000000000000000000000000000000000000000002929092167fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff6bffffffffffffffffffffffff9788166c01000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090971697909416969096179490941791909116939093179290921792909216919091179055565b6001935050505b50600160975592915050565b606060cf805480602002602001604051908101604052809291908181526020018280548015610f0a57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610edf575b5050505050905090565b7ff7b34cf87af24ce01c1aff9f518b133989851466d994e0016fc14651fa02826c610f3f81336115e8565b6000610f4a86611e65565b90508060800151610fcb5760016080820181905260cf805491820181556000527facb8d954e2cfef495862221e91bd7523613cf8808827cb33edfe4904cc51bf290180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88161790555b6000610fd8603c42612978565b905063ffffffff84161561108f578063ffffffff168463ffffffff16111561105c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7265736574426173654d696e203c3d2063757272656e744d696e000000000000604482015260640161083a565b61ffff851661106b85836129db565b6110759190612a00565b61107f90826129db565b63ffffffff1660608301526110ab565b606082015163ffffffff166110ab5763ffffffff811660608301525b61ffff85811660408481019182526bffffffffffffffffffffffff898116865273ffffffffffffffffffffffffffffffffffffffff8b16600090815260c9602090815292902086518154938801519451606089015160808a015115157e01000000000000000000000000000000000000000000000000000000000000027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff9092167a010000000000000000000000000000000000000000000000000000027fffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffff93909916780100000000000000000000000000000000000000000000000002929092167fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff9786166c01000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090971693909516929092179490941794909416919091179390931791909116179055604080516bffffffffffffffffffffffff8816815261ffff8716602082015273ffffffffffffffffffffffffffffffffffffffff8916917f74a2df75e844fef5875c37aa03ff31ba3732ff013175bfb9285d3f47bb8c4fc9910160405180910390a250505050505050565b7f71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb16112be81336115e8565b600a63ffffffff8316101561132f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f54696d656f757420746f6f2073686f7274000000000000000000000000000000604482015260640161083a565b5060ce805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b7ff7b34cf87af24ce01c1aff9f518b133989851466d994e0016fc14651fa02826c6113aa81336115e8565b61084d60ca83611bda565b6000828152606560205260409020600101546113d181336115e8565b6107948383611a67565b7ff7b34cf87af24ce01c1aff9f518b133989851466d994e0016fc14651fa02826c61140681336115e8565b600061141183611e65565b6000602082810182815273ffffffffffffffffffffffffffffffffffffffff871680845260c9909252604080842085518154935183880151606089015160808a015115157e01000000000000000000000000000000000000000000000000000000000000027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff9092167a010000000000000000000000000000000000000000000000000000027fffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff909416780100000000000000000000000000000000000000000000000002939093167fffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff6bffffffffffffffffffffffff9586166c01000000000000000000000000027fffffffffffffffff000000000000000000000000000000000000000000000000909a16959096169490941797909717939093169190911717169290921790915551929350917fe9c2678ff6b16779478ca0ff73f9face6adeb21fffd1b2ffd6ee79794c51294b9190a2505050565b7f52ba824bfabc2bcfcdf7f0edbb486ebb05e1836c90e78047efeb949990f72e5f6115dc81336115e8565b61076860ca8484611fff565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661084d576116408173ffffffffffffffffffffffffffffffffffffffff16601461215a565b61164b83602061215a565b60405160200161165c929190612a23565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261083a91600401612607565b60028101546000906116f5906fffffffffffffffffffffffffffffffff80821691700100000000000000000000000000000000900416612aa4565b6fffffffffffffffffffffffffffffffff1692915050565b600081831061171c578161171e565b825b9392505050565b600281015460009060609082906fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041680821461183757600082815260208790526040902054945061177e8686611b22565b6000848152602089815260408083208390558983526001808c01909252822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000168155939750919550906117d69083018261241a565b5050816117e290612acd565b9150808214156117f85760006002870155611837565b6002860180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff84161790555b50509193909250565b60ce5460405160009173ffffffffffffffffffffffffffffffffffffffff169061186b908490612b06565b6000604051808303816000865af19150503d80600081146118a8576040519150601f19603f3d011682016040523d82523d6000602084013e6118ad565b606091505b505090508015801561194f575060ce546040517f2fe87b950000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff90911690632fe87b9590602401602060405180830381865afa158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d9190612b22565b155b1561079457600083815260cd60209081526040909120835161076892850190612454565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661084d57600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611a093390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561084d57600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001808401602052604082208054910180546060939263ffffffff16908290611b4f90612b44565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7b90612b44565b8015611bc85780601f10611b9d57610100808354040283529160200191611bc8565b820191906000526020600020905b815481529060010190602001808311611bab57829003601f168201915b50939a94995093975050505050505050565b6040805160208082018084526000808452858152600180880190935293909320915161079493929091019190612454565b600081815260cd602052604081208054611c2490612b44565b80601f0160208091040260200160405190810160405280929190818152602001828054611c5090612b44565b8015611c9d5780601f10611c7257610100808354040283529160200191611c9d565b820191906000526020600020905b815481529060010190602001808311611c8057829003601f168201915b5050505050905060008151111561084d57604080516020808201808452600080845286815260cd9092529290209051611cd69290612454565b5060ce54604051600091829173ffffffffffffffffffffffffffffffffffffffff90911690611d06908590612b06565b6000604051808303816000865af19150503d8060008114611d43576040519150601f19603f3d011682016040523d82523d6000602084013e611d48565b606091505b50909250905081611d5a85602061215a565b611d638361239d565b604051602001611d74929190612b92565b60405160208183030381529060405290611dbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083a9190612607565b5050505050565b61084d8282611973565b600054610100900460ff16611e63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161083a565b565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091525073ffffffffffffffffffffffffffffffffffffffff8116600090815260c960209081526040808320815160a08101835290546bffffffffffffffffffffffff80821683526c01000000000000000000000000820416938201939093527801000000000000000000000000000000000000000000000000830461ffff16918101919091527a010000000000000000000000000000000000000000000000000000820463ffffffff1660608201527e0100000000000000000000000000000000000000000000000000000000000090910460ff161515608082015290611f76603c42612978565b90506000826040015161ffff16118015611fb257506040820151611f9e9061ffff16826129db565b63ffffffff16826060015163ffffffff1611155b15611ff957600060208301526040820151606083015161ffff90911690611fd990836129db565b611fe39190612a00565b611fed90826129db565b63ffffffff1660608301525b50919050565b600082815260018401602052604081205463ffffffff16156120235750600061171e565b600284015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1660009081526020859052604090819020849055805180820190915280612075603c42612978565b63ffffffff908116825260209182018590526000868152600188810184526040909120845181547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000016931692909217825583830151805192936120de9392850192910190612454565b5050506002840180546010906121199070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16612c39565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550600190509392505050565b60606000612169836002612c69565b612174906002612ca6565b67ffffffffffffffff81111561218c5761218c6127ac565b6040519080825280601f01601f1916602001820160405280156121b6576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106121ed576121ed612cbe565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061225057612250612cbe565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061228c846002612c69565b612297906001612ca6565b90505b6001811115612334577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106122d8576122d8612cbe565b1a60f81b8282815181106122ee576122ee612cbe565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361232d81612ced565b905061229a565b50831561171e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161083a565b60606044825110156123e257505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b600482019150818060200190518101906106d39190612d22565b60405180608001604052806004906020820280368337509192915050565b50805461242690612b44565b6000825580601f10612436575050565b601f016020900490600052602060002090810190610b9791906124d8565b82805461246090612b44565b90600052602060002090601f01602090048101928261248257600085556124c8565b82601f1061249b57805160ff19168380011785556124c8565b828001600101855582156124c8579182015b828111156124c85782518255916020019190600101906124ad565b506124d49291506124d8565b5090565b5b808211156124d457600081556001016124d9565b6000602082840312156124ff57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461171e57600080fd5b60006020828403121561254157600080fd5b813560ff8116811461171e57600080fd5b60006020828403121561256457600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461258f57600080fd5b919050565b6000602082840312156125a657600080fd5b61171e8261256b565b600080604083850312156125c257600080fd5b823591506125d26020840161256b565b90509250929050565b60005b838110156125f65781810151838201526020016125de565b838111156107685750506000910152565b60208152600082518060208401526126268160408501602087016125db565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60808101818360005b6004811015612680578151835260209283019290910190600101612661565b50505092915050565b6000806040838503121561269c57600080fd5b6126a58361256b565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561270157835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016126cf565b50909695505050505050565b803563ffffffff8116811461258f57600080fd5b6000806000806080858703121561273757600080fd5b6127408561256b565b935060208501356bffffffffffffffffffffffff8116811461276157600080fd5b9250604085013561ffff8116811461277857600080fd5b91506127866060860161270d565b905092959194509250565b6000602082840312156127a357600080fd5b61171e8261270d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612822576128226127ac565b604052919050565b600067ffffffffffffffff821115612844576128446127ac565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000806040838503121561288357600080fd5b82359150602083013567ffffffffffffffff8111156128a157600080fd5b8301601f810185136128b257600080fd5b80356128c56128c08261282a565b6127db565b8181528660208385010111156128da57600080fd5b816020840160208301376000602083830101528093505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff811415612940576129406128fa565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261298757612987612949565b500490565b600063ffffffff8083168185168083038211156129ab576129ab6128fa565b01949350505050565b60006bffffffffffffffffffffffff8083168185168083038211156129ab576129ab6128fa565b600063ffffffff838116908316818110156129f8576129f86128fa565b039392505050565b600063ffffffff80841680612a1757612a17612949565b92169190910692915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612a5b8160178501602088016125db565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612a988160288401602088016125db565b01602801949350505050565b60006fffffffffffffffffffffffffffffffff838116908316818110156129f8576129f86128fa565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612aff57612aff6128fa565b5060010190565b60008251612b188184602087016125db565b9190910192915050565b600060208284031215612b3457600080fd5b8151801515811461171e57600080fd5b600181811c90821680612b5857607f821691505b60208210811415611ff9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f436f756c64206e6f742063616c6c2062726964676520666f72206b617070613a81527f2000000000000000000000000000000000000000000000000000000000000000602082015260008351612bf08160218501602088016125db565b7f20726576657274656420776974683a20000000000000000000000000000000006021918401918201528351612c2d8160318401602088016125db565b01603101949350505050565b60006fffffffffffffffffffffffffffffffff80831681811415612c5f57612c5f6128fa565b6001019392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ca157612ca16128fa565b500290565b60008219821115612cb957612cb96128fa565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081612cfc57612cfc6128fa565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600060208284031215612d3457600080fd5b815167ffffffffffffffff811115612d4b57600080fd5b8201601f81018413612d5c57600080fd5b8051612d6a6128c08261282a565b818152856020838501011115612d7f57600080fd5b612d908260208301602086016125db565b9594505050505056fea264697066735822122096b9b0d074fe5bdf1239b840ac12e7257d722837984419e29985a4ec28e2889764736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkAndUpdateAllowance(address,uint256)": {
        "params": {
          "amount": "to transfer*"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setAllowance(address,uint96,uint16,uint32)": {
        "params": {
          "allowanceAmount": "for the token",
          "resetBaseMin": "amount Amount in native token decimals to transfer cross-chain pre-fees*",
          "resetTimeMin": "minimum reset time (amount goes to 0 after this)",
          "token": "to update the allowance for"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkAndUpdateAllowance(address,uint256)": {
        "notice": "Checks the allowance for a given token. If the new amount exceeds the allowance, it is not updated and false is returned otherwise true is returned and the transaction can proceed"
      },
      "getTokens()": {
        "notice": "Gets a  list of tokens with allowances*"
      },
      "setAllowance(address,uint96,uint16,uint32)": {
        "notice": "Updates the allowance for a given token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 408,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 411,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 818,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1065,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 489,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 533,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1301,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "allowances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_struct(Allowance)1341_storage)"
      },
      {
        "astId": 1304,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "rateLimitedQueue",
        "offset": 0,
        "slot": "202",
        "type": "t_struct(KappaQueue)2123_storage"
      },
      {
        "astId": 1308,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "failedRetries",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 1310,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "BRIDGE_ADDRESS",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 1312,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "retryTimeout",
        "offset": 20,
        "slot": "206",
        "type": "t_uint32"
      },
      {
        "astId": 1318,
        "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
        "label": "tokens",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Allowance)1341_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RateLimiter.Allowance)",
        "numberOfBytes": "32",
        "value": "t_struct(Allowance)1341_storage"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_struct(RetryableTx)2105_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableQueueUpgradeable.RetryableTx)",
        "numberOfBytes": "32",
        "value": "t_struct(RetryableTx)2105_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(Allowance)1341_storage": {
        "encoding": "inplace",
        "label": "struct RateLimiter.Allowance",
        "members": [
          {
            "astId": 1332,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 1334,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "spent",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 1336,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "resetTimeMin",
            "offset": 24,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1338,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "lastResetMin",
            "offset": 26,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1340,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "initialized",
            "offset": 30,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(KappaQueue)2123_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableQueueUpgradeable.KappaQueue",
        "members": [
          {
            "astId": 2110,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_bytes32)"
          },
          {
            "astId": 2116,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "_data",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(RetryableTx)2105_storage)"
          },
          {
            "astId": 2119,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "_head",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 2122,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "_tail",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RetryableTx)2105_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableQueueUpgradeable.RetryableTx",
        "members": [
          {
            "astId": 2101,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "storedAtMin",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2104,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "toRetry",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/bridge/RateLimiter.sol:RateLimiter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}