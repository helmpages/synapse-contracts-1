{
  "address": "0xE27BFf97CE92C3e1Ff7AA9f86781FDd6D48F5eE9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasFeePricing",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "CallReverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "msgId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcNonce",
          "type": "uint64"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcChainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiver",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dstChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authVerifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "computeMessageId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "estimateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        }
      ],
      "name": "executeMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasFeePricing",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        }
      ],
      "name": "getExecutedMessage",
      "outputs": [
        {
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_receiver",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authVerifier",
          "type": "address"
        }
      ],
      "name": "updateAuthVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasFeePricing",
          "type": "address"
        }
      ],
      "name": "updateGasFeePricing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        },
        {
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "updateMessageStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawGasFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c000973d1ddd263cbf522aa622a7643155bffefa262e54f631db52b899870c4",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0xE27BFf97CE92C3e1Ff7AA9f86781FDd6D48F5eE9",
    "transactionIndex": 0,
    "gasUsed": "1444928",
    "logsBloom": "0x
    "blockHash": "0x9d9bbb0c861b759478baffa019a5beae1a70e919a6c70418aabdeb8c71f0b79e",
    "transactionHash": "0x2c000973d1ddd263cbf522aa622a7643155bffefa262e54f631db52b899870c4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9264564,
        "transactionHash": "0x2c000973d1ddd263cbf522aa622a7643155bffefa262e54f631db52b899870c4",
        "address": "0xE27BFf97CE92C3e1Ff7AA9f86781FDd6D48F5eE9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9d9bbb0c861b759478baffa019a5beae1a70e919a6c70418aabdeb8c71f0b79e"
      }
    ],
    "blockNumber": 9264564,
    "cumulativeGasUsed": "1444928",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x432036208d2717394d2614d6697c46DF3Ed69540",
    "0xA67b7147DcE20D6F25Fd9ABfBCB1c3cA74E11f0B"
  ],
  "solcInputHash": "9e7d058856e3e7fa07d6bebcdaa7de4f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasFeePricing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CallReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"msgId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcNonce\",\"type\":\"uint64\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"computeMessageId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"estimateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasFeePricing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"getExecutedMessage\",\"outputs\":[{\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authVerifier\",\"type\":\"address\"}],\"name\":\"updateAuthVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasFeePricing\",\"type\":\"address\"}],\"name\":\"updateGasFeePricing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"},{\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"updateMessageStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawGasFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)\":{\"params\":{\"_dstAddress\":\"Destination address that the arbitrary message will be passed to\",\"_gasLimit\":\"Gas limit to be passed alongside the message, depending on the fee paid on srcChain\",\"_message\":\"Arbitrary message payload to pass to the destination chain receiver\",\"_srcAddress\":\"Originating bytes32 address of the message sender on the srcChain\",\"_srcChainId\":\"Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendMessage(bytes32,uint256,bytes,bytes)\":{\"params\":{\"_dstChainId\":\"The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\",\"_message\":\"The arbitrary payload to pass to the destination chain receiver\",\"_options\":\"Versioned struct used to instruct relayer on how to proceed with gas limits\",\"_receiver\":\"The bytes32 address of the destination contract to be called\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawGasFees(address)\":{\"params\":{\"to\":\"Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)\":{\"notice\":\"Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\"},\"sendMessage(bytes32,uint256,bytes,bytes)\":{\"notice\":\"Sends a message to a receiving contract address on another chain. Sender must make sure that the message is unique and not a duplicate message.\"},\"updateMessageStatus(bytes32,uint8)\":{\"notice\":\"CONTRACT CONFIG \"},\"withdrawGasFees(address)\":{\"notice\":\"Withdraws accumulated fees in native gas token, based on fees variable.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/MessageBus.sol\":\"MessageBus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/messaging/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./MessageBusSender.sol\\\";\\nimport \\\"./MessageBusReceiver.sol\\\";\\n\\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\\n    constructor(address _gasFeePricing, address _authVerifier)\\n        MessageBusSender(_gasFeePricing)\\n        MessageBusReceiver(_authVerifier)\\n    {}\\n}\\n\",\"keccak256\":\"0xa06b67fe831c4da3c49fdac8b3e64315f1d0d96adddb36e5499b6eaf50de2ed1\",\"license\":\"MIT\"},\"contracts/messaging/MessageBusReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IAuthVerifier.sol\\\";\\nimport \\\"./interfaces/ISynMessagingReceiver.sol\\\";\\n\\ncontract MessageBusReceiver is Ownable {\\n    address public authVerifier;\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail\\n    }\\n\\n    // Store all successfully executed messages\\n    mapping(bytes32 => TxStatus) executedMessages;\\n\\n    // TODO: Rename to follow one standard convention -> Send -> Receive?\\n    event Executed(\\n        bytes32 msgId,\\n        TxStatus status,\\n        address indexed _dstAddress,\\n        uint64 srcChainId,\\n        uint64 srcNonce\\n    );\\n    event CallReverted(string reason);\\n\\n    constructor(address _authVerifier) {\\n        authVerifier = _authVerifier;\\n    }\\n\\n    function computeMessageId(\\n        uint256 _srcChainId,\\n        bytes32 _srcAddress,\\n        address _dstAddress,\\n        uint256 _nonce,\\n        bytes calldata _message\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _srcChainId,\\n                    _srcAddress,\\n                    block.chainid,\\n                    _dstAddress,\\n                    _nonce,\\n                    _message\\n                )\\n            );\\n    }\\n\\n    function getExecutedMessage(bytes32 _messageId)\\n        external\\n        view\\n        returns (TxStatus)\\n    {\\n        return executedMessages[_messageId];\\n    }\\n\\n    /**\\n     * @notice Relayer executes messages through an authenticated method to the destination receiver\\n     based on the originating transaction on source chain\\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\\n     * @param _srcAddress Originating bytes32 address of the message sender on the srcChain\\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\\n     */\\n    function executeMessage(\\n        uint256 _srcChainId,\\n        bytes32 _srcAddress,\\n        address _dstAddress,\\n        uint256 _gasLimit,\\n        uint256 _nonce,\\n        bytes calldata _message,\\n        bytes32 _messageId\\n    ) external {\\n        // In order to guarentee that an individual message is only executed once, a messageId is generated.\\n        bytes32 messageId = computeMessageId(\\n            _srcChainId,\\n            _srcAddress,\\n            _dstAddress,\\n            _nonce,\\n            _message\\n        );\\n        require(messageId == _messageId, \\\"Incorrect messageId submitted\\\");\\n        // enforce that this message ID hasn't already been tried ever\\n        // console.log(uint256(executedMessages[messageId]));\\n        require(\\n            executedMessages[messageId] == TxStatus.Null,\\n            \\\"Message already executed\\\"\\n        );\\n        // Authenticate executeMessage, will revert if not authenticated\\n        IAuthVerifier(authVerifier).msgAuth(abi.encode(msg.sender));\\n        // Message is now in-flight, adjust status\\n        // executedMessages[messageId] = TxStatus.Pending;\\n\\n        TxStatus status;\\n        try\\n            ISynMessagingReceiver(_dstAddress).executeMessage{gas: _gasLimit}(\\n                _srcAddress,\\n                _srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        {\\n            // Assuming success state if no revert\\n            status = TxStatus.Success;\\n        } catch (bytes memory reason) {\\n            // call hard reverted & failed\\n            emit CallReverted(getRevertMsg(reason));\\n            status = TxStatus.Fail;\\n        }\\n\\n        executedMessages[messageId] = status;\\n        emit Executed(\\n            messageId,\\n            status,\\n            _dstAddress,\\n            uint64(_srcChainId),\\n            uint64(_nonce)\\n        );\\n    }\\n\\n    /** HELPER VIEW FUNCTION */\\n    // https://ethereum.stackexchange.com/a/83577\\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\\n    function getRevertMsg(bytes memory _returnData)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /** CONTRACT CONFIG */\\n\\n    function updateMessageStatus(bytes32 _messageId, TxStatus _status)\\n        public\\n        onlyOwner\\n    {\\n        executedMessages[_messageId] = _status;\\n    }\\n\\n    function updateAuthVerifier(address _authVerifier) public onlyOwner {\\n        require(_authVerifier != address(0), \\\"Cannot set to 0\\\");\\n        authVerifier = _authVerifier;\\n    }\\n}\\n\",\"keccak256\":\"0x929a5e0ad0c6901e89b4a0f774fde0ec843b5f86099919f6884fcc784d537a4d\",\"license\":\"MIT\"},\"contracts/messaging/MessageBusSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IGasFeePricing.sol\\\";\\n\\ncontract MessageBusSender is Ownable {\\n    address public gasFeePricing;\\n    uint64 public nonce;\\n    uint256 internal fees;\\n\\n    constructor(address _gasFeePricing) {\\n        gasFeePricing = _gasFeePricing;\\n    }\\n\\n    event MessageSent(\\n        address indexed sender,\\n        uint256 srcChainID,\\n        bytes32 receiver,\\n        uint256 indexed dstChainId,\\n        bytes message,\\n        uint64 nonce,\\n        bytes options,\\n        uint256 fee,\\n        bytes32 indexed messageId\\n    );\\n\\n    function estimateFee(uint256 _dstChainId, bytes calldata _options)\\n        public\\n        returns (uint256)\\n    {\\n        uint256 fee = IGasFeePricing(gasFeePricing).estimateGasFee(\\n            _dstChainId,\\n            _options\\n        );\\n        require(fee != 0, \\\"Fee not set\\\");\\n        return fee;\\n    }\\n\\n    /**\\n     * @notice Sends a message to a receiving contract address on another chain.\\n     * Sender must make sure that the message is unique and not a duplicate message.\\n     * @param _receiver The bytes32 address of the destination contract to be called\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _message The arbitrary payload to pass to the destination chain receiver\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\\n     */\\n    function sendMessage(\\n        bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message,\\n        bytes calldata _options\\n    ) external payable {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 fee = estimateFee(_dstChainId, _options);\\n        require(msg.value >= fee, \\\"Insuffient gas fee\\\");\\n        emit MessageSent(\\n            msg.sender,\\n            block.chainid,\\n            _receiver,\\n            _dstChainId,\\n            _message,\\n            nonce,\\n            _options,\\n            msg.value,\\n            keccak256(\\\"placeholder_message_id\\\")\\n        );\\n        fees += msg.value;\\n        ++nonce;\\n    }\\n\\n    /**\\n     * @notice Withdraws accumulated fees in native gas token, based on fees variable.\\n     * @param to Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas\\n     */\\n    function withdrawGasFees(address payable to) external onlyOwner {\\n        uint256 withdrawAmount = fees;\\n        // Reset fees to 0\\n        to.transfer(withdrawAmount);\\n        delete fees;\\n    }\\n\\n    function updateGasFeePricing(address _gasFeePricing) public onlyOwner {\\n        require(_gasFeePricing != address(0), \\\"Cannot set to 0\\\");\\n        gasFeePricing = _gasFeePricing;\\n    }\\n}\\n\",\"keccak256\":\"0xdf343fe711b292cfff6f9be83ee570dc8b2fb56c26d4b020e05989690aefc7e2\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IAuthVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IAuthVerifier {\\n    /**\\n     * @notice Authentication library to allow the validator network to execute cross-chain messages.\\n     * @param _authData A bytes32 address encoded via abi.encode(address)\\n     * @return authenticated returns true if bytes data submitted and decoded to the address is correct\\n     */\\n    function msgAuth(bytes calldata _authData)\\n        external\\n        view\\n        returns (bool authenticated);\\n\\n    /**\\n     * @notice Permissioned method to support upgrades to the library\\n     * @param _nodegroup address which has authentication to execute messages\\n     */\\n    function setNodeGroup(address _nodegroup) external;\\n}\",\"keccak256\":\"0xf9847b671ca1a3b929d66eed7fb4b3eeda245e169fc9fca686729f1dea96497c\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IGasFeePricing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IGasFeePricing {\\n    \\n    /**\\n     * @notice Permissioned method to allow an off-chain party to set what each dstChain's\\n     * gas cost is priced in the srcChain's native gas currency. \\n     * Example: call on ETH, setCostPerChain(43114, 30000000000, 25180000000000000)\\n     * chain ID 43114\\n     * Average of 30 gwei cost to transaction on 43114\\n     * AVAX/ETH = 0.02518, scaled to gas in wei = 25180000000000000\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _gasUnitPrice The estimated current gas price in wei of the destination chain\\n     * @param _gasTokenPriceRatio Gas ratio of dstGasToken / srcGasToken\\n     */\\n    function setCostPerChain(uint256 _dstChainId, uint256 _gasUnitPrice, uint256 _gasTokenPriceRatio) external;\\n\\n    /**\\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\\n     */\\n    function estimateGasFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\\n}  \",\"keccak256\":\"0xdec270ed7ddbeaa560dc0b5e2df2255f6e1b8be95eaafe9fce072b194aff8aff\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/ISynMessagingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISynMessagingReceiver {\\n\\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\\n    // mapping(uint256 => bytes32) internal trustedRemoteLookup;\\n\\n\\n    /** \\n     * @notice MsgExecutionStatus state\\n     * @return Success execution succeeded, finalized\\n     * @return Fail // execution failed, finalized\\n     * @return Retry // execution failed or rejected, set to be retryable\\n    */ \\n    enum MsgExecutionStatus {\\n        Success, \\n        Fail\\n    }\\n\\n     /**\\n     * @notice Called by MessageBus \\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\\n     * @param _srcAddress The bytes32 address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external returns (MsgExecutionStatus);\\n}\\n    \",\"keccak256\":\"0x9081c7651818c6d57dbbe3053422ca5789b7cee0d9a6d79c7a912fc02b30fd58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001932380380620019328339810160408190526200003491620000e6565b8082620000413362000079565b600180546001600160a01b039283166001600160a01b03199182161790915560038054939092169216919091179055506200011e9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000e157600080fd5b919050565b60008060408385031215620000fa57600080fd5b6200010583620000c9565b91506200011560208401620000c9565b90509250929050565b611804806200012e6000396000f3fe6080604052600436106100e85760003560e01c8063a66dd3841161008a578063c408733511610059578063c4087335146102d6578063d6417b8214610303578063d6b457b914610323578063f2fde38b1461034357600080fd5b8063a66dd38414610224578063aa70fc0e14610244578063ac8a4c1b14610271578063affed0e01461028457600080fd5b80638da5cb5b116100c65780638da5cb5b146101785780639b11079c146101c4578063a1b058d8146101e4578063a5c0edf31461020457600080fd5b806325b19fa3146100ed5780635da6d2c414610133578063715018a614610161575b600080fd5b3480156100f957600080fd5b5061011d6101083660046110dc565b60009081526004602052604090205460ff1690565b60405161012a919061115f565b60405180910390f35b34801561013f57600080fd5b5061015361014e3660046111b6565b610363565b60405190815260200161012a565b34801561016d57600080fd5b5061017661047e565b005b34801561018457600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012a565b3480156101d057600080fd5b506101766101df366004611202565b61050b565b3480156101f057600080fd5b506101766101ff366004611258565b6105de565b34801561021057600080fd5b5061017661021f3660046112dc565b61094c565b34801561023057600080fd5b5061017661023f3660046112dc565b610a91565b34801561025057600080fd5b5060015461019f9073ffffffffffffffffffffffffffffffffffffffff1681565b61017661027f366004611300565b610bd6565b34801561029057600080fd5b506001546102bd9074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161012a565b3480156102e257600080fd5b5060035461019f9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561030f57600080fd5b5061015361031e366004611383565b610dc0565b34801561032f57600080fd5b5061017661033e3660046112dc565b610e01565b34801561034f57600080fd5b5061017661035e3660046112dc565b610ed2565b6001546040517f47feadc1000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff909116906347feadc1906103c29088908890889060040161142d565b6020604051808303816000875af11580156103e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104059190611450565b905080600003610476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f466565206e6f742073657400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b6105096000611002565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b600082815260046020526040902080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156105d5576105d56110f5565b02179055505050565b60006105ee898989888888610dc0565b9050818114610659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f496e636f7272656374206d6573736167654964207375626d6974746564000000604482015260640161046d565b60008181526004602052604081205460ff16600281111561067c5761067c6110f5565b146106e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4d65737361676520616c72656164792065786563757465640000000000000000604482015260640161046d565b6003546040805133602082015273ffffffffffffffffffffffffffffffffffffffff90921691638b1b3a2d91016040516020818303038152906040526040518263ffffffff1660e01b815260040161073b91906114e3565b602060405180830381865afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c91906114f6565b5060008773ffffffffffffffffffffffffffffffffffffffff1663a6060871888b8d8989336040518763ffffffff1660e01b81526004016107c1959493929190611518565b60206040518083038160008887f19350505050801561081b575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261081891810190611560565b60015b610898573d808015610849576040519150601f19603f3d011682016040523d82523d6000602084013e61084e565b606091505b507fffdd6142bbb721f3400e3908b04b86f60649b2e4d191e3f4c50c32c3e6471d2f61087982611077565b60405161088691906114e3565b60405180910390a1600291505061089e565b50600190505b600082815260046020526040902080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156108e7576108e76110f5565b02179055508773ffffffffffffffffffffffffffffffffffffffff167f04214a849019ea3548afcedee810b5bc1680cfb64e22fdf9051a823f3cdfea6583838d8a6040516109389493929190611581565b60405180910390a250505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b73ffffffffffffffffffffffffffffffffffffffff8116610a4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742073657420746f20300000000000000000000000000000000000604482015260640161046d565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b73ffffffffffffffffffffffffffffffffffffffff8116610b8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742073657420746f20300000000000000000000000000000000000604482015260640161046d565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b468503610c3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c696420636861696e49640000000000000000000000000000000000604482015260640161046d565b6000610c4c868484610363565b905080341015610cb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e7375666669656e7420676173206665650000000000000000000000000000604482015260640161046d565b6001546040517fbf597a5d096fed24bf65bb4897199ede7835cf0c550353f775e6bf493c5ceb1f91889133917f864ad5e86ed3626c9517260fbfe1eed395157fd938e459e9fb607a07129cdd2a91610d409146918e918d918d9174010000000000000000000000000000000000000000900467ffffffffffffffff16908d908d9034906115b8565b60405180910390a43460026000828254610d5a9190611640565b909155505060018054601490610d919074010000000000000000000000000000000000000000900467ffffffffffffffff16611658565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050505050565b600086864687878787604051602001610ddf979695949392919061167f565b6040516020818303038152906040528051906020012090509695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b60025460405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610ec8573d6000803e3d6000fd5b5050600060025550565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b73ffffffffffffffffffffffffffffffffffffffff8116610ff6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161046d565b610fff81611002565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606044825110156110bc57505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b600482019150818060200190518101906110d69190611703565b92915050565b6000602082840312156110ee57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061115b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081016110d68284611124565b60008083601f84011261117f57600080fd5b50813567ffffffffffffffff81111561119757600080fd5b6020830191508360208285010111156111af57600080fd5b9250929050565b6000806000604084860312156111cb57600080fd5b83359250602084013567ffffffffffffffff8111156111e957600080fd5b6111f58682870161116d565b9497909650939450505050565b6000806040838503121561121557600080fd5b8235915060208301356003811061122b57600080fd5b809150509250929050565b73ffffffffffffffffffffffffffffffffffffffff81168114610fff57600080fd5b60008060008060008060008060e0898b03121561127457600080fd5b8835975060208901359650604089013561128d81611236565b9550606089013594506080890135935060a089013567ffffffffffffffff8111156112b757600080fd5b6112c38b828c0161116d565b999c989b50969995989497949560c00135949350505050565b6000602082840312156112ee57600080fd5b81356112f981611236565b9392505050565b6000806000806000806080878903121561131957600080fd5b8635955060208701359450604087013567ffffffffffffffff8082111561133f57600080fd5b61134b8a838b0161116d565b9096509450606089013591508082111561136457600080fd5b5061137189828a0161116d565b979a9699509497509295939492505050565b60008060008060008060a0878903121561139c57600080fd5b863595506020870135945060408701356113b581611236565b935060608701359250608087013567ffffffffffffffff8111156113d857600080fd5b61137189828a0161116d565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8381526040602082015260006114476040830184866113e4565b95945050505050565b60006020828403121561146257600080fd5b5051919050565b60005b8381101561148457818101518382015260200161146c565b83811115611493576000848401525b50505050565b600081518084526114b1816020860160208601611469565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006112f96020830184611499565b60006020828403121561150857600080fd5b815180151581146112f957600080fd5b8581528460208201526080604082015260006115386080830185876113e4565b905073ffffffffffffffffffffffffffffffffffffffff831660608301529695505050505050565b60006020828403121561157257600080fd5b8151600281106112f957600080fd5b848152608081016115956020830186611124565b67ffffffffffffffff808516604084015280841660608401525095945050505050565b88815287602082015260c0604082015260006115d860c08301888a6113e4565b67ffffffffffffffff8716606084015282810360808401526115fb8186886113e4565b9150508260a08301529998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561165357611653611611565b500190565b600067ffffffffffffffff80831681810361167557611675611611565b6001019392505050565b87815286602082015285604082015273ffffffffffffffffffffffffffffffffffffffff8516606082015283608082015260c060a082015260006116c760c0830184866113e4565b9998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561171557600080fd5b815167ffffffffffffffff8082111561172d57600080fd5b818401915084601f83011261174157600080fd5b815181811115611753576117536116d4565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715611799576117996116d4565b816040528281528760208487010111156117b257600080fd5b6117c3836020830160208801611469565b97965050505050505056fea264697066735822122060ce92c44b9e7cfa2350cf267f22dca92caca17339143ce60bf975c2ebbc6c5664736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063a66dd3841161008a578063c408733511610059578063c4087335146102d6578063d6417b8214610303578063d6b457b914610323578063f2fde38b1461034357600080fd5b8063a66dd38414610224578063aa70fc0e14610244578063ac8a4c1b14610271578063affed0e01461028457600080fd5b80638da5cb5b116100c65780638da5cb5b146101785780639b11079c146101c4578063a1b058d8146101e4578063a5c0edf31461020457600080fd5b806325b19fa3146100ed5780635da6d2c414610133578063715018a614610161575b600080fd5b3480156100f957600080fd5b5061011d6101083660046110dc565b60009081526004602052604090205460ff1690565b60405161012a919061115f565b60405180910390f35b34801561013f57600080fd5b5061015361014e3660046111b6565b610363565b60405190815260200161012a565b34801561016d57600080fd5b5061017661047e565b005b34801561018457600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012a565b3480156101d057600080fd5b506101766101df366004611202565b61050b565b3480156101f057600080fd5b506101766101ff366004611258565b6105de565b34801561021057600080fd5b5061017661021f3660046112dc565b61094c565b34801561023057600080fd5b5061017661023f3660046112dc565b610a91565b34801561025057600080fd5b5060015461019f9073ffffffffffffffffffffffffffffffffffffffff1681565b61017661027f366004611300565b610bd6565b34801561029057600080fd5b506001546102bd9074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161012a565b3480156102e257600080fd5b5060035461019f9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561030f57600080fd5b5061015361031e366004611383565b610dc0565b34801561032f57600080fd5b5061017661033e3660046112dc565b610e01565b34801561034f57600080fd5b5061017661035e3660046112dc565b610ed2565b6001546040517f47feadc1000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff909116906347feadc1906103c29088908890889060040161142d565b6020604051808303816000875af11580156103e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104059190611450565b905080600003610476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f466565206e6f742073657400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b6105096000611002565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b600082815260046020526040902080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156105d5576105d56110f5565b02179055505050565b60006105ee898989888888610dc0565b9050818114610659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f496e636f7272656374206d6573736167654964207375626d6974746564000000604482015260640161046d565b60008181526004602052604081205460ff16600281111561067c5761067c6110f5565b146106e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4d65737361676520616c72656164792065786563757465640000000000000000604482015260640161046d565b6003546040805133602082015273ffffffffffffffffffffffffffffffffffffffff90921691638b1b3a2d91016040516020818303038152906040526040518263ffffffff1660e01b815260040161073b91906114e3565b602060405180830381865afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c91906114f6565b5060008773ffffffffffffffffffffffffffffffffffffffff1663a6060871888b8d8989336040518763ffffffff1660e01b81526004016107c1959493929190611518565b60206040518083038160008887f19350505050801561081b575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261081891810190611560565b60015b610898573d808015610849576040519150601f19603f3d011682016040523d82523d6000602084013e61084e565b606091505b507fffdd6142bbb721f3400e3908b04b86f60649b2e4d191e3f4c50c32c3e6471d2f61087982611077565b60405161088691906114e3565b60405180910390a1600291505061089e565b50600190505b600082815260046020526040902080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156108e7576108e76110f5565b02179055508773ffffffffffffffffffffffffffffffffffffffff167f04214a849019ea3548afcedee810b5bc1680cfb64e22fdf9051a823f3cdfea6583838d8a6040516109389493929190611581565b60405180910390a250505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b73ffffffffffffffffffffffffffffffffffffffff8116610a4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742073657420746f20300000000000000000000000000000000000604482015260640161046d565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b73ffffffffffffffffffffffffffffffffffffffff8116610b8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742073657420746f20300000000000000000000000000000000000604482015260640161046d565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b468503610c3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c696420636861696e49640000000000000000000000000000000000604482015260640161046d565b6000610c4c868484610363565b905080341015610cb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e7375666669656e7420676173206665650000000000000000000000000000604482015260640161046d565b6001546040517fbf597a5d096fed24bf65bb4897199ede7835cf0c550353f775e6bf493c5ceb1f91889133917f864ad5e86ed3626c9517260fbfe1eed395157fd938e459e9fb607a07129cdd2a91610d409146918e918d918d9174010000000000000000000000000000000000000000900467ffffffffffffffff16908d908d9034906115b8565b60405180910390a43460026000828254610d5a9190611640565b909155505060018054601490610d919074010000000000000000000000000000000000000000900467ffffffffffffffff16611658565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050505050565b600086864687878787604051602001610ddf979695949392919061167f565b6040516020818303038152906040528051906020012090509695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b60025460405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610ec8573d6000803e3d6000fd5b5050600060025550565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b73ffffffffffffffffffffffffffffffffffffffff8116610ff6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161046d565b610fff81611002565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606044825110156110bc57505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b600482019150818060200190518101906110d69190611703565b92915050565b6000602082840312156110ee57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061115b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081016110d68284611124565b60008083601f84011261117f57600080fd5b50813567ffffffffffffffff81111561119757600080fd5b6020830191508360208285010111156111af57600080fd5b9250929050565b6000806000604084860312156111cb57600080fd5b83359250602084013567ffffffffffffffff8111156111e957600080fd5b6111f58682870161116d565b9497909650939450505050565b6000806040838503121561121557600080fd5b8235915060208301356003811061122b57600080fd5b809150509250929050565b73ffffffffffffffffffffffffffffffffffffffff81168114610fff57600080fd5b60008060008060008060008060e0898b03121561127457600080fd5b8835975060208901359650604089013561128d81611236565b9550606089013594506080890135935060a089013567ffffffffffffffff8111156112b757600080fd5b6112c38b828c0161116d565b999c989b50969995989497949560c00135949350505050565b6000602082840312156112ee57600080fd5b81356112f981611236565b9392505050565b6000806000806000806080878903121561131957600080fd5b8635955060208701359450604087013567ffffffffffffffff8082111561133f57600080fd5b61134b8a838b0161116d565b9096509450606089013591508082111561136457600080fd5b5061137189828a0161116d565b979a9699509497509295939492505050565b60008060008060008060a0878903121561139c57600080fd5b863595506020870135945060408701356113b581611236565b935060608701359250608087013567ffffffffffffffff8111156113d857600080fd5b61137189828a0161116d565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8381526040602082015260006114476040830184866113e4565b95945050505050565b60006020828403121561146257600080fd5b5051919050565b60005b8381101561148457818101518382015260200161146c565b83811115611493576000848401525b50505050565b600081518084526114b1816020860160208601611469565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006112f96020830184611499565b60006020828403121561150857600080fd5b815180151581146112f957600080fd5b8581528460208201526080604082015260006115386080830185876113e4565b905073ffffffffffffffffffffffffffffffffffffffff831660608301529695505050505050565b60006020828403121561157257600080fd5b8151600281106112f957600080fd5b848152608081016115956020830186611124565b67ffffffffffffffff808516604084015280841660608401525095945050505050565b88815287602082015260c0604082015260006115d860c08301888a6113e4565b67ffffffffffffffff8716606084015282810360808401526115fb8186886113e4565b9150508260a08301529998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561165357611653611611565b500190565b600067ffffffffffffffff80831681810361167557611675611611565b6001019392505050565b87815286602082015285604082015273ffffffffffffffffffffffffffffffffffffffff8516606082015283608082015260c060a082015260006116c760c0830184866113e4565b9998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561171557600080fd5b815167ffffffffffffffff8082111561172d57600080fd5b818401915084601f83011261174157600080fd5b815181811115611753576117536116d4565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715611799576117996116d4565b816040528281528760208487010111156117b257600080fd5b6117c3836020830160208801611469565b97965050505050505056fea264697066735822122060ce92c44b9e7cfa2350cf267f22dca92caca17339143ce60bf975c2ebbc6c5664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)": {
        "params": {
          "_dstAddress": "Destination address that the arbitrary message will be passed to",
          "_gasLimit": "Gas limit to be passed alongside the message, depending on the fee paid on srcChain",
          "_message": "Arbitrary message payload to pass to the destination chain receiver",
          "_srcAddress": "Originating bytes32 address of the message sender on the srcChain",
          "_srcChainId": "Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendMessage(bytes32,uint256,bytes,bytes)": {
        "params": {
          "_dstChainId": "The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains",
          "_message": "The arbitrary payload to pass to the destination chain receiver",
          "_options": "Versioned struct used to instruct relayer on how to proceed with gas limits",
          "_receiver": "The bytes32 address of the destination contract to be called"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawGasFees(address)": {
        "params": {
          "to": "Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)": {
        "notice": "Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain"
      },
      "sendMessage(bytes32,uint256,bytes,bytes)": {
        "notice": "Sends a message to a receiving contract address on another chain. Sender must make sure that the message is unique and not a duplicate message."
      },
      "updateMessageStatus(bytes32,uint8)": {
        "notice": "CONTRACT CONFIG "
      },
      "withdrawGasFees(address)": {
        "notice": "Withdraws accumulated fees in native gas token, based on fees variable."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3348,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "gasFeePricing",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3350,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "nonce",
        "offset": 20,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 3352,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "fees",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3079,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "authVerifier",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3088,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "executedMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_enum(TxStatus)3083)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TxStatus)3083": {
        "encoding": "inplace",
        "label": "enum MessageBusReceiver.TxStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_enum(TxStatus)3083)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum MessageBusReceiver.TxStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(TxStatus)3083"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}