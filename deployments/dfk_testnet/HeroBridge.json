{
  "address": "0x7103A324F423b8A4D4cC1c4F2d5b374AF4F0BaB5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_heroes",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assistingAuction",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "assistingAuction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum ISynMessagingReceiver.MsgExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "getTrustedRemote",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "trustedRemote",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "heroes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_heroId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        }
      ],
      "name": "sendHero",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assistingAuction",
          "type": "address"
        }
      ],
      "name": "setAssistingAuctionAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e5148a3822cdd0745457697c07b0eb744661fc34d6de05f51be8ef5d727c6b9",
  "receipt": {
    "to": null,
    "from": "0x235AF07E770f474d24F5bf73074735892371b40D",
    "contractAddress": "0x7103A324F423b8A4D4cC1c4F2d5b374AF4F0BaB5",
    "transactionIndex": 0,
    "gasUsed": "2568282",
    "logsBloom": "0x
    "blockHash": "0xd7f83a91ed614f467a1b7a776c993d648052ffe24e9fff0a6fc8aeff43199919",
    "transactionHash": "0x0e5148a3822cdd0745457697c07b0eb744661fc34d6de05f51be8ef5d727c6b9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4429,
        "transactionHash": "0x0e5148a3822cdd0745457697c07b0eb744661fc34d6de05f51be8ef5d727c6b9",
        "address": "0x7103A324F423b8A4D4cC1c4F2d5b374AF4F0BaB5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000235af07e770f474d24f5bf73074735892371b40d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd7f83a91ed614f467a1b7a776c993d648052ffe24e9fff0a6fc8aeff43199919"
      }
    ],
    "blockNumber": 4429,
    "cumulativeGasUsed": "2568282",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x43eEe87F158aD1e990052CBf5F291c86562a6A36",
    "0x3bcaCBeAFefed260d877dbE36378008D4e714c8E",
    "0x846635615609a8dd88eA4A92dA1F1Ba6880a9Eb5"
  ],
  "solcInputHash": "2c99480c4b27fa6f3dfbf2224f6bc524",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_heroes\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assistingAuction\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assistingAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum ISynMessagingReceiver.MsgExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getTrustedRemote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"trustedRemote\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heroes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"}],\"name\":\"sendHero\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assistingAuction\",\"type\":\"address\"}],\"name\":\"setAssistingAuctionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"details\":\"Must be called by MessageBug & sent from src chain by a trusted srcApp\",\"params\":{\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_srcAddress\":\"The bytes32 address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\"},\"returns\":{\"_0\":\"status Enum containing options of Success, Fail, Retry\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendHero(uint256,uint256)\":{\"params\":{\"_dstChainId\":\"The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\",\"_heroId\":\"specifics which hero msg.sender already holds and will transfer to the bridge contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Core app for handling cross chain messaging passing to bridge Hero NFTs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"notice\":\"Executes a message called by MessageBus (MessageBusReceiver)\"},\"sendHero(uint256,uint256)\":{\"notice\":\"User must have an existing hero minted to bridge it.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/dfk/bridge/HeroBridge.sol\":\"HeroBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/messaging/dfk/IAssistingAuctionUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAssistingAuction {\\n    function bid(uint256 _tokenId, uint256 _bidAmount) external;\\n\\n    function bidFor(\\n        address _bidder,\\n        uint256 _tokenId,\\n        uint256 _bidAmount\\n    ) external;\\n\\n    function cancelAuction(uint256 _tokenId) external;\\n\\n    function cancelAuctionWhenPaused(uint256 _tokenId) external;\\n\\n    function isOnAuction(uint256 _tokenId) external returns (bool);\\n\\n    function createAuction(\\n        uint256 _tokenId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration\\n    ) external;\\n\\n    function getAuction(uint256 _tokenId)\\n        external\\n        view\\n        returns (\\n            address seller,\\n            uint256 startingPrice,\\n            uint256 endingPrice,\\n            uint256 duration,\\n            uint256 startedAt\\n        );\\n\\n    function getCurrentPrice(uint256 _tokenId) external view returns (uint256);\\n\\n    function heroCore() external view returns (address);\\n\\n    function jewelToken() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function ownerCut() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function renounceOwnership() external;\\n\\n    function setFees(address[] memory _feeAddresses, uint256[] memory _feePercents) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x411bd47f073099bc4841dbd85220debcae8fcdfa66b017a01ffe2280c0508615\",\"license\":\"MIT\"},\"contracts/messaging/dfk/IHeroCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Hero, HeroInfo, HeroState, SummoningInfo, HeroProfessions, Rarity} from \\\"./types/HeroTypes.sol\\\";\\nimport {HeroCrystal} from \\\"./types/CrystalTypes.sol\\\";\\n\\ninterface IHeroCoreUpgradeable {\\n    // NOT FINAL \\n    function bridgeMint(Hero memory _hero, address dstAddress) external;\\n    \\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n\\n    function MINTER_ROLE() external view returns (bytes32);\\n\\n    function MODERATOR_ROLE() external view returns (bytes32);\\n\\n    function PAUSER_ROLE() external view returns (bytes32);\\n\\n    function STAMINA_ROLE() external view returns (bytes32);\\n\\n    function HERO_MODERATOR_ROLE() external view returns (bytes32);\\n\\n    function updateHero(Hero memory _hero) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function assistingAuction() external view returns (address);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function baseCooldown() external view returns (uint256);\\n\\n    function baseSummonFee() external view returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function calculateSummoningCost(uint256 _heroId) external view returns (uint256);\\n\\n    function cooldownPerGen() external view returns (uint256);\\n\\n    function cooldownPerSummon() external view returns (uint256);\\n\\n    function cooldowns(uint256) external view returns (uint32);\\n\\n    function createAssistingAuction(\\n        uint256 _heroId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration\\n    ) external;\\n\\n    function createHero(\\n        uint256 _statGenes,\\n        uint256 _visualGenes,\\n        Rarity _rarity,\\n        bool _shiny,\\n        HeroCrystal memory _crystal,\\n        uint256 _crystalId\\n    ) external returns (uint256);\\n\\n    function createSaleAuction(\\n        uint256 _heroId,\\n        uint256 _startingPrice,\\n        uint256 _endingPrice,\\n        uint256 _duration\\n    ) external;\\n\\n    function deductStamina(uint256 _heroId, uint256 _staminaDeduction) external;\\n\\n    function extractNumber(\\n        uint256 randomNumber,\\n        uint256 digits,\\n        uint256 offset\\n    ) external pure returns (uint256 result);\\n\\n    function geneScience() external view returns (address);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getCurrentStamina(uint256 _heroId) external view returns (uint256);\\n\\n    function getHero(uint256 _id) external view returns (Hero memory);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function increasePerGen() external view returns (uint256);\\n\\n    function increasePerSummon() external view returns (uint256);\\n\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) external;\\n\\n    function initialize(address _crystalAddress) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function isReadyToSummon(uint256 _heroId) external view returns (bool);\\n\\n    function crystalToken() external view returns (address);\\n\\n    function mint(address to) external;\\n\\n    function name() external view returns (string memory);\\n\\n    function openCrystal(uint256 _crystalId) external returns (uint256);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function pause() external;\\n\\n    function paused() external view returns (bool);\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) external;\\n\\n    function saleAuction() external view returns (address);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function setAssistingAuctionAddress(address _address) external;\\n\\n    function setFees(address[] memory _feeAddresses, uint256[] memory _feePercents) external;\\n\\n    function setSaleAuctionAddress(address _address) external;\\n\\n    function setSummonCooldowns(\\n        uint256 _baseCooldown,\\n        uint256 _cooldownPerSummon,\\n        uint256 _cooldownPerGen\\n    ) external;\\n\\n    function setSummonFees(\\n        uint256 _baseSummonFee,\\n        uint256 _increasePerSummon,\\n        uint256 _increasePerGen\\n    ) external;\\n\\n    function setTimePerStamina(uint256 _timePerStamina) external;\\n\\n    function summonCrystal(\\n        uint256 _summonerId,\\n        uint256 _assistantId,\\n        uint8 _summonerTears,\\n        uint8 _assistantTears,\\n        address _enhancementStone\\n    ) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function timePerStamina() external view returns (uint256);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function unpause() external;\\n\\n    function vrf(uint256 blockNumber) external view returns (bytes32 result);\\n}\\n\",\"keccak256\":\"0x8c188f52ca2e3458729e0aa21d1009917e5eb0aa4d12b17204ce97876df9d7b7\",\"license\":\"MIT\"},\"contracts/messaging/dfk/bridge/HeroBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../../framework/SynMessagingReceiver.sol\\\";\\nimport \\\"../IHeroCoreUpgradeable.sol\\\";\\nimport \\\"../IAssistingAuctionUpgradeable.sol\\\";\\nimport {HeroStatus} from \\\"../types/HeroTypes.sol\\\";\\n\\npragma solidity 0.8.13;\\n\\n/** @title Core app for handling cross chain messaging passing to bridge Hero NFTs\\n */\\n\\ncontract HeroBridge is SynMessagingReceiver {\\n    address public heroes;\\n    address public assistingAuction;\\n\\n    struct MessageFormat {\\n        Hero dstHero;\\n        address dstUser;\\n        uint256 dstHeroId;\\n    }\\n\\n    constructor(\\n        address _messageBus,\\n        address _heroes,\\n        address _assistingAuction\\n    ) {\\n        messageBus = _messageBus;\\n        heroes = _heroes;\\n        assistingAuction = _assistingAuction;\\n    }\\n\\n    function _createMessage(\\n        uint256 _heroId,\\n        address _dstUserAddress,\\n        Hero memory _heroToBridge\\n    ) internal pure returns (bytes memory) {\\n        // create the message here from the nested struct\\n        MessageFormat memory msgFormat = MessageFormat({\\n            dstHeroId: _heroId,\\n            dstHero: _heroToBridge,\\n            dstUser: _dstUserAddress\\n        });\\n        return abi.encode(msgFormat);\\n    }\\n\\n    function _decodeMessage(bytes memory _message)\\n        internal\\n        pure\\n        returns (MessageFormat memory)\\n    {\\n        MessageFormat memory decodedMessage = abi.decode(\\n            _message,\\n            (MessageFormat)\\n        );\\n        return decodedMessage;\\n    }\\n\\n    /**\\n     * @notice User must have an existing hero minted to bridge it.\\n     * @param _heroId specifics which hero msg.sender already holds and will transfer to the bridge contract\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     */\\n    function sendHero(uint256 _heroId, uint256 _dstChainId) external payable {\\n        Hero memory heroToBridge = IHeroCoreUpgradeable(heroes).getHero(\\n            _heroId\\n        );\\n        bytes32 receiver = trustedRemoteLookup[_dstChainId];\\n        // _createMessage(heroId, dstUserAddress, Hero);\\n        bytes memory msgToPass = _createMessage(\\n            _heroId,\\n            msg.sender,\\n            heroToBridge\\n        );\\n        // Create _options\\n        // temporarily empty\\n        bytes memory options = bytes(\\\"\\\");\\n\\n        // revert if the hero is on a quest\\n        require(\\n            heroToBridge.state.currentQuest == address(0),\\n            \\\"hero is questing\\\"\\n        );\\n\\n        // revert if the hero is on auction\\n        require(\\n            !IAssistingAuction(assistingAuction).isOnAuction(_heroId),\\n            \\\"assisting auction\\\"\\n        );\\n\\n        IHeroCoreUpgradeable(heroes).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _heroId\\n        );\\n        // Hero now locked, message can be safely emitted\\n\\n        _send(receiver, _dstChainId, msgToPass, bytes(\\\"\\\"));\\n    }\\n\\n    // Function called by executeMessage() - handleMessage will handle the hero bridge mint\\n    // executeMessage() handles permissioning checks\\n    function _handleMessage(\\n        bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes memory _message,\\n        address _executor\\n    ) internal override returns (MsgExecutionStatus) {\\n        // Decode _message, depending on exactly how the originating message is structured\\n        /** \\n            Message data: \\n                Hero memory heroToBridge = IHeroCoreUpgradeable(heroes).getHero(_heroId);\\n                address dstUserAddress = msg.sender;\\n                uint256 dstHeroId = _heroId;\\n             */\\n        MessageFormat memory passedMsg = _decodeMessage(_message);\\n\\n        Hero memory dstHero = passedMsg.dstHero;\\n        address dstUser = passedMsg.dstUser;\\n        uint256 dstHeroId = passedMsg.dstHeroId;\\n\\n        // will revert if non-existant Hero\\n        try IHeroCoreUpgradeable(heroes).ownerOf(dstHeroId) returns (\\n            address owner\\n        ) {\\n            /** \\n                If heroId does exist (which means it should be locked on this contract), as it was bridged before.\\n                Transfer it to message.dstUserAddress\\n                */\\n\\n            if (owner == address(this)) {\\n                IHeroCoreUpgradeable(heroes).safeTransferFrom(\\n                    address(this),\\n                    dstUser,\\n                    dstHeroId\\n                );\\n            }\\n        } catch {\\n            /** \\n                If hero ID doesn't exist: \\n                Mint a hero to msg.dstUserAddress\\n                */\\n            IHeroCoreUpgradeable(heroes).bridgeMint(dstHero, dstUser);\\n        }\\n\\n        // update the hero attributes based on the attributes in the message (Assumes the message has more recent attributes)\\n        IHeroCoreUpgradeable(heroes).updateHero(dstHero);\\n        // Tx completed, return Success\\n        return MsgExecutionStatus.Success;\\n    }\\n\\n    function _send(\\n        bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message,\\n        bytes calldata _options\\n    ) internal override {\\n        require(trustedRemoteLookup[_dstChainId] != bytes32(0));\\n        require(trustedRemoteLookup[_dstChainId] == _receiver);\\n        IMessageBus(messageBus).sendMessage{value: msg.value}(\\n            _receiver,\\n            _dstChainId,\\n            _message,\\n            _options\\n        );\\n    }\\n\\n    function setAssistingAuctionAddress(address _assistingAuction) external onlyOwner {\\n        assistingAuction = _assistingAuction;\\n    }\\n}\\n\",\"keccak256\":\"0xafb04df9c4766506cc73a7fd97e9d8f8606017a91767e6cfc0c00c1c99310c9b\",\"license\":\"MIT\"},\"contracts/messaging/dfk/types/CrystalTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nstruct HeroCrystal {\\n    address owner;\\n    uint256 summonerId;\\n    uint256 assistantId;\\n    uint16 generation;\\n    uint256 createdBlock;\\n    uint256 heroId;\\n    uint8 summonerTears;\\n    uint8 assistantTears;\\n    address enhancementStone;\\n    uint32 maxSummons;\\n    uint32 firstName;\\n    uint32 lastName;\\n    uint8 shinyStyle;\\n}\\n\",\"keccak256\":\"0x124a20e57851ccef014836b8a41d3604be0cfb060587d48036fccac6af4a9eb0\",\"license\":\"MIT\"},\"contracts/messaging/dfk/types/HeroTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nenum HeroStatus {\\n    OK,\\n    KO\\n}\\n\\nenum Rarity {\\n    COMMON,\\n    UNCOMMON,\\n    RARE,\\n    LEGENDARY,\\n    MYTHIC\\n}\\n\\nstruct HeroStats {\\n    uint16 strength;\\n    uint16 agility;\\n    uint16 intelligence;\\n    uint16 wisdom;\\n    uint16 luck;\\n    uint16 vitality;\\n    uint16 endurance;\\n    uint16 dexterity;\\n    uint16 hp;\\n    uint16 mp;\\n    uint16 stamina;\\n}\\n\\nstruct HeroStatGrowth {\\n    uint16 strength;\\n    uint16 agility;\\n    uint16 intelligence;\\n    uint16 wisdom;\\n    uint16 luck;\\n    uint16 vitality;\\n    uint16 endurance;\\n    uint16 dexterity;\\n    uint16 hpSm;\\n    uint16 hpRg;\\n    uint16 hpLg;\\n    uint16 mpSm;\\n    uint16 mpRg;\\n    uint16 mpLg;\\n}\\n\\nstruct SummoningInfo {\\n    uint256 summonedTime;\\n    // How long until the hero can participate in summoning again.\\n    uint256 nextSummonTime;\\n    uint256 summonerId;\\n    uint256 assistantId;\\n    // How many summons the hero has done.\\n    uint32 summons;\\n    // How many summons can the hero do max.\\n    uint32 maxSummons;\\n}\\n\\nstruct HeroInfo {\\n    uint256 statGenes;\\n    uint256 visualGenes;\\n    Rarity rarity;\\n    bool shiny;\\n    uint16 generation;\\n    uint32 firstName;\\n    uint32 lastName;\\n    uint8 shinyStyle;\\n    uint8 class;\\n    uint8 subClass;\\n}\\n\\nstruct HeroState {\\n    // The time the hero's stamina is full at.\\n    uint256 staminaFullAt;\\n    // The time the hero's hp is full at.\\n    uint256 hpFullAt;\\n    // The time the hero's mp is full at.\\n    uint256 mpFullAt;\\n    // The current level of the hero.\\n    uint16 level;\\n    // The current XP the hero has towards their next level.\\n    uint64 xp;\\n    // The current quest a hero is undertaking, if any.\\n    address currentQuest;\\n    // The skill points the hero can spend.\\n    uint8 sp;\\n    HeroStatus status;\\n}\\n\\nstruct HeroProfessions {\\n    uint16 mining;\\n    uint16 gardening;\\n    uint16 foraging;\\n    uint16 fishing;\\n}\\n\\n/// @dev The main Hero struct.\\nstruct Hero {\\n    uint256 id;\\n    SummoningInfo summoningInfo;\\n    HeroInfo info;\\n    HeroState state;\\n    HeroStats stats;\\n    HeroStatGrowth primaryStatGrowth;\\n    HeroStatGrowth secondaryStatGrowth;\\n    HeroProfessions professions;\\n}\\n\\n\",\"keccak256\":\"0xd54451a95e04cf32050154b9bc9d22f3a0b173281f5ec5642efc000ac85dfa03\",\"license\":\"MIT\"},\"contracts/messaging/framework/SynMessagingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/ISynMessagingReceiver.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\n\\nabstract contract SynMessagingReceiver is ISynMessagingReceiver, Ownable {\\n    \\n    address public messageBus;\\n\\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\\n    mapping(uint256 => bytes32) internal trustedRemoteLookup;\\n\\n    event SetTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress);\\n\\n\\n    /**\\n     * @notice Executes a message called by MessageBus (MessageBusReceiver)\\n     * @dev Must be called by MessageBug & sent from src chain by a trusted srcApp\\n     * @param _srcAddress The bytes32 address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     * @return status Enum containing options of Success, Fail, Retry\\n     */\\n    function executeMessage(\\n        bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external returns (MsgExecutionStatus) {\\n        // Must be called by the MessageBus/MessageBus for security\\n        require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        // Must also be from a trusted source app\\n        require(_srcAddress == trustedRemoteLookup[_srcChainId], \\\"Invalid source sending app\\\");\\n\\n        return _handleMessage(_srcAddress, _srcChainId, _message, _executor);\\n    }\\n\\n    // Logic here handling messsage contents\\n    function _handleMessage(bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes memory _message,\\n        address _executor) internal virtual returns (MsgExecutionStatus);\\n\\n\\n    function _send(bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes memory _message,\\n        bytes memory _options) internal virtual {\\n            require(trustedRemoteLookup[_dstChainId] != bytes32(0));\\n            IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\\n    }\\n\\n    //** Config Functions */\\n    function setMessageBus(address _messageBus) public onlyOwner {\\n        messageBus = _messageBus;\\n    }\\n\\n     // allow owner to set trusted addresses allowed to be source senders\\n    function setTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\n    }\\n\\n    //** View functions */\\n    function getTrustedRemote(uint256 _chainId) external view returns (bytes32 trustedRemote) {\\n        return trustedRemoteLookup[_chainId];\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd88f193e9c38e691e15bce2f87d77f8f1c3ff3e332d1b19e5826fbc53868873c\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IMessageBus {\\n    \\n    /**\\n     * @notice Sends a message to a receiving contract address on another chain. \\n     * Sender must make sure that the message is unique and not a duplicate message.\\n     * @param _receiver The bytes32 address of the destination contract to be called\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _message The arbitrary payload to pass to the destination chain receiver\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\\n     */\\n    function sendMessage(\\n        bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message,\\n        bytes calldata _options\\n    ) external payable;\\n\\n    /**\\n     * @notice Relayer executes messages through an authenticated method to the destination receiver\\n     based on the originating transaction on source chain\\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\\n     * @param _srcAddress Originating bytes address of the message sender on the srcChain\\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\\n     */\\n    function executeMessage(\\n        uint256 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint256 _gasLimit,\\n        uint256 _nonce,\\n        bytes calldata _message\\n    ) external;\\n\\n\\n    /**\\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\\n     */\\n    function estimateFee(uint256 _dstChainId, bytes calldata _options)\\n        external\\n        returns (uint256);\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     */\\n    function withdrawFee(\\n        address _account\\n    ) external;\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xcc13995e79a6f8928551bec0ff911b8d9de8ab71fbbb561d1b44e8d11fd1d2b2\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/ISynMessagingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISynMessagingReceiver {\\n\\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\\n    // mapping(uint256 => bytes32) internal trustedRemoteLookup;\\n\\n\\n    /** \\n     * @notice MsgExecutionStatus state\\n     * @return Success execution succeeded, finalized\\n     * @return Fail // execution failed, finalized\\n     * @return Retry // execution failed or rejected, set to be retryable\\n    */ \\n    enum MsgExecutionStatus {\\n        Success, \\n        Fail,\\n        Retry\\n    }\\n\\n     /**\\n     * @notice Called by MessageBus \\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\\n     * @param _srcAddress The bytes32 address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external returns (MsgExecutionStatus);\\n}\\n    \",\"keccak256\":\"0x2f07ff171c4b27d75784bb6c2e7fc6f9cc9fe39306a736e1a429ba80bea5aa1e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e8538038062002e85833981810160405281019062000037919062000259565b620000576200004b6200012360201b60201c565b6200012b60201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620002b5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022182620001f4565b9050919050565b620002338162000214565b81146200023f57600080fd5b50565b600081519050620002538162000228565b92915050565b600080600060608486031215620002755762000274620001ef565b5b6000620002858682870162000242565b9350506020620002988682870162000242565b9250506040620002ab8682870162000242565b9150509250925092565b612bc080620002c56000396000f3fe6080604052600436106100a75760003560e01c806384a12b0f1161006457806384a12b0f146101875780638da5cb5b146101c4578063a1a227fa146101ef578063a60608711461021a578063bd3583ae14610257578063f2fde38b14610280576100a7565b80631efedbe5146100ac578063230bb9f6146100c8578063547cad12146100f35780635c9c7c731461011c578063715018a6146101455780637246a9481461015c575b600080fd5b6100c660048036038101906100c191906113e4565b6102a9565b005b3480156100d457600080fd5b506100dd61058e565b6040516100ea9190611465565b60405180910390f35b3480156100ff57600080fd5b5061011a600480360381019061011591906114ac565b6105b4565b005b34801561012857600080fd5b50610143600480360381019061013e91906114ac565b610674565b005b34801561015157600080fd5b5061015a610734565b005b34801561016857600080fd5b506101716107bc565b60405161017e9190611465565b60405180910390f35b34801561019357600080fd5b506101ae60048036038101906101a991906114d9565b6107e2565b6040516101bb919061151f565b60405180910390f35b3480156101d057600080fd5b506101d96107ff565b6040516101e69190611465565b60405180910390f35b3480156101fb57600080fd5b50610204610828565b6040516102119190611465565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c91906115cb565b61084e565b60405161024e91906116ca565b60405180910390f35b34801561026357600080fd5b5061027e600480360381019061027991906116e5565b610990565b005b34801561028c57600080fd5b506102a760048036038101906102a291906114ac565b610a61565b005b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321d80111846040518263ffffffff1660e01b81526004016103069190611734565b61088060405180830381865afa158015610324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103489190611f7c565b9050600060026000848152602001908152602001600020549050600061036f853385610b58565b90506000604051806020016040528060008152509050600073ffffffffffffffffffffffffffffffffffffffff16846060015160a0015173ffffffffffffffffffffffffffffffffffffffff16146103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390612007565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166337e246ad876040518263ffffffff1660e01b81526004016104579190611734565b6020604051808303816000875af1158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a9190612027565b156104da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d1906120a0565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3330896040518463ffffffff1660e01b8152600401610539939291906120c0565b600060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b5050505061058683868460405180602001604052806000815250610bb9565b505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105bc610c9a565b73ffffffffffffffffffffffffffffffffffffffff166105da6107ff565b73ffffffffffffffffffffffffffffffffffffffff1614610630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062790612143565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61067c610c9a565b73ffffffffffffffffffffffffffffffffffffffff1661069a6107ff565b73ffffffffffffffffffffffffffffffffffffffff16146106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e790612143565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61073c610c9a565b73ffffffffffffffffffffffffffffffffffffffff1661075a6107ff565b73ffffffffffffffffffffffffffffffffffffffff16146107b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a790612143565b60405180910390fd5b6107ba6000610ca2565b565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060026000838152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d7906121af565b60405180910390fd5b60026000868152602001908152602001600020548614610935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092c9061221b565b60405180910390fd5b610985868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505085610d66565b905095945050505050565b610998610c9a565b73ffffffffffffffffffffffffffffffffffffffff166109b66107ff565b73ffffffffffffffffffffffffffffffffffffffff1614610a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0390612143565b60405180910390fd5b8060026000848152602001908152602001600020819055507f642e74356c0610a9f944fb1a2d88d2fb82c6b74921566eee8bc0f9bb30f74f038282604051610a5592919061223b565b60405180910390a15050565b610a69610c9a565b73ffffffffffffffffffffffffffffffffffffffff16610a876107ff565b73ffffffffffffffffffffffffffffffffffffffff1614610add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad490612143565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b43906122d6565b60405180910390fd5b610b5581610ca2565b50565b6060600060405180606001604052808481526020018573ffffffffffffffffffffffffffffffffffffffff16815260200186815250905080604051602001610ba0919061291a565b6040516020818303038152906040529150509392505050565b6000801b600260008781526020019081526020016000205403610bdb57600080fd5b85600260008781526020019081526020016000205414610bfa57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8a4c1b348888888888886040518863ffffffff1660e01b8152600401610c6096959493929190612983565b6000604051808303818588803b158015610c7957600080fd5b505af1158015610c8d573d6000803e3d6000fd5b5050505050505050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080610d7284611020565b9050600081600001519050600082602001519050600083604001519050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b8152600401610dea9190611734565b602060405180830381865afa925050508015610e2457506040513d601f19601f82011682018060405250810190610e2191906129da565b60015b610ebc57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6855d6884846040518363ffffffff1660e01b8152600401610e85929190612aae565b600060405180830381600087803b158015610e9f57600080fd5b505af1158015610eb3573d6000803e3d6000fd5b50505050610f83565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f8157600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3085856040518463ffffffff1660e01b8152600401610f4e939291906120c0565b600060405180830381600087803b158015610f6857600080fd5b505af1158015610f7c573d6000803e3d6000fd5b505050505b505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0064103846040518263ffffffff1660e01b8152600401610fde9190612ad9565b600060405180830381600087803b158015610ff857600080fd5b505af115801561100c573d6000803e3d6000fd5b505050506000945050505050949350505050565b611028611049565b60008280602001905181019061103e9190612b5c565b905080915050919050565b604051806060016040528061105c611086565b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b604051806101000160405280600081526020016110a16110f5565b81526020016110ae611137565b81526020016110bb6111b7565b81526020016110c8611235565b81526020016110d56112bb565b81526020016110e26112bb565b81526020016110ef611362565b81525090565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001600063ffffffff168152602001600063ffffffff1681525090565b60405180610140016040528060008152602001600081526020016000600481111561116557611164611653565b5b8152602001600015158152602001600061ffff168152602001600063ffffffff168152602001600063ffffffff168152602001600060ff168152602001600060ff168152602001600060ff1681525090565b604051806101000160405280600081526020016000815260200160008152602001600061ffff168152602001600067ffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681526020016000600181111561122f5761122e611653565b5b81525090565b604051806101600160405280600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff1681525090565b604051806101c00160405280600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff1681525090565b6040518060800160405280600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6113c1816113ae565b81146113cc57600080fd5b50565b6000813590506113de816113b8565b92915050565b600080604083850312156113fb576113fa6113a4565b5b6000611409858286016113cf565b925050602061141a858286016113cf565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061144f82611424565b9050919050565b61145f81611444565b82525050565b600060208201905061147a6000830184611456565b92915050565b61148981611444565b811461149457600080fd5b50565b6000813590506114a681611480565b92915050565b6000602082840312156114c2576114c16113a4565b5b60006114d084828501611497565b91505092915050565b6000602082840312156114ef576114ee6113a4565b5b60006114fd848285016113cf565b91505092915050565b6000819050919050565b61151981611506565b82525050565b60006020820190506115346000830184611510565b92915050565b61154381611506565b811461154e57600080fd5b50565b6000813590506115608161153a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261158b5761158a611566565b5b8235905067ffffffffffffffff8111156115a8576115a761156b565b5b6020830191508360018202830111156115c4576115c3611570565b5b9250929050565b6000806000806000608086880312156115e7576115e66113a4565b5b60006115f588828901611551565b9550506020611606888289016113cf565b945050604086013567ffffffffffffffff811115611627576116266113a9565b5b61163388828901611575565b9350935050606061164688828901611497565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061169357611692611653565b5b50565b60008190506116a482611682565b919050565b60006116b482611696565b9050919050565b6116c4816116a9565b82525050565b60006020820190506116df60008301846116bb565b92915050565b600080604083850312156116fc576116fb6113a4565b5b600061170a858286016113cf565b925050602061171b85828601611551565b9150509250929050565b61172e816113ae565b82525050565b60006020820190506117496000830184611725565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61179d82611754565b810181811067ffffffffffffffff821117156117bc576117bb611765565b5b80604052505050565b60006117cf61139a565b90506117db8282611794565b919050565b6000815190506117ef816113b8565b92915050565b600063ffffffff82169050919050565b61180e816117f5565b811461181957600080fd5b50565b60008151905061182b81611805565b92915050565b600060c082840312156118475761184661174f565b5b61185160c06117c5565b90506000611861848285016117e0565b6000830152506020611875848285016117e0565b6020830152506040611889848285016117e0565b604083015250606061189d848285016117e0565b60608301525060806118b18482850161181c565b60808301525060a06118c58482850161181c565b60a08301525092915050565b600581106118de57600080fd5b50565b6000815190506118f0816118d1565b92915050565b60008115159050919050565b61190b816118f6565b811461191657600080fd5b50565b60008151905061192881611902565b92915050565b600061ffff82169050919050565b6119458161192e565b811461195057600080fd5b50565b6000815190506119628161193c565b92915050565b600060ff82169050919050565b61197e81611968565b811461198957600080fd5b50565b60008151905061199b81611975565b92915050565b600061014082840312156119b8576119b761174f565b5b6119c36101406117c5565b905060006119d3848285016117e0565b60008301525060206119e7848285016117e0565b60208301525060406119fb848285016118e1565b6040830152506060611a0f84828501611919565b6060830152506080611a2384828501611953565b60808301525060a0611a378482850161181c565b60a08301525060c0611a4b8482850161181c565b60c08301525060e0611a5f8482850161198c565b60e083015250610100611a748482850161198c565b61010083015250610120611a8a8482850161198c565b6101208301525092915050565b600067ffffffffffffffff82169050919050565b611ab481611a97565b8114611abf57600080fd5b50565b600081519050611ad181611aab565b92915050565b600081519050611ae681611480565b92915050565b60028110611af957600080fd5b50565b600081519050611b0b81611aec565b92915050565b60006101008284031215611b2857611b2761174f565b5b611b336101006117c5565b90506000611b43848285016117e0565b6000830152506020611b57848285016117e0565b6020830152506040611b6b848285016117e0565b6040830152506060611b7f84828501611953565b6060830152506080611b9384828501611ac2565b60808301525060a0611ba784828501611ad7565b60a08301525060c0611bbb8482850161198c565b60c08301525060e0611bcf84828501611afc565b60e08301525092915050565b60006101608284031215611bf257611bf161174f565b5b611bfd6101606117c5565b90506000611c0d84828501611953565b6000830152506020611c2184828501611953565b6020830152506040611c3584828501611953565b6040830152506060611c4984828501611953565b6060830152506080611c5d84828501611953565b60808301525060a0611c7184828501611953565b60a08301525060c0611c8584828501611953565b60c08301525060e0611c9984828501611953565b60e083015250610100611cae84828501611953565b61010083015250610120611cc484828501611953565b61012083015250610140611cda84828501611953565b6101408301525092915050565b60006101c08284031215611cfe57611cfd61174f565b5b611d096101c06117c5565b90506000611d1984828501611953565b6000830152506020611d2d84828501611953565b6020830152506040611d4184828501611953565b6040830152506060611d5584828501611953565b6060830152506080611d6984828501611953565b60808301525060a0611d7d84828501611953565b60a08301525060c0611d9184828501611953565b60c08301525060e0611da584828501611953565b60e083015250610100611dba84828501611953565b61010083015250610120611dd084828501611953565b61012083015250610140611de684828501611953565b61014083015250610160611dfc84828501611953565b61016083015250610180611e1284828501611953565b610180830152506101a0611e2884828501611953565b6101a08301525092915050565b600060808284031215611e4b57611e4a61174f565b5b611e5560806117c5565b90506000611e6584828501611953565b6000830152506020611e7984828501611953565b6020830152506040611e8d84828501611953565b6040830152506060611ea184828501611953565b60608301525092915050565b60006108808284031215611ec457611ec361174f565b5b611ecf6101006117c5565b90506000611edf848285016117e0565b6000830152506020611ef384828501611831565b60208301525060e0611f07848285016119a1565b604083015250610220611f1c84828501611b11565b606083015250610320611f3184828501611bdb565b608083015250610480611f4684828501611ce7565b60a083015250610640611f5b84828501611ce7565b60c083015250610800611f7084828501611e35565b60e08301525092915050565b60006108808284031215611f9357611f926113a4565b5b6000611fa184828501611ead565b91505092915050565b600082825260208201905092915050565b7f6865726f206973207175657374696e6700000000000000000000000000000000600082015250565b6000611ff1601083611faa565b9150611ffc82611fbb565b602082019050919050565b6000602082019050818103600083015261202081611fe4565b9050919050565b60006020828403121561203d5761203c6113a4565b5b600061204b84828501611919565b91505092915050565b7f617373697374696e672061756374696f6e000000000000000000000000000000600082015250565b600061208a601183611faa565b915061209582612054565b602082019050919050565b600060208201905081810360008301526120b98161207d565b9050919050565b60006060820190506120d56000830186611456565b6120e26020830185611456565b6120ef6040830184611725565b949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061212d602083611faa565b9150612138826120f7565b602082019050919050565b6000602082019050818103600083015261215c81612120565b9050919050565b7f63616c6c6572206973206e6f74206d6573736167652062757300000000000000600082015250565b6000612199601983611faa565b91506121a482612163565b602082019050919050565b600060208201905081810360008301526121c88161218c565b9050919050565b7f496e76616c696420736f757263652073656e64696e6720617070000000000000600082015250565b6000612205601a83611faa565b9150612210826121cf565b602082019050919050565b60006020820190508181036000830152612234816121f8565b9050919050565b60006040820190506122506000830185611725565b61225d6020830184611510565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006122c0602683611faa565b91506122cb82612264565b604082019050919050565b600060208201905081810360008301526122ef816122b3565b9050919050565b6122ff816113ae565b82525050565b61230e816117f5565b82525050565b60c08201600082015161232a60008501826122f6565b50602082015161233d60208501826122f6565b50604082015161235060408501826122f6565b50606082015161236360608501826122f6565b5060808201516123766080850182612305565b5060a082015161238960a0850182612305565b50505050565b600581106123a05761239f611653565b5b50565b60008190506123b18261238f565b919050565b60006123c1826123a3565b9050919050565b6123d1816123b6565b82525050565b6123e0816118f6565b82525050565b6123ef8161192e565b82525050565b6123fe81611968565b82525050565b6101408201600082015161241b60008501826122f6565b50602082015161242e60208501826122f6565b50604082015161244160408501826123c8565b50606082015161245460608501826123d7565b50608082015161246760808501826123e6565b5060a082015161247a60a0850182612305565b5060c082015161248d60c0850182612305565b5060e08201516124a060e08501826123f5565b506101008201516124b56101008501826123f5565b506101208201516124ca6101208501826123f5565b50505050565b6124d981611a97565b82525050565b6124e881611444565b82525050565b600281106124ff576124fe611653565b5b50565b6000819050612510826124ee565b919050565b600061252082612502565b9050919050565b61253081612515565b82525050565b6101008201600082015161254d60008501826122f6565b50602082015161256060208501826122f6565b50604082015161257360408501826122f6565b50606082015161258660608501826123e6565b50608082015161259960808501826124d0565b5060a08201516125ac60a08501826124df565b5060c08201516125bf60c08501826123f5565b5060e08201516125d260e0850182612527565b50505050565b610160820160008201516125ef60008501826123e6565b50602082015161260260208501826123e6565b50604082015161261560408501826123e6565b50606082015161262860608501826123e6565b50608082015161263b60808501826123e6565b5060a082015161264e60a08501826123e6565b5060c082015161266160c08501826123e6565b5060e082015161267460e08501826123e6565b506101008201516126896101008501826123e6565b5061012082015161269e6101208501826123e6565b506101408201516126b36101408501826123e6565b50505050565b6101c0820160008201516126d060008501826123e6565b5060208201516126e360208501826123e6565b5060408201516126f660408501826123e6565b50606082015161270960608501826123e6565b50608082015161271c60808501826123e6565b5060a082015161272f60a08501826123e6565b5060c082015161274260c08501826123e6565b5060e082015161275560e08501826123e6565b5061010082015161276a6101008501826123e6565b5061012082015161277f6101208501826123e6565b506101408201516127946101408501826123e6565b506101608201516127a96101608501826123e6565b506101808201516127be6101808501826123e6565b506101a08201516127d36101a08501826123e6565b50505050565b6080820160008201516127ef60008501826123e6565b50602082015161280260208501826123e6565b50604082015161281560408501826123e6565b50606082015161282860608501826123e6565b50505050565b6108808201600082015161284560008501826122f6565b5060208201516128586020850182612314565b50604082015161286b60e0850182612404565b50606082015161287f610220850182612536565b5060808201516128936103208501826125d8565b5060a08201516128a76104808501826126b9565b5060c08201516128bb6106408501826126b9565b5060e08201516128cf6108008501826127d9565b50505050565b6108c0820160008201516128ec600085018261282e565b5060208201516129006108808501826124df565b5060408201516129146108a08501826122f6565b50505050565b60006108c08201905061293060008301846128d5565b92915050565b600082825260208201905092915050565b82818337600083830152505050565b60006129628385612936565b935061296f838584612947565b61297883611754565b840190509392505050565b60006080820190506129986000830189611510565b6129a56020830188611725565b81810360408301526129b8818688612956565b905081810360608301526129cd818486612956565b9050979650505050505050565b6000602082840312156129f0576129ef6113a4565b5b60006129fe84828501611ad7565b91505092915050565b61088082016000820151612a1e60008501826122f6565b506020820151612a316020850182612314565b506040820151612a4460e0850182612404565b506060820151612a58610220850182612536565b506080820151612a6c6103208501826125d8565b5060a0820151612a806104808501826126b9565b5060c0820151612a946106408501826126b9565b5060e0820151612aa86108008501826127d9565b50505050565b60006108a082019050612ac46000830185612a07565b612ad2610880830184611456565b9392505050565b600061088082019050612aef6000830184612a07565b92915050565b60006108c08284031215612b0c57612b0b61174f565b5b612b1660606117c5565b90506000612b2684828501611ead565b600083015250610880612b3b84828501611ad7565b6020830152506108a0612b50848285016117e0565b60408301525092915050565b60006108c08284031215612b7357612b726113a4565b5b6000612b8184828501612af5565b9150509291505056fea26469706673582212206ac6d6e4c3de70e533037c984620c30544f063ba5f29e6555df8a561d513c2ee64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c806384a12b0f1161006457806384a12b0f146101875780638da5cb5b146101c4578063a1a227fa146101ef578063a60608711461021a578063bd3583ae14610257578063f2fde38b14610280576100a7565b80631efedbe5146100ac578063230bb9f6146100c8578063547cad12146100f35780635c9c7c731461011c578063715018a6146101455780637246a9481461015c575b600080fd5b6100c660048036038101906100c191906113e4565b6102a9565b005b3480156100d457600080fd5b506100dd61058e565b6040516100ea9190611465565b60405180910390f35b3480156100ff57600080fd5b5061011a600480360381019061011591906114ac565b6105b4565b005b34801561012857600080fd5b50610143600480360381019061013e91906114ac565b610674565b005b34801561015157600080fd5b5061015a610734565b005b34801561016857600080fd5b506101716107bc565b60405161017e9190611465565b60405180910390f35b34801561019357600080fd5b506101ae60048036038101906101a991906114d9565b6107e2565b6040516101bb919061151f565b60405180910390f35b3480156101d057600080fd5b506101d96107ff565b6040516101e69190611465565b60405180910390f35b3480156101fb57600080fd5b50610204610828565b6040516102119190611465565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c91906115cb565b61084e565b60405161024e91906116ca565b60405180910390f35b34801561026357600080fd5b5061027e600480360381019061027991906116e5565b610990565b005b34801561028c57600080fd5b506102a760048036038101906102a291906114ac565b610a61565b005b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321d80111846040518263ffffffff1660e01b81526004016103069190611734565b61088060405180830381865afa158015610324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103489190611f7c565b9050600060026000848152602001908152602001600020549050600061036f853385610b58565b90506000604051806020016040528060008152509050600073ffffffffffffffffffffffffffffffffffffffff16846060015160a0015173ffffffffffffffffffffffffffffffffffffffff16146103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390612007565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166337e246ad876040518263ffffffff1660e01b81526004016104579190611734565b6020604051808303816000875af1158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a9190612027565b156104da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d1906120a0565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3330896040518463ffffffff1660e01b8152600401610539939291906120c0565b600060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b5050505061058683868460405180602001604052806000815250610bb9565b505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105bc610c9a565b73ffffffffffffffffffffffffffffffffffffffff166105da6107ff565b73ffffffffffffffffffffffffffffffffffffffff1614610630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062790612143565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61067c610c9a565b73ffffffffffffffffffffffffffffffffffffffff1661069a6107ff565b73ffffffffffffffffffffffffffffffffffffffff16146106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e790612143565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61073c610c9a565b73ffffffffffffffffffffffffffffffffffffffff1661075a6107ff565b73ffffffffffffffffffffffffffffffffffffffff16146107b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a790612143565b60405180910390fd5b6107ba6000610ca2565b565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060026000838152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d7906121af565b60405180910390fd5b60026000868152602001908152602001600020548614610935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092c9061221b565b60405180910390fd5b610985868686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505085610d66565b905095945050505050565b610998610c9a565b73ffffffffffffffffffffffffffffffffffffffff166109b66107ff565b73ffffffffffffffffffffffffffffffffffffffff1614610a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0390612143565b60405180910390fd5b8060026000848152602001908152602001600020819055507f642e74356c0610a9f944fb1a2d88d2fb82c6b74921566eee8bc0f9bb30f74f038282604051610a5592919061223b565b60405180910390a15050565b610a69610c9a565b73ffffffffffffffffffffffffffffffffffffffff16610a876107ff565b73ffffffffffffffffffffffffffffffffffffffff1614610add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad490612143565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b43906122d6565b60405180910390fd5b610b5581610ca2565b50565b6060600060405180606001604052808481526020018573ffffffffffffffffffffffffffffffffffffffff16815260200186815250905080604051602001610ba0919061291a565b6040516020818303038152906040529150509392505050565b6000801b600260008781526020019081526020016000205403610bdb57600080fd5b85600260008781526020019081526020016000205414610bfa57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac8a4c1b348888888888886040518863ffffffff1660e01b8152600401610c6096959493929190612983565b6000604051808303818588803b158015610c7957600080fd5b505af1158015610c8d573d6000803e3d6000fd5b5050505050505050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080610d7284611020565b9050600081600001519050600082602001519050600083604001519050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b8152600401610dea9190611734565b602060405180830381865afa925050508015610e2457506040513d601f19601f82011682018060405250810190610e2191906129da565b60015b610ebc57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6855d6884846040518363ffffffff1660e01b8152600401610e85929190612aae565b600060405180830381600087803b158015610e9f57600080fd5b505af1158015610eb3573d6000803e3d6000fd5b50505050610f83565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f8157600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3085856040518463ffffffff1660e01b8152600401610f4e939291906120c0565b600060405180830381600087803b158015610f6857600080fd5b505af1158015610f7c573d6000803e3d6000fd5b505050505b505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0064103846040518263ffffffff1660e01b8152600401610fde9190612ad9565b600060405180830381600087803b158015610ff857600080fd5b505af115801561100c573d6000803e3d6000fd5b505050506000945050505050949350505050565b611028611049565b60008280602001905181019061103e9190612b5c565b905080915050919050565b604051806060016040528061105c611086565b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b604051806101000160405280600081526020016110a16110f5565b81526020016110ae611137565b81526020016110bb6111b7565b81526020016110c8611235565b81526020016110d56112bb565b81526020016110e26112bb565b81526020016110ef611362565b81525090565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001600063ffffffff168152602001600063ffffffff1681525090565b60405180610140016040528060008152602001600081526020016000600481111561116557611164611653565b5b8152602001600015158152602001600061ffff168152602001600063ffffffff168152602001600063ffffffff168152602001600060ff168152602001600060ff168152602001600060ff1681525090565b604051806101000160405280600081526020016000815260200160008152602001600061ffff168152602001600067ffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681526020016000600181111561122f5761122e611653565b5b81525090565b604051806101600160405280600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff1681525090565b604051806101c00160405280600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff1681525090565b6040518060800160405280600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6113c1816113ae565b81146113cc57600080fd5b50565b6000813590506113de816113b8565b92915050565b600080604083850312156113fb576113fa6113a4565b5b6000611409858286016113cf565b925050602061141a858286016113cf565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061144f82611424565b9050919050565b61145f81611444565b82525050565b600060208201905061147a6000830184611456565b92915050565b61148981611444565b811461149457600080fd5b50565b6000813590506114a681611480565b92915050565b6000602082840312156114c2576114c16113a4565b5b60006114d084828501611497565b91505092915050565b6000602082840312156114ef576114ee6113a4565b5b60006114fd848285016113cf565b91505092915050565b6000819050919050565b61151981611506565b82525050565b60006020820190506115346000830184611510565b92915050565b61154381611506565b811461154e57600080fd5b50565b6000813590506115608161153a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261158b5761158a611566565b5b8235905067ffffffffffffffff8111156115a8576115a761156b565b5b6020830191508360018202830111156115c4576115c3611570565b5b9250929050565b6000806000806000608086880312156115e7576115e66113a4565b5b60006115f588828901611551565b9550506020611606888289016113cf565b945050604086013567ffffffffffffffff811115611627576116266113a9565b5b61163388828901611575565b9350935050606061164688828901611497565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061169357611692611653565b5b50565b60008190506116a482611682565b919050565b60006116b482611696565b9050919050565b6116c4816116a9565b82525050565b60006020820190506116df60008301846116bb565b92915050565b600080604083850312156116fc576116fb6113a4565b5b600061170a858286016113cf565b925050602061171b85828601611551565b9150509250929050565b61172e816113ae565b82525050565b60006020820190506117496000830184611725565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61179d82611754565b810181811067ffffffffffffffff821117156117bc576117bb611765565b5b80604052505050565b60006117cf61139a565b90506117db8282611794565b919050565b6000815190506117ef816113b8565b92915050565b600063ffffffff82169050919050565b61180e816117f5565b811461181957600080fd5b50565b60008151905061182b81611805565b92915050565b600060c082840312156118475761184661174f565b5b61185160c06117c5565b90506000611861848285016117e0565b6000830152506020611875848285016117e0565b6020830152506040611889848285016117e0565b604083015250606061189d848285016117e0565b60608301525060806118b18482850161181c565b60808301525060a06118c58482850161181c565b60a08301525092915050565b600581106118de57600080fd5b50565b6000815190506118f0816118d1565b92915050565b60008115159050919050565b61190b816118f6565b811461191657600080fd5b50565b60008151905061192881611902565b92915050565b600061ffff82169050919050565b6119458161192e565b811461195057600080fd5b50565b6000815190506119628161193c565b92915050565b600060ff82169050919050565b61197e81611968565b811461198957600080fd5b50565b60008151905061199b81611975565b92915050565b600061014082840312156119b8576119b761174f565b5b6119c36101406117c5565b905060006119d3848285016117e0565b60008301525060206119e7848285016117e0565b60208301525060406119fb848285016118e1565b6040830152506060611a0f84828501611919565b6060830152506080611a2384828501611953565b60808301525060a0611a378482850161181c565b60a08301525060c0611a4b8482850161181c565b60c08301525060e0611a5f8482850161198c565b60e083015250610100611a748482850161198c565b61010083015250610120611a8a8482850161198c565b6101208301525092915050565b600067ffffffffffffffff82169050919050565b611ab481611a97565b8114611abf57600080fd5b50565b600081519050611ad181611aab565b92915050565b600081519050611ae681611480565b92915050565b60028110611af957600080fd5b50565b600081519050611b0b81611aec565b92915050565b60006101008284031215611b2857611b2761174f565b5b611b336101006117c5565b90506000611b43848285016117e0565b6000830152506020611b57848285016117e0565b6020830152506040611b6b848285016117e0565b6040830152506060611b7f84828501611953565b6060830152506080611b9384828501611ac2565b60808301525060a0611ba784828501611ad7565b60a08301525060c0611bbb8482850161198c565b60c08301525060e0611bcf84828501611afc565b60e08301525092915050565b60006101608284031215611bf257611bf161174f565b5b611bfd6101606117c5565b90506000611c0d84828501611953565b6000830152506020611c2184828501611953565b6020830152506040611c3584828501611953565b6040830152506060611c4984828501611953565b6060830152506080611c5d84828501611953565b60808301525060a0611c7184828501611953565b60a08301525060c0611c8584828501611953565b60c08301525060e0611c9984828501611953565b60e083015250610100611cae84828501611953565b61010083015250610120611cc484828501611953565b61012083015250610140611cda84828501611953565b6101408301525092915050565b60006101c08284031215611cfe57611cfd61174f565b5b611d096101c06117c5565b90506000611d1984828501611953565b6000830152506020611d2d84828501611953565b6020830152506040611d4184828501611953565b6040830152506060611d5584828501611953565b6060830152506080611d6984828501611953565b60808301525060a0611d7d84828501611953565b60a08301525060c0611d9184828501611953565b60c08301525060e0611da584828501611953565b60e083015250610100611dba84828501611953565b61010083015250610120611dd084828501611953565b61012083015250610140611de684828501611953565b61014083015250610160611dfc84828501611953565b61016083015250610180611e1284828501611953565b610180830152506101a0611e2884828501611953565b6101a08301525092915050565b600060808284031215611e4b57611e4a61174f565b5b611e5560806117c5565b90506000611e6584828501611953565b6000830152506020611e7984828501611953565b6020830152506040611e8d84828501611953565b6040830152506060611ea184828501611953565b60608301525092915050565b60006108808284031215611ec457611ec361174f565b5b611ecf6101006117c5565b90506000611edf848285016117e0565b6000830152506020611ef384828501611831565b60208301525060e0611f07848285016119a1565b604083015250610220611f1c84828501611b11565b606083015250610320611f3184828501611bdb565b608083015250610480611f4684828501611ce7565b60a083015250610640611f5b84828501611ce7565b60c083015250610800611f7084828501611e35565b60e08301525092915050565b60006108808284031215611f9357611f926113a4565b5b6000611fa184828501611ead565b91505092915050565b600082825260208201905092915050565b7f6865726f206973207175657374696e6700000000000000000000000000000000600082015250565b6000611ff1601083611faa565b9150611ffc82611fbb565b602082019050919050565b6000602082019050818103600083015261202081611fe4565b9050919050565b60006020828403121561203d5761203c6113a4565b5b600061204b84828501611919565b91505092915050565b7f617373697374696e672061756374696f6e000000000000000000000000000000600082015250565b600061208a601183611faa565b915061209582612054565b602082019050919050565b600060208201905081810360008301526120b98161207d565b9050919050565b60006060820190506120d56000830186611456565b6120e26020830185611456565b6120ef6040830184611725565b949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061212d602083611faa565b9150612138826120f7565b602082019050919050565b6000602082019050818103600083015261215c81612120565b9050919050565b7f63616c6c6572206973206e6f74206d6573736167652062757300000000000000600082015250565b6000612199601983611faa565b91506121a482612163565b602082019050919050565b600060208201905081810360008301526121c88161218c565b9050919050565b7f496e76616c696420736f757263652073656e64696e6720617070000000000000600082015250565b6000612205601a83611faa565b9150612210826121cf565b602082019050919050565b60006020820190508181036000830152612234816121f8565b9050919050565b60006040820190506122506000830185611725565b61225d6020830184611510565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006122c0602683611faa565b91506122cb82612264565b604082019050919050565b600060208201905081810360008301526122ef816122b3565b9050919050565b6122ff816113ae565b82525050565b61230e816117f5565b82525050565b60c08201600082015161232a60008501826122f6565b50602082015161233d60208501826122f6565b50604082015161235060408501826122f6565b50606082015161236360608501826122f6565b5060808201516123766080850182612305565b5060a082015161238960a0850182612305565b50505050565b600581106123a05761239f611653565b5b50565b60008190506123b18261238f565b919050565b60006123c1826123a3565b9050919050565b6123d1816123b6565b82525050565b6123e0816118f6565b82525050565b6123ef8161192e565b82525050565b6123fe81611968565b82525050565b6101408201600082015161241b60008501826122f6565b50602082015161242e60208501826122f6565b50604082015161244160408501826123c8565b50606082015161245460608501826123d7565b50608082015161246760808501826123e6565b5060a082015161247a60a0850182612305565b5060c082015161248d60c0850182612305565b5060e08201516124a060e08501826123f5565b506101008201516124b56101008501826123f5565b506101208201516124ca6101208501826123f5565b50505050565b6124d981611a97565b82525050565b6124e881611444565b82525050565b600281106124ff576124fe611653565b5b50565b6000819050612510826124ee565b919050565b600061252082612502565b9050919050565b61253081612515565b82525050565b6101008201600082015161254d60008501826122f6565b50602082015161256060208501826122f6565b50604082015161257360408501826122f6565b50606082015161258660608501826123e6565b50608082015161259960808501826124d0565b5060a08201516125ac60a08501826124df565b5060c08201516125bf60c08501826123f5565b5060e08201516125d260e0850182612527565b50505050565b610160820160008201516125ef60008501826123e6565b50602082015161260260208501826123e6565b50604082015161261560408501826123e6565b50606082015161262860608501826123e6565b50608082015161263b60808501826123e6565b5060a082015161264e60a08501826123e6565b5060c082015161266160c08501826123e6565b5060e082015161267460e08501826123e6565b506101008201516126896101008501826123e6565b5061012082015161269e6101208501826123e6565b506101408201516126b36101408501826123e6565b50505050565b6101c0820160008201516126d060008501826123e6565b5060208201516126e360208501826123e6565b5060408201516126f660408501826123e6565b50606082015161270960608501826123e6565b50608082015161271c60808501826123e6565b5060a082015161272f60a08501826123e6565b5060c082015161274260c08501826123e6565b5060e082015161275560e08501826123e6565b5061010082015161276a6101008501826123e6565b5061012082015161277f6101208501826123e6565b506101408201516127946101408501826123e6565b506101608201516127a96101608501826123e6565b506101808201516127be6101808501826123e6565b506101a08201516127d36101a08501826123e6565b50505050565b6080820160008201516127ef60008501826123e6565b50602082015161280260208501826123e6565b50604082015161281560408501826123e6565b50606082015161282860608501826123e6565b50505050565b6108808201600082015161284560008501826122f6565b5060208201516128586020850182612314565b50604082015161286b60e0850182612404565b50606082015161287f610220850182612536565b5060808201516128936103208501826125d8565b5060a08201516128a76104808501826126b9565b5060c08201516128bb6106408501826126b9565b5060e08201516128cf6108008501826127d9565b50505050565b6108c0820160008201516128ec600085018261282e565b5060208201516129006108808501826124df565b5060408201516129146108a08501826122f6565b50505050565b60006108c08201905061293060008301846128d5565b92915050565b600082825260208201905092915050565b82818337600083830152505050565b60006129628385612936565b935061296f838584612947565b61297883611754565b840190509392505050565b60006080820190506129986000830189611510565b6129a56020830188611725565b81810360408301526129b8818688612956565b905081810360608301526129cd818486612956565b9050979650505050505050565b6000602082840312156129f0576129ef6113a4565b5b60006129fe84828501611ad7565b91505092915050565b61088082016000820151612a1e60008501826122f6565b506020820151612a316020850182612314565b506040820151612a4460e0850182612404565b506060820151612a58610220850182612536565b506080820151612a6c6103208501826125d8565b5060a0820151612a806104808501826126b9565b5060c0820151612a946106408501826126b9565b5060e0820151612aa86108008501826127d9565b50505050565b60006108a082019050612ac46000830185612a07565b612ad2610880830184611456565b9392505050565b600061088082019050612aef6000830184612a07565b92915050565b60006108c08284031215612b0c57612b0b61174f565b5b612b1660606117c5565b90506000612b2684828501611ead565b600083015250610880612b3b84828501611ad7565b6020830152506108a0612b50848285016117e0565b60408301525092915050565b60006108c08284031215612b7357612b726113a4565b5b6000612b8184828501612af5565b9150509291505056fea26469706673582212206ac6d6e4c3de70e533037c984620c30544f063ba5f29e6555df8a561d513c2ee64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessage(bytes32,uint256,bytes,address)": {
        "details": "Must be called by MessageBug & sent from src chain by a trusted srcApp",
        "params": {
          "_executor": "Address who called the MessageBus execution function",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_srcAddress": "The bytes32 address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from"
        },
        "returns": {
          "_0": "status Enum containing options of Success, Fail, Retry"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendHero(uint256,uint256)": {
        "params": {
          "_dstChainId": "The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains",
          "_heroId": "specifics which hero msg.sender already holds and will transfer to the bridge contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Core app for handling cross chain messaging passing to bridge Hero NFTs",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessage(bytes32,uint256,bytes,address)": {
        "notice": "Executes a message called by MessageBus (MessageBusReceiver)"
      },
      "sendHero(uint256,uint256)": {
        "notice": "User must have an existing hero minted to bridge it."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 962,
        "contract": "contracts/messaging/dfk/bridge/HeroBridge.sol:HeroBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7985,
        "contract": "contracts/messaging/dfk/bridge/HeroBridge.sol:HeroBridge",
        "label": "messageBus",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7989,
        "contract": "contracts/messaging/dfk/bridge/HeroBridge.sol:HeroBridge",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 6885,
        "contract": "contracts/messaging/dfk/bridge/HeroBridge.sol:HeroBridge",
        "label": "heroes",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6887,
        "contract": "contracts/messaging/dfk/bridge/HeroBridge.sol:HeroBridge",
        "label": "assistingAuction",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}