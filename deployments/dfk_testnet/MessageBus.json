{
  "address": "0x57562B26C7B35053e2AdDd54888a6B571c04d3df",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasFeePricing",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "CallReverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcNonce",
          "type": "uint64"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcChainID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receiver",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dstChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authVerifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_srcAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_dstAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "computeMessageIdSender",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "estimateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        }
      ],
      "name": "executeMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasFeePricing",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        }
      ],
      "name": "getExecutedMessage",
      "outputs": [
        {
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_receiver",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authVerifier",
          "type": "address"
        }
      ],
      "name": "updateAuthVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasFeePricing",
          "type": "address"
        }
      ],
      "name": "updateGasFeePricing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageId",
          "type": "bytes32"
        },
        {
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "updateMessageStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawGasFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc00706b2b3bd680d39fa3a3b2c6248b11ab0ee2e1b8e90cbcf16a41faa8dcb8",
  "receipt": {
    "to": null,
    "from": "0x235AF07E770f474d24F5bf73074735892371b40D",
    "contractAddress": "0x57562B26C7B35053e2AdDd54888a6B571c04d3df",
    "transactionIndex": 0,
    "gasUsed": "1428168",
    "logsBloom": "0x
    "blockHash": "0xeba2bec605eb8d843a494408074e93dc4cc5007babde9566bbe0b56923f7cfa6",
    "transactionHash": "0xdc00706b2b3bd680d39fa3a3b2c6248b11ab0ee2e1b8e90cbcf16a41faa8dcb8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6820,
        "transactionHash": "0xdc00706b2b3bd680d39fa3a3b2c6248b11ab0ee2e1b8e90cbcf16a41faa8dcb8",
        "address": "0x57562B26C7B35053e2AdDd54888a6B571c04d3df",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000235af07e770f474d24f5bf73074735892371b40d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xeba2bec605eb8d843a494408074e93dc4cc5007babde9566bbe0b56923f7cfa6"
      }
    ],
    "blockNumber": 6820,
    "cumulativeGasUsed": "1428168",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9596A3C6a4B2597adCC5D6d69b281A7C49e3Fe6A",
    "0x4C5F47a539056141D55d754b2313A4e8A5a3dd68"
  ],
  "solcInputHash": "746538817e45487193396804d77ed137",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasFeePricing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CallReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcNonce\",\"type\":\"uint64\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_srcAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_dstAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"computeMessageIdSender\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"estimateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasFeePricing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"getExecutedMessage\",\"outputs\":[{\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authVerifier\",\"type\":\"address\"}],\"name\":\"updateAuthVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasFeePricing\",\"type\":\"address\"}],\"name\":\"updateGasFeePricing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"},{\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"updateMessageStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawGasFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)\":{\"params\":{\"_dstAddress\":\"Destination address that the arbitrary message will be passed to\",\"_gasLimit\":\"Gas limit to be passed alongside the message, depending on the fee paid on srcChain\",\"_message\":\"Arbitrary message payload to pass to the destination chain receiver\",\"_srcAddress\":\"Originating bytes32 address of the message sender on the srcChain\",\"_srcChainId\":\"Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendMessage(bytes32,uint256,bytes,bytes)\":{\"params\":{\"_dstChainId\":\"The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\",\"_message\":\"The arbitrary payload to pass to the destination chain receiver\",\"_options\":\"Versioned struct used to instruct relayer on how to proceed with gas limits\",\"_receiver\":\"The bytes32 address of the destination contract to be called\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawGasFees(address)\":{\"params\":{\"to\":\"Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)\":{\"notice\":\"Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\"},\"sendMessage(bytes32,uint256,bytes,bytes)\":{\"notice\":\"Sends a message to a receiving contract address on another chain. Sender must make sure that the message is unique and not a duplicate message.\"},\"updateMessageStatus(bytes32,uint8)\":{\"notice\":\"CONTRACT CONFIG \"},\"withdrawGasFees(address)\":{\"notice\":\"Withdraws accumulated fees in native gas token, based on fees variable.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/MessageBus.sol\":\"MessageBus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.5.0/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/messaging/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./MessageBusSender.sol\\\";\\nimport \\\"./MessageBusReceiver.sol\\\";\\n\\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\\n    constructor(address _gasFeePricing, address _authVerifier)\\n        MessageBusSender(_gasFeePricing)\\n        MessageBusReceiver(_authVerifier)\\n    {}\\n}\\n\",\"keccak256\":\"0xa06b67fe831c4da3c49fdac8b3e64315f1d0d96adddb36e5499b6eaf50de2ed1\",\"license\":\"MIT\"},\"contracts/messaging/MessageBusReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IAuthVerifier.sol\\\";\\nimport \\\"./interfaces/ISynMessagingReceiver.sol\\\";\\n\\ncontract MessageBusReceiver is Ownable {\\n    address public authVerifier;\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail\\n    }\\n\\n    // Store all successfully executed messages\\n    mapping(bytes32 => TxStatus) executedMessages;\\n\\n    // TODO: Rename to follow one standard convention -> Send -> Receive?\\n    event Executed(\\n        bytes32 indexed messageId,\\n        TxStatus status,\\n        address indexed _dstAddress,\\n        uint64 srcChainId,\\n        uint64 srcNonce\\n    );\\n    event CallReverted(string reason);\\n\\n    constructor(address _authVerifier) {\\n        authVerifier = _authVerifier;\\n    }\\n\\n    function getExecutedMessage(bytes32 _messageId)\\n        external\\n        view\\n        returns (TxStatus)\\n    {\\n        return executedMessages[_messageId];\\n    }\\n\\n    /**\\n     * @notice Relayer executes messages through an authenticated method to the destination receiver\\n     based on the originating transaction on source chain\\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\\n     * @param _srcAddress Originating bytes32 address of the message sender on the srcChain\\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\\n     */\\n    function executeMessage(\\n        uint256 _srcChainId,\\n        bytes32 _srcAddress,\\n        address _dstAddress,\\n        uint256 _gasLimit,\\n        uint256 _nonce,\\n        bytes calldata _message,\\n        bytes32 _messageId\\n    ) external {\\n        // In order to guarentee that an individual message is only executed once, a messageId is passed\\n        // enforce that this message ID hasn't already been tried ever\\n        bytes32 messageId = _messageId;\\n        require(\\n            executedMessages[messageId] == TxStatus.Null,\\n            \\\"Message already executed\\\"\\n        );\\n        // Authenticate executeMessage, will revert if not authenticated\\n        IAuthVerifier(authVerifier).msgAuth(abi.encode(msg.sender));\\n        // Message is now in-flight, adjust status\\n        // executedMessages[messageId] = TxStatus.Pending;\\n\\n        TxStatus status;\\n        try\\n            ISynMessagingReceiver(_dstAddress).executeMessage{gas: _gasLimit}(\\n                _srcAddress,\\n                _srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        {\\n            // Assuming success state if no revert\\n            status = TxStatus.Success;\\n        } catch (bytes memory reason) {\\n            // call hard reverted & failed\\n            emit CallReverted(getRevertMsg(reason));\\n            status = TxStatus.Fail;\\n        }\\n\\n        executedMessages[messageId] = status;\\n        emit Executed(\\n            messageId,\\n            status,\\n            _dstAddress,\\n            uint64(_srcChainId),\\n            uint64(_nonce)\\n        );\\n    }\\n\\n    /** HELPER VIEW FUNCTION */\\n    // https://ethereum.stackexchange.com/a/83577\\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\\n    function getRevertMsg(bytes memory _returnData)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /** CONTRACT CONFIG */\\n\\n    function updateMessageStatus(bytes32 _messageId, TxStatus _status)\\n        public\\n        onlyOwner\\n    {\\n        executedMessages[_messageId] = _status;\\n    }\\n\\n    function updateAuthVerifier(address _authVerifier) public onlyOwner {\\n        require(_authVerifier != address(0), \\\"Cannot set to 0\\\");\\n        authVerifier = _authVerifier;\\n    }\\n}\\n\",\"keccak256\":\"0x4f9eed6301695022f75854064ec6f394a21881fa89a4e807e6f24144b2e87f7c\",\"license\":\"MIT\"},\"contracts/messaging/MessageBusSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-4.5.0/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IGasFeePricing.sol\\\";\\n\\ncontract MessageBusSender is Ownable {\\n    address public gasFeePricing;\\n    uint64 public nonce;\\n    uint256 internal fees;\\n\\n    constructor(address _gasFeePricing) {\\n        gasFeePricing = _gasFeePricing;\\n    }\\n\\n    event MessageSent(\\n        address indexed sender,\\n        uint256 srcChainID,\\n        bytes32 receiver,\\n        uint256 indexed dstChainId,\\n        bytes message,\\n        uint64 nonce,\\n        bytes options,\\n        uint256 fee,\\n        bytes32 indexed messageId\\n    );\\n\\n    function computeMessageIdSender(\\n        uint256 _srcChainId,\\n        address _srcAddress,\\n        uint256 _dstChainId,\\n        bytes32 _dstAddress,\\n        uint256 _nonce,\\n        bytes calldata _message\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _srcChainId,\\n                    _srcAddress,\\n                    _dstChainId,\\n                    _dstAddress,\\n                    _nonce,\\n                    _message\\n                )\\n            );\\n    }\\n\\n    function estimateFee(uint256 _dstChainId, bytes calldata _options)\\n        public\\n        returns (uint256)\\n    {\\n        uint256 fee = IGasFeePricing(gasFeePricing).estimateGasFee(\\n            _dstChainId,\\n            _options\\n        );\\n        require(fee != 0, \\\"Fee not set\\\");\\n        return fee;\\n    }\\n\\n    /**\\n     * @notice Sends a message to a receiving contract address on another chain.\\n     * Sender must make sure that the message is unique and not a duplicate message.\\n     * @param _receiver The bytes32 address of the destination contract to be called\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _message The arbitrary payload to pass to the destination chain receiver\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\\n     */\\n    function sendMessage(\\n        bytes32 _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message,\\n        bytes calldata _options\\n    ) external payable {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 fee = estimateFee(_dstChainId, _options);\\n        require(msg.value >= fee, \\\"Insuffient gas fee\\\");\\n        bytes32 msgId = computeMessageIdSender(block.chainid, msg.sender,  _dstChainId, _receiver, nonce, _message);\\n        emit MessageSent(\\n            msg.sender,\\n            block.chainid,\\n            _receiver,\\n            _dstChainId,\\n            _message,\\n            nonce,\\n            _options,\\n            msg.value,\\n            msgId\\n        );\\n        fees += msg.value;\\n        ++nonce;\\n    }\\n\\n    /**\\n     * @notice Withdraws accumulated fees in native gas token, based on fees variable.\\n     * @param to Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas\\n     */\\n    function withdrawGasFees(address payable to) external onlyOwner {\\n        uint256 withdrawAmount = fees;\\n        // Reset fees to 0\\n        to.transfer(withdrawAmount);\\n        delete fees;\\n    }\\n\\n    function updateGasFeePricing(address _gasFeePricing) public onlyOwner {\\n        require(_gasFeePricing != address(0), \\\"Cannot set to 0\\\");\\n        gasFeePricing = _gasFeePricing;\\n    }\\n}\\n\",\"keccak256\":\"0x0eb35f0ba31be96edeea5d9b2377751cf31970d1d89cd71214656734e6973008\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IAuthVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IAuthVerifier {\\n    /**\\n     * @notice Authentication library to allow the validator network to execute cross-chain messages.\\n     * @param _authData A bytes32 address encoded via abi.encode(address)\\n     * @return authenticated returns true if bytes data submitted and decoded to the address is correct\\n     */\\n    function msgAuth(bytes calldata _authData)\\n        external\\n        view\\n        returns (bool authenticated);\\n\\n    /**\\n     * @notice Permissioned method to support upgrades to the library\\n     * @param _nodegroup address which has authentication to execute messages\\n     */\\n    function setNodeGroup(address _nodegroup) external;\\n}\",\"keccak256\":\"0xf9847b671ca1a3b929d66eed7fb4b3eeda245e169fc9fca686729f1dea96497c\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IGasFeePricing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IGasFeePricing {\\n    \\n    /**\\n     * @notice Permissioned method to allow an off-chain party to set what each dstChain's\\n     * gas cost is priced in the srcChain's native gas currency. \\n     * Example: call on ETH, setCostPerChain(43114, 30000000000, 25180000000000000)\\n     * chain ID 43114\\n     * Average of 30 gwei cost to transaction on 43114\\n     * AVAX/ETH = 0.02518, scaled to gas in wei = 25180000000000000\\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\\n     * @param _gasUnitPrice The estimated current gas price in wei of the destination chain\\n     * @param _gasTokenPriceRatio Gas ratio of dstGasToken / srcGasToken\\n     */\\n    function setCostPerChain(uint256 _dstChainId, uint256 _gasUnitPrice, uint256 _gasTokenPriceRatio) external;\\n\\n    /**\\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\\n     */\\n    function estimateGasFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\\n}  \",\"keccak256\":\"0xdec270ed7ddbeaa560dc0b5e2df2255f6e1b8be95eaafe9fce072b194aff8aff\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/ISynMessagingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISynMessagingReceiver {\\n\\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\\n    // mapping(uint256 => bytes32) internal trustedRemoteLookup;\\n\\n\\n    /** \\n     * @notice MsgExecutionStatus state\\n     * @return Success execution succeeded, finalized\\n     * @return Fail // execution failed, finalized\\n     * @return Retry // execution failed or rejected, set to be retryable\\n    */ \\n    enum MsgExecutionStatus {\\n        Success, \\n        Fail\\n    }\\n\\n     /**\\n     * @notice Called by MessageBus \\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\\n     * @param _srcAddress The bytes32 address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        bytes32 _srcAddress,\\n        uint256 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external returns (MsgExecutionStatus);\\n}\\n    \",\"keccak256\":\"0x9081c7651818c6d57dbbe3053422ca5789b7cee0d9a6d79c7a912fc02b30fd58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620018e2380380620018e28339810160408190526200003491620000e6565b8082620000413362000079565b600180546001600160a01b039283166001600160a01b03199182161790915560038054939092169216919091179055506200011e9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000e157600080fd5b919050565b60008060408385031215620000fa57600080fd5b6200010583620000c9565b91506200011560208401620000c9565b90509250929050565b6117b4806200012e6000396000f3fe6080604052600436106100e85760003560e01c8063a5c0edf31161008a578063affed0e011610059578063affed0e0146102a0578063c4087335146102f2578063d6b457b91461031f578063f2fde38b1461033f57600080fd5b8063a5c0edf314610220578063a66dd38414610240578063aa70fc0e14610260578063ac8a4c1b1461028d57600080fd5b8063715018a6116100c6578063715018a61461017d5780638da5cb5b146101945780639b11079c146101e0578063a1b058d81461020057600080fd5b80630bb7e6aa146100ed57806325b19fa3146101205780635da6d2c41461015d575b600080fd5b3480156100f957600080fd5b5061010d6101083660046110e2565b61035f565b6040519081526020015b60405180910390f35b34801561012c57600080fd5b5061015061013b36600461115f565b60009081526004602052604090205460ff1690565b60405161011791906111e2565b34801561016957600080fd5b5061010d6101783660046111f0565b6103a1565b34801561018957600080fd5b506101926104bc565b005b3480156101a057600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610117565b3480156101ec57600080fd5b506101926101fb36600461123c565b610549565b34801561020c57600080fd5b5061019261021b366004611270565b61061c565b34801561022c57600080fd5b5061019261023b3660046112f4565b610910565b34801561024c57600080fd5b5061019261025b3660046112f4565b610a55565b34801561026c57600080fd5b506001546101bb9073ffffffffffffffffffffffffffffffffffffffff1681565b61019261029b366004611318565b610b9a565b3480156102ac57600080fd5b506001546102d99074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610117565b3480156102fe57600080fd5b506003546101bb9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561032b57600080fd5b5061019261033a3660046112f4565b610d9c565b34801561034b57600080fd5b5061019261035a3660046112f4565b610e6d565b60008787878787878760405160200161037e97969594939291906113e4565b604051602081830303815290604052805190602001209050979650505050505050565b6001546040517f47feadc1000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff909116906347feadc19061040090889088908890600401611439565b6020604051808303816000875af115801561041f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610443919061145c565b9050806000036104b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f466565206e6f742073657400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461053d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b6105476000610f9d565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b600082815260046020526040902080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600281111561061357610613611178565b02179055505050565b806000808281526004602052604090205460ff16600281111561064157610641611178565b146106a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4d65737361676520616c7265616479206578656375746564000000000000000060448201526064016104ab565b6003546040805133602082015273ffffffffffffffffffffffffffffffffffffffff90921691638b1b3a2d91016040516020818303038152906040526040518263ffffffff1660e01b815260040161070091906114ef565b602060405180830381865afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107419190611502565b5060008773ffffffffffffffffffffffffffffffffffffffff1663a6060871888b8d8989336040518763ffffffff1660e01b8152600401610786959493929190611524565b60206040518083038160008887f1935050505080156107e0575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526107dd9181019061156c565b60015b61085d573d80801561080e576040519150601f19603f3d011682016040523d82523d6000602084013e610813565b606091505b507fffdd6142bbb721f3400e3908b04b86f60649b2e4d191e3f4c50c32c3e6471d2f61083e82611012565b60405161084b91906114ef565b60405180910390a16002915050610863565b50600190505b600082815260046020526040902080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156108ac576108ac611178565b02179055508773ffffffffffffffffffffffffffffffffffffffff16827f04214a849019ea3548afcedee810b5bc1680cfb64e22fdf9051a823f3cdfea65838d8a6040516108fc9392919061158d565b60405180910390a350505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b73ffffffffffffffffffffffffffffffffffffffff8116610a0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742073657420746f2030000000000000000000000000000000000060448201526064016104ab565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b73ffffffffffffffffffffffffffffffffffffffff8116610b53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742073657420746f2030000000000000000000000000000000000060448201526064016104ab565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b468503610c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c696420636861696e4964000000000000000000000000000000000060448201526064016104ab565b6000610c108684846103a1565b905080341015610c7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e7375666669656e742067617320666565000000000000000000000000000060448201526064016104ab565b6000610cad4633898b600160149054906101000a900467ffffffffffffffff1667ffffffffffffffff168b8b61035f565b905080873373ffffffffffffffffffffffffffffffffffffffff167f864ad5e86ed3626c9517260fbfe1eed395157fd938e459e9fb607a07129cdd2a468c8b8b600160149054906101000a900467ffffffffffffffff168c8c34604051610d1b9897969594939291906115bd565b60405180910390a43460026000828254610d359190611645565b909155505060018054601490610d6c9074010000000000000000000000000000000000000000900467ffffffffffffffff1661165d565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b60025460405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610e63573d6000803e3d6000fd5b5050600060025550565b60005473ffffffffffffffffffffffffffffffffffffffff163314610eee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b73ffffffffffffffffffffffffffffffffffffffff8116610f91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104ab565b610f9a81610f9d565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060448251101561105757505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b6004820191508180602001905181019061107191906116b3565b92915050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f9a57600080fd5b60008083601f8401126110ab57600080fd5b50813567ffffffffffffffff8111156110c357600080fd5b6020830191508360208285010111156110db57600080fd5b9250929050565b600080600080600080600060c0888a0312156110fd57600080fd5b87359650602088013561110f81611077565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff81111561114057600080fd5b61114c8a828b01611099565b989b979a50959850939692959293505050565b60006020828403121561117157600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106111de577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b6020810161107182846111a7565b60008060006040848603121561120557600080fd5b83359250602084013567ffffffffffffffff81111561122357600080fd5b61122f86828701611099565b9497909650939450505050565b6000806040838503121561124f57600080fd5b8235915060208301356003811061126557600080fd5b809150509250929050565b60008060008060008060008060e0898b03121561128c57600080fd5b883597506020890135965060408901356112a581611077565b9550606089013594506080890135935060a089013567ffffffffffffffff8111156112cf57600080fd5b6112db8b828c01611099565b999c989b50969995989497949560c00135949350505050565b60006020828403121561130657600080fd5b813561131181611077565b9392505050565b6000806000806000806080878903121561133157600080fd5b8635955060208701359450604087013567ffffffffffffffff8082111561135757600080fd5b6113638a838b01611099565b9096509450606089013591508082111561137c57600080fd5b5061138989828a01611099565b979a9699509497509295939492505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b87815273ffffffffffffffffffffffffffffffffffffffff8716602082015285604082015284606082015283608082015260c060a0820152600061142c60c08301848661139b565b9998505050505050505050565b83815260406020820152600061145360408301848661139b565b95945050505050565b60006020828403121561146e57600080fd5b5051919050565b60005b83811015611490578181015183820152602001611478565b8381111561149f576000848401525b50505050565b600081518084526114bd816020860160208601611475565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061131160208301846114a5565b60006020828403121561151457600080fd5b8151801515811461131157600080fd5b85815284602082015260806040820152600061154460808301858761139b565b905073ffffffffffffffffffffffffffffffffffffffff831660608301529695505050505050565b60006020828403121561157e57600080fd5b81516002811061131157600080fd5b6060810161159b82866111a7565b67ffffffffffffffff8085166020840152808416604084015250949350505050565b88815287602082015260c0604082015260006115dd60c08301888a61139b565b67ffffffffffffffff87166060840152828103608084015261160081868861139b565b9150508260a08301529998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561165857611658611616565b500190565b600067ffffffffffffffff80831681810361167a5761167a611616565b6001019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156116c557600080fd5b815167ffffffffffffffff808211156116dd57600080fd5b818401915084601f8301126116f157600080fd5b81518181111561170357611703611684565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561174957611749611684565b8160405282815287602084870101111561176257600080fd5b611773836020830160208801611475565b97965050505050505056fea26469706673582212207777fcb09c4e24ed2ff2e2c0e2450fe77f9bec523aeafa6b14686bedeb3fc9c164736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063a5c0edf31161008a578063affed0e011610059578063affed0e0146102a0578063c4087335146102f2578063d6b457b91461031f578063f2fde38b1461033f57600080fd5b8063a5c0edf314610220578063a66dd38414610240578063aa70fc0e14610260578063ac8a4c1b1461028d57600080fd5b8063715018a6116100c6578063715018a61461017d5780638da5cb5b146101945780639b11079c146101e0578063a1b058d81461020057600080fd5b80630bb7e6aa146100ed57806325b19fa3146101205780635da6d2c41461015d575b600080fd5b3480156100f957600080fd5b5061010d6101083660046110e2565b61035f565b6040519081526020015b60405180910390f35b34801561012c57600080fd5b5061015061013b36600461115f565b60009081526004602052604090205460ff1690565b60405161011791906111e2565b34801561016957600080fd5b5061010d6101783660046111f0565b6103a1565b34801561018957600080fd5b506101926104bc565b005b3480156101a057600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610117565b3480156101ec57600080fd5b506101926101fb36600461123c565b610549565b34801561020c57600080fd5b5061019261021b366004611270565b61061c565b34801561022c57600080fd5b5061019261023b3660046112f4565b610910565b34801561024c57600080fd5b5061019261025b3660046112f4565b610a55565b34801561026c57600080fd5b506001546101bb9073ffffffffffffffffffffffffffffffffffffffff1681565b61019261029b366004611318565b610b9a565b3480156102ac57600080fd5b506001546102d99074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610117565b3480156102fe57600080fd5b506003546101bb9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561032b57600080fd5b5061019261033a3660046112f4565b610d9c565b34801561034b57600080fd5b5061019261035a3660046112f4565b610e6d565b60008787878787878760405160200161037e97969594939291906113e4565b604051602081830303815290604052805190602001209050979650505050505050565b6001546040517f47feadc1000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff909116906347feadc19061040090889088908890600401611439565b6020604051808303816000875af115801561041f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610443919061145c565b9050806000036104b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f466565206e6f742073657400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461053d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b6105476000610f9d565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b600082815260046020526040902080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600281111561061357610613611178565b02179055505050565b806000808281526004602052604090205460ff16600281111561064157610641611178565b146106a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4d65737361676520616c7265616479206578656375746564000000000000000060448201526064016104ab565b6003546040805133602082015273ffffffffffffffffffffffffffffffffffffffff90921691638b1b3a2d91016040516020818303038152906040526040518263ffffffff1660e01b815260040161070091906114ef565b602060405180830381865afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107419190611502565b5060008773ffffffffffffffffffffffffffffffffffffffff1663a6060871888b8d8989336040518763ffffffff1660e01b8152600401610786959493929190611524565b60206040518083038160008887f1935050505080156107e0575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526107dd9181019061156c565b60015b61085d573d80801561080e576040519150601f19603f3d011682016040523d82523d6000602084013e610813565b606091505b507fffdd6142bbb721f3400e3908b04b86f60649b2e4d191e3f4c50c32c3e6471d2f61083e82611012565b60405161084b91906114ef565b60405180910390a16002915050610863565b50600190505b600082815260046020526040902080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156108ac576108ac611178565b02179055508773ffffffffffffffffffffffffffffffffffffffff16827f04214a849019ea3548afcedee810b5bc1680cfb64e22fdf9051a823f3cdfea65838d8a6040516108fc9392919061158d565b60405180910390a350505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b73ffffffffffffffffffffffffffffffffffffffff8116610a0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742073657420746f2030000000000000000000000000000000000060448201526064016104ab565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b73ffffffffffffffffffffffffffffffffffffffff8116610b53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742073657420746f2030000000000000000000000000000000000060448201526064016104ab565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b468503610c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c696420636861696e4964000000000000000000000000000000000060448201526064016104ab565b6000610c108684846103a1565b905080341015610c7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e7375666669656e742067617320666565000000000000000000000000000060448201526064016104ab565b6000610cad4633898b600160149054906101000a900467ffffffffffffffff1667ffffffffffffffff168b8b61035f565b905080873373ffffffffffffffffffffffffffffffffffffffff167f864ad5e86ed3626c9517260fbfe1eed395157fd938e459e9fb607a07129cdd2a468c8b8b600160149054906101000a900467ffffffffffffffff168c8c34604051610d1b9897969594939291906115bd565b60405180910390a43460026000828254610d359190611645565b909155505060018054601490610d6c9074010000000000000000000000000000000000000000900467ffffffffffffffff1661165d565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b60025460405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610e63573d6000803e3d6000fd5b5050600060025550565b60005473ffffffffffffffffffffffffffffffffffffffff163314610eee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b73ffffffffffffffffffffffffffffffffffffffff8116610f91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104ab565b610f9a81610f9d565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060448251101561105757505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b6004820191508180602001905181019061107191906116b3565b92915050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f9a57600080fd5b60008083601f8401126110ab57600080fd5b50813567ffffffffffffffff8111156110c357600080fd5b6020830191508360208285010111156110db57600080fd5b9250929050565b600080600080600080600060c0888a0312156110fd57600080fd5b87359650602088013561110f81611077565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff81111561114057600080fd5b61114c8a828b01611099565b989b979a50959850939692959293505050565b60006020828403121561117157600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106111de577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b6020810161107182846111a7565b60008060006040848603121561120557600080fd5b83359250602084013567ffffffffffffffff81111561122357600080fd5b61122f86828701611099565b9497909650939450505050565b6000806040838503121561124f57600080fd5b8235915060208301356003811061126557600080fd5b809150509250929050565b60008060008060008060008060e0898b03121561128c57600080fd5b883597506020890135965060408901356112a581611077565b9550606089013594506080890135935060a089013567ffffffffffffffff8111156112cf57600080fd5b6112db8b828c01611099565b999c989b50969995989497949560c00135949350505050565b60006020828403121561130657600080fd5b813561131181611077565b9392505050565b6000806000806000806080878903121561133157600080fd5b8635955060208701359450604087013567ffffffffffffffff8082111561135757600080fd5b6113638a838b01611099565b9096509450606089013591508082111561137c57600080fd5b5061138989828a01611099565b979a9699509497509295939492505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b87815273ffffffffffffffffffffffffffffffffffffffff8716602082015285604082015284606082015283608082015260c060a0820152600061142c60c08301848661139b565b9998505050505050505050565b83815260406020820152600061145360408301848661139b565b95945050505050565b60006020828403121561146e57600080fd5b5051919050565b60005b83811015611490578181015183820152602001611478565b8381111561149f576000848401525b50505050565b600081518084526114bd816020860160208601611475565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061131160208301846114a5565b60006020828403121561151457600080fd5b8151801515811461131157600080fd5b85815284602082015260806040820152600061154460808301858761139b565b905073ffffffffffffffffffffffffffffffffffffffff831660608301529695505050505050565b60006020828403121561157e57600080fd5b81516002811061131157600080fd5b6060810161159b82866111a7565b67ffffffffffffffff8085166020840152808416604084015250949350505050565b88815287602082015260c0604082015260006115dd60c08301888a61139b565b67ffffffffffffffff87166060840152828103608084015261160081868861139b565b9150508260a08301529998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561165857611658611616565b500190565b600067ffffffffffffffff80831681810361167a5761167a611616565b6001019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156116c557600080fd5b815167ffffffffffffffff808211156116dd57600080fd5b818401915084601f8301126116f157600080fd5b81518181111561170357611703611684565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561174957611749611684565b8160405282815287602084870101111561176257600080fd5b611773836020830160208801611475565b97965050505050505056fea26469706673582212207777fcb09c4e24ed2ff2e2c0e2450fe77f9bec523aeafa6b14686bedeb3fc9c164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)": {
        "params": {
          "_dstAddress": "Destination address that the arbitrary message will be passed to",
          "_gasLimit": "Gas limit to be passed alongside the message, depending on the fee paid on srcChain",
          "_message": "Arbitrary message payload to pass to the destination chain receiver",
          "_srcAddress": "Originating bytes32 address of the message sender on the srcChain",
          "_srcChainId": "Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendMessage(bytes32,uint256,bytes,bytes)": {
        "params": {
          "_dstChainId": "The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains",
          "_message": "The arbitrary payload to pass to the destination chain receiver",
          "_options": "Versioned struct used to instruct relayer on how to proceed with gas limits",
          "_receiver": "The bytes32 address of the destination contract to be called"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawGasFees(address)": {
        "params": {
          "to": "Address to withdraw gas fees to, which can be specified in the event owner() can't receive native gas"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessage(uint256,bytes32,address,uint256,uint256,bytes,bytes32)": {
        "notice": "Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain"
      },
      "sendMessage(bytes32,uint256,bytes,bytes)": {
        "notice": "Sends a message to a receiving contract address on another chain. Sender must make sure that the message is unique and not a duplicate message."
      },
      "updateMessageStatus(bytes32,uint8)": {
        "notice": "CONTRACT CONFIG "
      },
      "withdrawGasFees(address)": {
        "notice": "Withdraws accumulated fees in native gas token, based on fees variable."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3306,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "gasFeePricing",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3308,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "nonce",
        "offset": 20,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 3310,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "fees",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3079,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "authVerifier",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3088,
        "contract": "contracts/messaging/MessageBus.sol:MessageBus",
        "label": "executedMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_enum(TxStatus)3083)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TxStatus)3083": {
        "encoding": "inplace",
        "label": "enum MessageBusReceiver.TxStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_enum(TxStatus)3083)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum MessageBusReceiver.TxStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(TxStatus)3083"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}